<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>H5C3基础大全二（实战）</title>
    <url>/2022/03/07/H5C3%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%BA%8C%EF%BC%88%E5%AE%9E%E6%88%98%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、双栏信息"><a href="#一、双栏信息" class="headerlink" title="一、双栏信息"></a>一、双栏信息</h1><h1 id="二、元素阴影效果"><a href="#二、元素阴影效果" class="headerlink" title="二、元素阴影效果"></a>二、元素阴影效果</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: offset-x offset-y blur spread color inset;</span><br></pre></td></tr></table></figure>
<ul>
<li>offset-x：必需，取值正负都可。offset-x水平阴影的位置。</li>
<li>offset-y：必需，取值正负都可。offset-y垂直阴影的位置。</li>
<li>blur:可选，只能取正值。blur-radius阴影模糊半径，0即无模糊效果，值越大阴影边缘越模糊。</li>
<li>spread：可选，取值正负都可。spread代表阴影的周长向四周扩展的尺寸，正值，阴影扩大，负值阴影缩小。</li>
<li>color:可选。阴影的颜色。如果不设置，浏览器会取默认颜色，通常是黑色，但各浏览器默认颜色有差异，建议不要省略。可以是rgb(250,0,0)，也可以是有透明值的rgba(250,0,0,0.5)。</li>
<li>inset:可选。关键字，将外部投影(默认outset)改为内部投影。inset 阴影在背景之上，内容之下。</li>
</ul>
<h1 id="三、元素访问效果"><a href="#三、元素访问效果" class="headerlink" title="三、元素访问效果"></a>三、元素访问效果</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	ele.hover：鼠标在元素上方时，要显示的效果</span></span><br><span class="line"><span class="comment">	ele.link：未被访问的元素，要显示的效果</span></span><br><span class="line"><span class="comment">	ele.active：鼠标按住不动时，要显示的效果</span></span><br><span class="line"><span class="comment">	ele.visited：元素访问过后，要显示的效果</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>H5C3</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>网页效果</tag>
      </tags>
  </entry>
  <entry>
    <title>H5C3进阶一</title>
    <url>/2022/03/01/H5C3%E8%BF%9B%E9%98%B6%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、浮动"><a href="#一、浮动" class="headerlink" title="一、浮动"></a>一、浮动</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><ul>
<li>通过浮动可以使一个元素向其父元素的左侧或右侧移动</li>
<li>使用 float 属性来设置于元素的浮动，可选值：<ul>
<li>none 默认值 元素不浮动</li>
<li>left 元素向右浮动</li>
<li>right 元素向右浮动</li>
</ul>
</li>
</ul>
<h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ol>
<li>浮动的元素会完全脱离文档流，不再占据文档流中的位置</li>
<li>设置浮动以后元素回向父元素的左侧或右侧移动</li>
<li>浮动元素默认不会从父元素中移出</li>
<li>浮动元素向左或向右移动时，不会超过它前边的其他浮动元素</li>
<li>如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移</li>
<li>浮动元素不会超过它上边的浮动的兄弟元素，最多就是和它一样高</li>
</ol>
<h2 id="1-3-注意"><a href="#1-3-注意" class="headerlink" title="1.3 注意"></a>1.3 注意</h2><ol>
<li>元素设置浮动以后，水平布局的等式便不需要强制成立</li>
<li>元素设置浮动以后，会完全从文档流中脱离，不在占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动</li>
</ol>
<h2 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4 总结"></a>1.4 总结</h2><ul>
<li>浮动目前来讲它的主要作用就是让页面中的元素可以水平排列</li>
<li>通过浮动可以制作一些水平方向的布局<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="1-5-浮动与文字"><a href="#1-5-浮动与文字" class="headerlink" title="1.5 浮动与文字"></a>1.5 浮动与文字</h2><ul>
<li>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来设置文字环绕图片的效果</li>
</ul>
<h2 id="1-6-脱离文档流"><a href="#1-6-脱离文档流" class="headerlink" title="1.6 脱离文档流"></a>1.6 脱离文档流</h2><h3 id="1-6-1-概念"><a href="#1-6-1-概念" class="headerlink" title="1.6.1 概念"></a>1.6.1 概念</h3><ul>
<li>元素设置浮动以后，将会从文档流中脱离后，元素的一些特点也会发生变化</li>
</ul>
<h3 id="1-6-2-特点"><a href="#1-6-2-特点" class="headerlink" title="1.6.2 特点"></a>1.6.2 特点</h3><h4 id="（1）块元素"><a href="#（1）块元素" class="headerlink" title="（1）块元素"></a>（1）块元素</h4><ol>
<li>块元素不再独占页面的一行</li>
<li>脱离文档流以后，块元素的宽度和高度默认都被内容撑开</li>
</ol>
<h4 id="（2）行内元素"><a href="#（2）行内元素" class="headerlink" title="（2）行内元素"></a>（2）行内元素</h4><ul>
<li>行内元素脱离文档流以后变成块元素，特点和块元素一样</li>
<li>脱离文档流以后，不需要再区分块和行内了</li>
</ul>
<h1 id="二、网页布局"><a href="#二、网页布局" class="headerlink" title="二、网页布局"></a>二、网页布局</h1><h2 id="2-1-结构"><a href="#2-1-结构" class="headerlink" title="2.1 结构"></a>2.1 结构</h2><ul>
<li>头部</li>
<li>主体</li>
<li>左侧导航</li>
<li>中间的内容</li>
<li>右边的边栏</li>
<li>网页的底部</li>
</ul>
<h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2 实现"></a>2.2 实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>, <span class="selector-tag">main</span>, <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置头部 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: silver;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置主体 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>, <span class="selector-tag">article</span>, <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置左侧的导航 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置中间的内容 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">article</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置右侧的内容 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">aside</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置底部 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建网页的主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧导航 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 中间的内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 右边的边栏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 网页的底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、BFC"><a href="#三、BFC" class="headerlink" title="三、BFC"></a>三、BFC</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><ul>
<li>BFC(Block Formatting Context)   块级格式化环境</li>
<li>BFC是CSS中的一个隐含的属性,可以为一个元素开启BFC</li>
<li>开启BFC,该元素会变成一个独立的布局区域</li>
</ul>
<h2 id="3-2-特点"><a href="#3-2-特点" class="headerlink" title="3.2 特点"></a>3.2 特点</h2><ol>
<li>开启BFC的元素不会被浮动元素所覆盖</li>
<li>开启BFC的元素子元素和父元素外边距不会重叠</li>
<li>开启BFC的元素怒可以包含浮动的子元素</li>
</ol>
<h2 id="3-3-BFC开启方式"><a href="#3-3-BFC开启方式" class="headerlink" title="3.3 BFC开启方式"></a>3.3 BFC开启方式</h2><ol>
<li>设置元素的浮动(不推荐)</li>
<li>将元素设置为行内块元素(不推荐)</li>
<li>将元素的overflow设置为一个非visible的值</li>
<li>常用的方式 为元素设置overflow:hidden    开启其BFC,以使其可以包含浮动元素</li>
</ol>
<h2 id="3-4-示例"><a href="#3-4-示例" class="headerlink" title="3.4 示例"></a>3.4 示例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box2&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、高度塌陷"><a href="#四、高度塌陷" class="headerlink" title="四、高度塌陷"></a>四、高度塌陷</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><ul>
<li>在浮动布局中,父元素的高度默认被子元素撑开</li>
<li>当子元素浮动后,其会完全脱离文档流,子元素从文档流中脱离</li>
<li>将会无法撑起父元素的高度,导致父元素的高度丢失</li>
<li>父元素高度丢失以后,其下的元素会自动上移,导致页面布局混乱</li>
<li>所以高度塌陷使浮动布局中比较常见的问题,这个问题必须要进行处理</li>
</ul>
<h2 id="4-2-示例"><a href="#4-2-示例" class="headerlink" title="4.2 示例"></a>4.2 示例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: red solid <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 开启BFC */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* display: inline-block; */</span></span></span><br><span class="line"><span class="css">             <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 高度塌陷的问题 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-3-解决方法"><a href="#4-3-解决方法" class="headerlink" title="4.3 解决方法"></a>4.3 解决方法</h2><h3 id="4-3-1-方法一：clear"><a href="#4-3-1-方法一：clear" class="headerlink" title="4.3.1 方法一：clear"></a>4.3.1 方法一：clear</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">                由于box1的浮动,导致box3位置上移</span></span></span><br><span class="line"><span class="comment"><span class="css">                    也就是box3收到了box1浮动的影响,位置发生了变化</span></span></span><br><span class="line"><span class="comment"><span class="css">                </span></span></span><br><span class="line"><span class="comment"><span class="css">                如果我们不希望某个元素因为其他元素浮动的影响而改变位置,</span></span></span><br><span class="line"><span class="comment"><span class="css">                    可以通过clear属性来清楚浮动元素对当前元素所产生的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                </span></span></span><br><span class="line"><span class="comment"><span class="css">                clear</span></span></span><br><span class="line"><span class="comment"><span class="css">                    作用:清除浮动元素对当前元素所产生的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                    可选值</span></span></span><br><span class="line"><span class="comment"><span class="css">                        left:清除左侧浮动元素对当前元素的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                        right:清除左侧浮动元素对当前元素的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                        both:清除两侧影响最大的那侧</span></span></span><br><span class="line"><span class="comment"><span class="css">                    </span></span></span><br><span class="line"><span class="comment"><span class="css">                    原理:</span></span></span><br><span class="line"><span class="comment"><span class="css">                        设置清除浮动以后,浏览器会自动为元素添加一个上外边距,</span></span></span><br><span class="line"><span class="comment"><span class="css">                            以使其位置不受其他元素的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                        </span></span></span><br><span class="line"><span class="comment"><span class="css">             */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-方法二：伪类"><a href="#4-3-2-方法二：伪类" class="headerlink" title="4.3.2 方法二：伪类"></a>4.3.2 方法二：伪类</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 解决外边距重叠,父元素会继承第一个子元素的外边距 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* .box1::before&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            content: &#x27;&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="css">            display: table;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* clearfix可以同时解决高度塌陷和外边距重叠的问题,</span></span></span><br><span class="line"><span class="comment"><span class="css">            当遇到这些问题时,直接使用clearfix这个类即可 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="五、定位"><a href="#五、定位" class="headerlink" title="五、定位"></a>五、定位</h1><h2 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h2><ul>
<li>定位是一种更加高级的布局手段</li>
<li>通过定位可以将元素摆放到页面的任意位置</li>
<li>使用position来设置定位<ul>
<li>static  默认值，元素是静止的，没有开启定位</li>
<li>ralative    开启元素的相对定位</li>
<li>absolute    开启元素的绝对定位</li>
<li>fixed   开启元素的固定定位</li>
<li>sticky  开启元素的粘滞定位</li>
</ul>
</li>
</ul>
<h2 id="5-2-相对定位"><a href="#5-2-相对定位" class="headerlink" title="5.2 相对定位"></a>5.2 相对定位</h2><h3 id="5-2-1-概念"><a href="#5-2-1-概念" class="headerlink" title="5.2.1 概念"></a>5.2.1 概念</h3><ul>
<li>当元素的position属性值设置为relative时，则开启了元素的相对定位</li>
</ul>
<h3 id="5-2-2-特点"><a href="#5-2-2-特点" class="headerlink" title="5.2.2 特点"></a>5.2.2 特点</h3><ol>
<li>元素开启相对定位以后，如果不设置偏移量，元素不会发生任何的变化</li>
<li>相对定位是参照于元素在文档流中的位置进行定位</li>
<li>相对定位会提升元素的层级</li>
<li>相对定位不会使元素脱离文档流</li>
<li>相对定位不会改变元素的性质，块还是块，行内还是行内</li>
</ol>
<h2 id="5-3-偏移量"><a href="#5-3-偏移量" class="headerlink" title="5.3 偏移量"></a>5.3 偏移量</h2><ul>
<li>当元素开启了定位以后，可以通过偏移量来设置元素的位置</li>
<li>top：定位元素和定位位置上边的距离</li>
<li>bottom：定位元素和定位位置下边的距离<ul>
<li>定位元素垂直方向的位置由top和bottom两个属性来控制，通常情况下只会使用其中之一</li>
<li>top值越大，定位元素越向下移动</li>
<li>bottom值越大，定位元素越向上移动</li>
</ul>
</li>
<li>left：定位元素和定位位置左边的距离</li>
<li>right：定位元素和定位位置右边的距离<ul>
<li>定位元素水平方向的位置由left和right两个属性来控制，通常情况下只会使用其中之一</li>
<li>left值越大，定位元素越向右移动</li>
<li>right值越大，定位元素越向左移动</li>
</ul>
</li>
</ul>
<h2 id="5-4-绝对定位"><a href="#5-4-绝对定位" class="headerlink" title="5.4 绝对定位"></a>5.4 绝对定位</h2><h3 id="5-4-1-概念"><a href="#5-4-1-概念" class="headerlink" title="5.4.1 概念"></a>5.4.1 概念</h3><ul>
<li>当元素的position属性值设置威absolute时，则开启了元素的绝对定位</li>
</ul>
<h3 id="5-4-2-特点"><a href="#5-4-2-特点" class="headerlink" title="5.4.2 特点"></a>5.4.2 特点</h3><ol>
<li>开启绝对定位后，如果不设置偏移量，元素的位置不会发生变化</li>
<li>开启绝对定位后，元素会从文档流中脱离</li>
<li>绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开</li>
<li>绝对定位会使元素提升一个层级</li>
<li>绝对定位元素是相对于其包含块进行定位的</li>
</ol>
<h3 id="5-4-3-绝对定位元素的布局"><a href="#5-4-3-绝对定位元素的布局" class="headerlink" title="5.4.3 绝对定位元素的布局"></a>5.4.3 绝对定位元素的布局</h3><ul>
<li>水平布局：<ul>
<li>left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right= 父元素内容区宽度</li>
</ul>
</li>
<li>当我们开启了绝对定位后，水平方向的布局等式就需要添加 left 和 right 两个值</li>
<li>此时规则和之前一样，只是多添加了两个值<ul>
<li>当发生过渡约束，</li>
<li>如果9个值中没有auto，则自动调整right值，以使等式成立</li>
<li>如果由auto，则自动调整auto值，以使等式成立</li>
</ul>
</li>
<li>可设置auto的值<ul>
<li>margin width left right</li>
<li>因为left 和 right的值默认是auto，所以如果不知道left和right，则等式满足时，会自动调整这两个值</li>
</ul>
</li>
<li>垂直方向布局的等式也必须满足：<ul>
<li>top + margin-top/bottom + padding-top/bottom +border-top/bottom + bottom = 包含块的高度</li>
</ul>
</li>
</ul>
<h2 id="5-5-包含块（containing-block）"><a href="#5-5-包含块（containing-block）" class="headerlink" title="5.5 包含块（containing block）"></a>5.5 包含块（containing block）</h2><ul>
<li>正常情况下，包含块就是离当前元素最近的祖先块元素<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>绝对定位的包含块<ul>
<li>包含快就是离它最近的开启了定位的祖先元素</li>
<li>如果所有的祖先元素都没有开启定位，则相对于根元素进行定位：html（根元素、初始包含块）</li>
</ul>
</li>
</ul>
<h2 id="5-6-固定定位"><a href="#5-6-固定定位" class="headerlink" title="5.6 固定定位"></a>5.6 固定定位</h2><h3 id="5-6-1-概念"><a href="#5-6-1-概念" class="headerlink" title="5.6.1 概念"></a>5.6.1 概念</h3><ul>
<li>将元素的position属性设置为fixed，则开启了元素的固定定位</li>
<li>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样<ul>
<li>唯一不同的是固定定位永远参照于浏览器的视口进行定位</li>
<li>固定定位的元素不会随网页的滚动条滚动</li>
</ul>
</li>
</ul>
<h2 id="5-7-粘滞定位"><a href="#5-7-粘滞定位" class="headerlink" title="5.7 粘滞定位"></a>5.7 粘滞定位</h2><h3 id="5-7-1-概念"><a href="#5-7-1-概念" class="headerlink" title="5.7 1 概念"></a>5.7 1 概念</h3><ul>
<li>当元素的position属性设置为sticky时，则开启了元素的粘滞定位</li>
<li>粘滞定位和相对定位的特点基本一致<ul>
<li>不同的是粘滞定位可以在元素到达某个位置时将其固定</li>
</ul>
</li>
</ul>
<h2 id="5-8-元素的层级"><a href="#5-8-元素的层级" class="headerlink" title="5.8 元素的层级"></a>5.8 元素的层级</h2><ul>
<li>对于开启了定位元素，可以通过z-index属性来指定元素的层级</li>
<li>z-index需要一个整数作为参数，值越大的元素层级越高，元素的层级越高越优先显示</li>
<li>如果元素层级一样，优先显示靠下的元素</li>
<li>祖先元素的层级再高也不会盖住后代元素</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>H5C3</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis基础大全</title>
    <url>/2022/03/14/Mybatis%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、Mybatis"><a href="#一、Mybatis" class="headerlink" title="一、Mybatis"></a>一、Mybatis</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><ul>
<li>优秀的持久层框架</li>
</ul>
<h2 id="1-2-持久层"><a href="#1-2-持久层" class="headerlink" title="1.2 持久层"></a>1.2 持久层</h2><ul>
<li>持久化：将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：断电即失</li>
</ul>
<h1 id="二、第一个案例"><a href="#二、第一个案例" class="headerlink" title="二、第一个案例"></a>二、第一个案例</h1><h2 id="2-1-导入依赖包与资源路径"><a href="#2-1-导入依赖包与资源路径" class="headerlink" title="2.1 导入依赖包与资源路径"></a>2.1 导入依赖包与资源路径</h2><h3 id="2-1-1-导入依赖包"><a href="#2-1-1-导入依赖包" class="headerlink" title="2.1.1 导入依赖包"></a>2.1.1 导入依赖包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    mysql驱动    --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    mybatis    --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    junit    --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-配置maven资源路径"><a href="#2-1-2-配置maven资源路径" class="headerlink" title="2.1.2 配置maven资源路径"></a>2.1.2 配置maven资源路径</h3><ul>
<li>在pom文件中添加以下内容，防止项目运行时，代码层的xml文件由于不在默认的resource资源目录中，导致访问失败而报错，父/子模块的pom都可以添加进去</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置资源导出,防止dao层中的xml无法访问而报错  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-配置Mybatis-xml文件"><a href="#2-2-配置Mybatis-xml文件" class="headerlink" title="2.2 配置Mybatis.xml文件"></a>2.2 配置Mybatis.xml文件</h2><ul>
<li>在resource下创建Mybatis.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">由于hexo头信息无法复制，因此以注释的形式标注出来</span></span><br><span class="line"><span class="comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;com.mysql.cj.jdbc.Driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;root&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;FLzxSQC1998.Com&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuang/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-编写代码"><a href="#2-3-编写代码" class="headerlink" title="2.3 编写代码"></a>2.3 编写代码</h2><h3 id="2-3-1-编写工具类"><a href="#2-3-1-编写工具类" class="headerlink" title="2.3.1 编写工具类"></a>2.3.1 编写工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示作用域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            使用Mybatis第一步:获取SqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有了工厂类SqlSessionFactory,就可以获取到SqlSession实例了</span></span><br><span class="line">    <span class="comment">// SqlSession完全包含了面向数据库执行sql命令所需要的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-1-添加实体类"><a href="#2-3-1-添加实体类" class="headerlink" title="2.3.1 添加实体类"></a>2.3.1 添加实体类</h3><ul>
<li>pojo层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-编写接口"><a href="#2-3-2-编写接口" class="headerlink" title="2.3.2 编写接口"></a>2.3.2 编写接口</h3><ul>
<li>无需编写实现类，Mybatis会帮我们实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-Mapper配置文件"><a href="#2-4-Mapper配置文件" class="headerlink" title="2.4 Mapper配置文件"></a>2.4 Mapper配置文件</h2><ul>
<li>dao层下创建UserMapper.xml文件</li>
<li>注意这个mapper文件需要在mybatis-config进行配置，否则程序运行会因为找不到mapper文件而报错</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绑定命名空间,绑定自己的dao层接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-获取结果"><a href="#2-5-获取结果" class="headerlink" title="2.5 获取结果"></a>2.5 获取结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、增删改查"><a href="#三、增删改查" class="headerlink" title="三、增删改查"></a>三、增删改查</h1><h2 id="3-1-namespace"><a href="#3-1-namespace" class="headerlink" title="3.1 namespace"></a>3.1 namespace</h2><ul>
<li>dao层命名统一为xxxMapper.xxx</li>
</ul>
<h2 id="3-2-Mapper配置文件解析"><a href="#3-2-Mapper配置文件解析" class="headerlink" title="3.2 Mapper配置文件解析"></a>3.2 Mapper配置文件解析</h2><ul>
<li>namespace：表示dao层定义的接口路径</li>
<li>id：表示接口中的方法名</li>
<li>resultType：Sql语句执行的返回值类型</li>
<li>parameterType：传入的参数类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定命名空间,绑定自己的dao层接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id= #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-CRUD"><a href="#3-3-CRUD" class="headerlink" title="3.3 CRUD"></a>3.3 CRUD</h2><h3 id="3-3-1-编写sql语句"><a href="#3-3-1-编写sql语句" class="headerlink" title="3.3.1 编写sql语句"></a>3.3.1 编写sql语句</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据id查询用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id= #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--插入用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--修改用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--删除用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-2-编写接口方法"><a href="#3-3-2-编写接口方法" class="headerlink" title="3.3.2 编写接口方法"></a>3.3.2 编写接口方法</h3><ul>
<li>在接口中定义对应方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 根据id查找用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-3-测试方法"><a href="#3-3-3-测试方法" class="headerlink" title="3.3.3 测试方法"></a>3.3.3 测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    User user = userMapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="keyword">int</span> res = userMapper.addUser(<span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;插入成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务，否则无法实现插入效果</span></span><br><span class="line">    sqlSession.commit()</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    userMapper.updateUser(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务，否则无法实现插入效果</span></span><br><span class="line">    sqlSession.commit()</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    userMapper.deleteUser(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务，否则无法实现插入效果</span></span><br><span class="line">    sqlSession.commit()</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、Map和模糊查询"><a href="#四、Map和模糊查询" class="headerlink" title="四、Map和模糊查询"></a>四、Map和模糊查询</h1><h2 id="4-1-Map实现CRUD"><a href="#4-1-Map实现CRUD" class="headerlink" title="4.1 Map实现CRUD"></a>4.1 Map实现CRUD</h2><h3 id="4-1-1-优势"><a href="#4-1-1-优势" class="headerlink" title="4.1.1 优势"></a>4.1.1 优势</h3><ul>
<li>相对于原来的传pojo对象的方式，map方式更为传参更为灵活</li>
</ul>
<h3 id="4-1-2-编写sql语句"><a href="#4-1-2-编写sql语句" class="headerlink" title="4.1.2 编写sql语句"></a>4.1.2 编写sql语句</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		插入用户，使用map对象进行插入,注意parameterType=&quot;map&quot;，传递参数为map类型</span></span><br><span class="line"><span class="comment">		values后的字段名可以自定义如userid等，map的键名必须跟这个自定的名字保持一致</span></span><br><span class="line"><span class="comment">            这样就可以在map中取得对应的值，完成数据的插入</span></span><br><span class="line"><span class="comment">		但表的列名字段必须和数据库表保持一致</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user(id,name,pwd) values (#&#123;userid&#125;,#&#123;username&#125;,#&#123;password&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-1-3-编写接口方法"><a href="#4-1-3-编写接口方法" class="headerlink" title="4.1.3 编写接口方法"></a>4.1.3 编写接口方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Map方式插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-1-4-测试方法"><a href="#4-1-4-测试方法" class="headerlink" title="4.1.4 测试方法"></a>4.1.4 测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userid&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    userMapper.addUser(map);</span><br><span class="line">    </span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-模糊查询"><a href="#4-2-模糊查询" class="headerlink" title="4.2 模糊查询"></a>4.2 模糊查询</h2><h3 id="4-2-1-编写sql语句"><a href="#4-2-1-编写sql语句" class="headerlink" title="4.2.1 编写sql语句"></a>4.2.1 编写sql语句</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.UserMapper&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		写成&quot;%&quot;#&#123;value&#125;&quot;%&quot;形式是为了防止sql注入的风险，推荐，这样只需要传递匹配字符就可以了</span></span><br><span class="line"><span class="comment">		如果写成#&#123;value&#125;就必须传参&quot;%xxx%&quot;,或者其他匹配符，否则报错，但不推荐这么写</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="五、环境配置"><a href="#五、环境配置" class="headerlink" title="五、环境配置"></a>五、环境配置</h1><h2 id="5-1-核心配置文件内容"><a href="#5-1-核心配置文件内容" class="headerlink" title="5.1 核心配置文件内容"></a>5.1 核心配置文件内容</h2><ul>
<li>配置标签的位置顺序依次往下，不能随便写在某个位置，否则会报错</li>
<li>properties（属性）</li>
<li>setting（设置）</li>
<li>typeAliases（类型别名）</li>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）</li>
<li>environments（环境配置）<ul>
<li>environment（环境变量）<ul>
<li>transactionManager（事务管理器）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li>databaseldProvider（数据库厂商标识）</li>
<li>mappers（映射器）</li>
</ul>
<h2 id="5-2-properties（属性）"><a href="#5-2-properties（属性）" class="headerlink" title="5.2 properties（属性）"></a>5.2 properties（属性）</h2><ul>
<li>新建properties配置文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">FLzxSQC1998.Com</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>在核心配置文件中引入外部配置文件，如db.properties<ul>
<li>需要注意的是，这个properties标签需要写在configuration标签下的第一个位置，因为configuration中的标签有顺序要求，否则会报错</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--也可以在properties中配置对应的属性，但默认会先从外部的配置文件开始读取--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--内部配置属性</span></span><br><span class="line"><span class="comment">&lt;properties resource=&quot;db.properties&quot;&gt;</span></span><br><span class="line"><span class="comment">  &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;</span></span><br><span class="line"><span class="comment">&lt;/properties&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置时，使用$&#123;&#125;取到properties配置文件中对应的值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-3-typeAliases（类型别名）"><a href="#5-3-typeAliases（类型别名）" class="headerlink" title="5.3 typeAliases（类型别名）"></a>5.3 typeAliases（类型别名）</h2><h3 id="5-3-1-自定义别名"><a href="#5-3-1-自定义别名" class="headerlink" title="5.3.1 自定义别名"></a>5.3.1 自定义别名</h3><ul>
<li>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</li>
<li>设置完简化后的别命，在使用时可以直接使用，比如在sql语句配置文件的returnType就可以直接使用别名，使配置更加简洁清晰</li>
<li>当这样配置时，<strong>别名</strong>可以用在任何使用<strong>它</strong>的地方，<strong>这种方式一般在实体类较少的情况下使用</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Comment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Comment&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Post&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Section&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Section&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Tag&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Tag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-3-2-扫描包生成别名"><a href="#5-3-2-扫描包生成别名" class="headerlink" title="5.3.2 扫描包生成别名"></a>5.3.2 扫描包生成别名</h3><ul>
<li>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</li>
<li>这种可以在实体类比较多的时候使用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	设置包后，会自动为对应的类设置别命，别名即为类名</span></span><br><span class="line"><span class="comment">	这种情况，设置的别名为首字母小写的类名，比如domain.blog.Author 的别名为 author</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-3-3-注解别名"><a href="#5-3-3-注解别名" class="headerlink" title="5.3.3 注解别名"></a>5.3.3 注解别名</h3><ul>
<li>还可以使用注解设置别名</li>
<li>在使用<strong>扫描包生成别名</strong>时，如果非要改成自定义的，可以在对应类上加上注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-4-基本类型的别名"><a href="#5-3-4-基本类型的别名" class="headerlink" title="5.3.4 基本类型的别名"></a>5.3.4 基本类型的别名</h3><ul>
<li>基本类型前加下划线：如int别名：_int</li>
<li>包装类型首字母小写：如Integer别名：int</li>
</ul>
<h2 id="5-4-setting（设置）"><a href="#5-4-setting（设置）" class="headerlink" title="5.4 setting（设置）"></a>5.4 setting（设置）</h2><h2 id="5-5-其他配置"><a href="#5-5-其他配置" class="headerlink" title="5.5 其他配置"></a>5.5 其他配置</h2><h2 id="5-6-mappers（映射器）"><a href="#5-6-mappers（映射器）" class="headerlink" title="5.6 mappers（映射器）"></a>5.6 mappers（映射器）</h2><ul>
<li>在核心配置文件中配置mapper配置文件所在路径</li>
<li>方式一：使用mapper文件绑定【推荐】</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方式二：使用class绑定</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用除方式一外的其他方式时的注意点：<ul>
<li>接口和他的Mapper配置文件必须同名</li>
<li>接口和他的Mapper配置文件必须在同一包下</li>
</ul>
</li>
</ul>
<h1 id="六、生命周期和作用域"><a href="#六、生命周期和作用域" class="headerlink" title="六、生命周期和作用域"></a>六、生命周期和作用域</h1><h2 id="6-1-SqlSessionFactoryBuilder"><a href="#6-1-SqlSessionFactoryBuilder" class="headerlink" title="6.1 SqlSessionFactoryBuilder"></a>6.1 SqlSessionFactoryBuilder</h2><ul>
<li>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了</li>
</ul>
<h2 id="6-2-SqlSessionFactory"><a href="#6-2-SqlSessionFactory" class="headerlink" title="6.2 SqlSessionFactory"></a>6.2 SqlSessionFactory</h2><ul>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例</li>
<li>类似数据库连接池</li>
</ul>
<h2 id="6-3-SqlSession"><a href="#6-3-SqlSession" class="headerlink" title="6.3 SqlSession"></a>6.3 SqlSession</h2><ul>
<li>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</li>
<li>连接到连接池的一个请求</li>
<li>绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中</li>
<li>每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  <span class="comment">// 你的应用逻辑代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="6-4-获取映射实例"><a href="#6-4-获取映射实例" class="headerlink" title="6.4 获取映射实例"></a>6.4 获取映射实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  <span class="comment">// 你的应用逻辑代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2022/03/14/Mybatis%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/life.png" class="" title="life">
<h1 id="七、ResultMap结果集映射"><a href="#七、ResultMap结果集映射" class="headerlink" title="七、ResultMap结果集映射"></a>七、ResultMap结果集映射</h1><h2 id="7-1-简介"><a href="#7-1-简介" class="headerlink" title="7.1 简介"></a>7.1 简介</h2><ul>
<li>解决实体类属性名和数据库表字段名不一致的问题</li>
</ul>
<h2 id="7-2-结果映射"><a href="#7-2-结果映射" class="headerlink" title="7.2 结果映射"></a>7.2 结果映射</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	结果映射标签</span></span><br><span class="line"><span class="comment">	property对应了实体类属性，column对应表字段</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;hashed_password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这里的返回类型使用resultMap标注，值为resultMap标签的id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userResultMap&quot;</span>&gt;</span></span><br><span class="line">  select user_id, user_name, hashed_password</span><br><span class="line">  from some_table</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="八、日志"><a href="#八、日志" class="headerlink" title="八、日志"></a>八、日志</h1><h2 id="8-1-日志工厂"><a href="#8-1-日志工厂" class="headerlink" title="8.1 日志工厂"></a>8.1 日志工厂</h2><ul>
<li>如果一个数据库操作出现了异常，我们最好是能看到操作的sql语句是啥，方便我们排错</li>
<li>因此针对以上问题，我们可以使用日志的形式输出我们数据库操作的sql语句</li>
<li>Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：<ul>
<li>SLF4J</li>
<li>LOG4J【掌握】</li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>STDOUT_LOGGING【掌握】</li>
<li>NO_LOGGING</li>
</ul>
</li>
</ul>
<h2 id="8-2-日志配置"><a href="#8-2-日志配置" class="headerlink" title="8.2 日志配置"></a>8.2 日志配置</h2><ul>
<li>需要在核心配置文件中进行配置</li>
<li>配置完后直接运行即可，就可以在控制台输出日志信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-3-Log4j"><a href="#8-3-Log4j" class="headerlink" title="8.3 Log4j"></a>8.3 Log4j</h2><h3 id="8-3-1-核心配置"><a href="#8-3-1-核心配置" class="headerlink" title="8.3.1 核心配置"></a>8.3.1 核心配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="8-3-2-导入Log4j"><a href="#8-3-2-导入Log4j" class="headerlink" title="8.3.2 导入Log4j"></a>8.3.2 导入Log4j</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="8-3-3-log4j配置文件"><a href="#8-3-3-log4j配置文件" class="headerlink" title="8.3.3 log4j配置文件"></a>8.3.3 log4j配置文件</h3><ul>
<li>在resources下创建log4j.properties配置文件</li>
<li>这里面可以配置许多日志的输出格式</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 设置###</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug,stdout,D,E</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出信息到控制抬 ###</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出DEBUG 级别以上的日志到=E://logs/error.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.D.File</span> = <span class="string">E://logs/log.log</span></span><br><span class="line"><span class="meta">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.D.Threshold</span> = <span class="string">DEBUG </span></span><br><span class="line"><span class="meta">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出ERROR 级别以上的日志到=E://logs/error.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.E</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.E.File</span> =<span class="string">E://logs/error.log </span></span><br><span class="line"><span class="meta">log4j.appender.E.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.E.Threshold</span> = <span class="string">ERROR </span></span><br><span class="line"><span class="meta">log4j.appender.E.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.E.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure>
<h3 id="8-3-4-Log4j的使用"><a href="#8-3-4-Log4j的使用" class="headerlink" title="8.3.4 Log4j的使用"></a>8.3.4 Log4j的使用</h3><ul>
<li><p>直接运行就可以在控制台输出日志</p>
</li>
<li><p>也可以编写语句</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 生成logger对象</span></span><br><span class="line">    <span class="keyword">static</span> Logger logger = Logger.getLogger(String.valueOf(UserDaoTest.class));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;info：进入了testLog4j&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="九、分页实现"><a href="#九、分页实现" class="headerlink" title="九、分页实现"></a>九、分页实现</h1><h2 id="9-1-Limit分页"><a href="#9-1-Limit分页" class="headerlink" title="9.1 Limit分页"></a>9.1 Limit分页</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT startIndex,pageSize;</span><br></pre></td></tr></table></figure>
<h2 id="9-2-Mybatis分页"><a href="#9-2-Mybatis分页" class="headerlink" title="9.2 Mybatis分页"></a>9.2 Mybatis分页</h2><h3 id="9-2-1-定义接口方法"><a href="#9-2-1-定义接口方法" class="headerlink" title="9.2.1 定义接口方法"></a>9.2.1 定义接口方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="9-2-1-mapper配置文件"><a href="#9-2-1-mapper配置文件" class="headerlink" title="9.2.1 mapper配置文件"></a>9.2.1 mapper配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="9-2-3-测试"><a href="#9-2-3-测试" class="headerlink" title="9.2.3 测试"></a>9.2.3 测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userMapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十、注解开发"><a href="#十、注解开发" class="headerlink" title="十、注解开发"></a>十、注解开发</h1><ul>
<li>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心</li>
<li>本质：反射机制</li>
<li>底层：动态代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="十一、Mybatis执行流程"><a href="#十一、Mybatis执行流程" class="headerlink" title="十一、Mybatis执行流程"></a>十一、Mybatis执行流程</h1><h1 id="十二、Lombok"><a href="#十二、Lombok" class="headerlink" title="十二、Lombok"></a>十二、Lombok</h1><h1 id="十三、复杂查询处理"><a href="#十三、复杂查询处理" class="headerlink" title="十三、复杂查询处理"></a>十三、复杂查询处理</h1><h2 id="13-1-数据库环境"><a href="#13-1-数据库环境" class="headerlink" title="13.1 数据库环境"></a>13.1 数据库环境</h2><ul>
<li>学生表：id、name、tid（外键）</li>
<li>教师表：id、name</li>
<li>一个教师教多个学生：一对多</li>
<li>多个学习选同一个老师：多对一</li>
<li>学生类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>教师类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="13-1-多对一处理"><a href="#13-1-多对一处理" class="headerlink" title="13.1 多对一处理"></a>13.1 多对一处理</h2><h3 id="13-1-1-方式一：查询嵌套"><a href="#13-1-1-方式一：查询嵌套" class="headerlink" title="13.1.1 方式一：查询嵌套"></a>13.1.1 方式一：查询嵌套</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定命名空间,绑定自己的dao层接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from student;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.kuang.pojo.Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;tid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="13-1-2-方式二：结果嵌套"><a href="#13-1-2-方式二：结果嵌套" class="headerlink" title="13.1.2 方式二：结果嵌套"></a>13.1.2 方式二：结果嵌套</h3><ul>
<li>连表查询，不想方式二分成两个查询语句</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid,s.name sname,t.name tname</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这里的column应该是上面select语句定义的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.kuang.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="13-1-3-结果"><a href="#13-1-3-结果" class="headerlink" title="13.1.3 结果"></a>13.1.3 结果</h3><ul>
<li>以上两种方式的结果输出相同</li>
</ul>
<img src="/2022/03/14/Mybatis%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/student.png" class="" title="stu">
<h2 id="13-2-一对多处理"><a href="#13-2-一对多处理" class="headerlink" title="13.2 一对多处理"></a>13.2 一对多处理</h2><h3 id="13-2-1-方式一：查询嵌套"><a href="#13-2-1-方式一：查询嵌套" class="headerlink" title="13.2.1 方式一：查询嵌套"></a>13.2.1 方式一：查询嵌套</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id and t.id = #&#123;tid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="13-2-2-方式二：结果嵌套"><a href="#13-2-2-方式二：结果嵌套" class="headerlink" title="13.2.2 方式二：结果嵌套"></a>13.2.2 方式二：结果嵌套</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;tid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.kuang.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudents&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kuang.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student where tid = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="13-2-3-结果"><a href="#13-2-3-结果" class="headerlink" title="13.2.3 结果"></a>13.2.3 结果</h3><ul>
<li>以上两种方式结果相同</li>
</ul>
<img src="/2022/03/14/Mybatis%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/teacher.png" class="" title="tea">
<h2 id="13-3-小结"><a href="#13-3-小结" class="headerlink" title="13.3 小结"></a>13.3 小结</h2><ul>
<li>多对一：association（关联）</li>
<li>一对多：collection（集合），和上面都是在returnMap结果映射中使用</li>
<li>javaType：指定实体类中属性的类型</li>
<li>ofType：指定映射到List或集合中的pojo类型，泛型中约束的类型（一般在collection中会使用到）</li>
<li>在没有为pojo类起别名时，returnType直接使用类名会报错ClassNotFound，此时必须包的全类名</li>
<li>colume属性对应的是select语句指定的导出表的列名，如果有列的别名，就写别名</li>
<li>以上两种方式都可实现效果，视情况而定实现方式</li>
</ul>
<h1 id="十四、动态Sql"><a href="#十四、动态Sql" class="headerlink" title="十四、动态Sql"></a>十四、动态Sql</h1><h2 id="14-1-简介"><a href="#14-1-简介" class="headerlink" title="14.1 简介"></a>14.1 简介</h2><ul>
<li>对sql语句添加条件判断，根据条件判断生成不同的sql语句</li>
</ul>
<h2 id="14-2-动态sql标签"><a href="#14-2-动态sql标签" class="headerlink" title="14.2 动态sql标签"></a>14.2 动态sql标签</h2><ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
<li>sql</li>
</ul>
<h2 id="14-3-if"><a href="#14-3-if" class="headerlink" title="14.3 if"></a>14.3 if</h2><ul>
<li>if表示如果查询的map中存在这个字段，就拼接if中的语句，否则不进行拼接</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogWithTitleLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>这种语句会存在一种缺陷，它只是机械的语句拼接</p>
</li>
<li><p>下面这种情况就可能拼接出：SELECT <em> FROM BLOG WHERE AND title like #{title}或者SELECT </em> FROM BLOG WHERE</p>
<ul>
<li>这就造成了sql语句的语法错误，无法完成查询，需要用到下面的where标签</li>
<li>where标签可以自动的去除一些字段，比如多余的AND或者符号“，”</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="14-4-choose"><a href="#14-4-choose" class="headerlink" title="14.4 choose"></a>14.4 choose</h2><ul>
<li>choose类似于java中的switch，选择语句，满足其中一条则拼接对应的语句</li>
<li>如果都不满足则拼接otherwise中的语句</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="14-5-trim（where、set）"><a href="#14-5-trim（where、set）" class="headerlink" title="14.5 trim（where、set）"></a>14.5 trim（where、set）</h2><h3 id="14-5-1-where"><a href="#14-5-1-where" class="headerlink" title="14.5.1 where"></a>14.5.1 where</h3><ul>
<li>将所有匹配条件放入到where标签中</li>
<li>解决了if标签的机械的语句拼接问题</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="14-5-2-set"><a href="#14-5-2-set" class="headerlink" title="14.5.2 set"></a>14.5.2 set</h3><ul>
<li>完成update的操作标签</li>
<li>也是用if进行条件判断拼接sql语句</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="14-5-3-trim"><a href="#14-5-3-trim" class="headerlink" title="14.5.3 trim"></a>14.5.3 trim</h2><ul>
<li>trim可以完成一些自定义的操作</li>
<li>比如自定where和set标签，意思就是trim可以替换where和set标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="14-6-foreach"><a href="#14-6-foreach" class="headerlink" title="14.6 foreach"></a>14.6 foreach</h2><ul>
<li>这里是从POST表中查询需要的多条数据</li>
<li>这里的collection指定的是我们传入的列表，这里返回的就是列表中指定的id对应的数据</li>
<li>加入说list中的id列表为(1,2,3)，那么就将满足这些id的数据全部获取到：(id=1,name=…)、(id=2,name=…)、(id=3,name=…)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">open</span>=<span class="string">&quot;ID in (&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">nullable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">          #&#123;item&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="14-7-sql"><a href="#14-7-sql" class="headerlink" title="14.7 sql"></a>14.7 sql</h2><ul>
<li>用于封装动态sql语句</li>
<li>使用include标签引入外部sql标签的id</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">        state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="十五、缓存"><a href="#十五、缓存" class="headerlink" title="十五、缓存"></a>十五、缓存</h1><h2 id="15-1-缓存介绍"><a href="#15-1-缓存介绍" class="headerlink" title="15.1 缓存介绍"></a>15.1 缓存介绍</h2><ul>
<li>多次重复查询会消耗服务器连接数据库的资源</li>
<li>缓存：存放一次查询的结果，下次查询就不用查数据库了</li>
<li>使用缓存的情况：经常查询且不经常改变的数据</li>
</ul>
<h2 id="15-2-一级缓存"><a href="#15-2-一级缓存" class="headerlink" title="15.2 一级缓存"></a>15.2 一级缓存</h2><h3 id="15-2-1-简介"><a href="#15-2-1-简介" class="headerlink" title="15.2.1 简介"></a>15.2.1 简介</h3><ul>
<li>一级缓存是默认开启的</li>
<li>只在一次SqlSession中有效，也就是SqlSession打开到关闭之间，进行查询就会存在缓存，下次查询相同数据就不会再执行一次sql语句，直接从缓存中抽取数据</li>
</ul>
<h3 id="15-2-2-缓存失效的情况"><a href="#15-2-2-缓存失效的情况" class="headerlink" title="15.2.2 缓存失效的情况"></a>15.2.2 缓存失效的情况</h3><ul>
<li>查询不同的内容</li>
<li>增删改操作会改变原来的数据，所以必定会刷新缓存</li>
<li>查询不同的Mapper.xml</li>
<li>手动清理缓存</li>
</ul>
<h2 id="15-3-二级缓存"><a href="#15-3-二级缓存" class="headerlink" title="15.3 二级缓存"></a>15.3 二级缓存</h2><h3 id="15-3-1-简介"><a href="#15-3-1-简介" class="headerlink" title="15.3.1 简介"></a>15.3.1 简介</h3><ul>
<li>二级缓存也叫全局缓存，这是由于一级缓存的作用域太低，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间对应一个二级缓存</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没有了，现在需要的是，会话关闭时，一级缓存的数据可以保存到二级缓存中</li>
<li>新的会话查询，就可以从二级缓存中获取内容</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中</li>
</ul>
</li>
</ul>
<h3 id="15-3-2-开启二级缓存"><a href="#15-3-2-开启二级缓存" class="headerlink" title="15.3.2 开启二级缓存"></a>15.3.2 开启二级缓存</h3><ul>
<li>在核心配置文件添加以下标签，开启全局缓存</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--显示开启全局缓存，默认是开启的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置完后还需要再需要使用二级缓存的Mapper配置文件下添加cache标签<ul>
<li>eviction为缓存策略</li>
<li>flushInterval为缓存刷新时间</li>
<li>size为最大数引用数</li>
<li>readOnly为是否只读</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在当前mapper下开启二级缓存--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">      <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--也可以直接使用cache标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    	...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用cache标签，不添加缓存策略时，需要将实体类实现序列化，如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="15-3-3-小结"><a href="#15-3-3-小结" class="headerlink" title="15.3.3 小结"></a>15.3.3 小结</h3><ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中<ul>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中</li>
</ul>
</li>
</ul>
<h2 id="15-4-缓存原理"><a href="#15-4-缓存原理" class="headerlink" title="15.4 缓存原理"></a>15.4 缓存原理</h2><ul>
<li>每个SqlSession从开启到关闭都会启动一个一级缓存</li>
<li>SqlSession关闭后一级缓存会升级为二级缓存</li>
<li>用户进行查询时会先看二级缓存是否存在查询的内容，再去一级缓存，缓存中没有要查找的对象时，就执行查询数据库的操作</li>
</ul>
<img src="/2022/03/14/Mybatis%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/cache.png" class="" title="cache">
<h2 id="15-5-自定义缓存"><a href="#15-5-自定义缓存" class="headerlink" title="15.5 自定义缓存"></a>15.5 自定义缓存</h2><h3 id="15-5-1-ehcache"><a href="#15-5-1-ehcache" class="headerlink" title="15.5.1 ehcache"></a>15.5.1 ehcache</h3><ul>
<li>EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。</li>
</ul>
<h3 id="15-5-2-引入依赖"><a href="#15-5-2-引入依赖" class="headerlink" title="15.5.2 引入依赖"></a>15.5.2 引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="15-5-3-cache配置"><a href="#15-5-3-cache配置" class="headerlink" title="15.5.3 cache配置"></a>15.5.3 cache配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="15-5-4-ehcache配置文件"><a href="#15-5-4-ehcache配置文件" class="headerlink" title="15.5.4 ehcache配置文件"></a>15.5.4 ehcache配置文件</h3><h1 id="十六、多表查询"><a href="#十六、多表查询" class="headerlink" title="十六、多表查询"></a>十六、多表查询</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql基础大全</title>
    <url>/2022/03/10/Mysql%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、MySql的语法规范"><a href="#一、MySql的语法规范" class="headerlink" title="一、MySql的语法规范"></a>一、MySql的语法规范</h1><ul>
<li>不区分大小写，但建议关键字大写，表名、列名小写</li>
<li>每条命令最好用分号结尾</li>
</ul>
<h1 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a>二、注释</h1><ul>
<li>#注释文字（单行注释）</li>
<li>— 注释文字（单行注释）</li>
<li>/* 注释文字 */（多行注释）</li>
</ul>
<h1 id="三、查询"><a href="#三、查询" class="headerlink" title="三、查询"></a>三、查询</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 分组查询推荐尽可能使用分组前筛选，即在<span class="keyword">group</span> <span class="keyword">by</span>前使用<span class="keyword">where</span></span><br><span class="line"><span class="keyword">SELECT</span> [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> [表名,...]</span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">    <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-连接查询"><a href="#3-1-连接查询" class="headerlink" title="3.1 连接查询"></a>3.1 连接查询</h2><h3 id="3-1-1-内连接"><a href="#3-1-1-内连接" class="headerlink" title="3.1.1 内连接"></a>3.1.1 内连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    这属于sql99语法，作用等同于不加inner join时的查询</span></span><br><span class="line"><span class="comment">    不加inner join属于隐式连接，用inner join时，inner可以省略</span></span><br><span class="line"><span class="comment">    等值连接在WHERE子句中判断中写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span>  [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">     <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-2-外连接"><a href="#3-1-2-外连接" class="headerlink" title="3.1.2 外连接"></a>3.1.2 外连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span></span><br><span class="line"><span class="keyword">left</span><span class="operator">/</span><span class="keyword">right</span><span class="operator">/</span><span class="keyword">full</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">    <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-3-内连接与外连接的区别"><a href="#3-1-3-内连接与外连接的区别" class="headerlink" title="3.1.3 内连接与外连接的区别"></a>3.1.3 内连接与外连接的区别</h3><p>内连接：内连接匹配的是两个表符合连接条件的交集，不存在匹配的内容为NULL的情况</p>
<p>外连接：外连接分为左外连接与右外连接，左连接表示左表中记录全部查询出来，右表只显示符合条件的数据，没有匹配到右表的数据，则右表数据显示为NULL；右连接则反之。以以下示例做下说明：</p>
<ul>
<li>以下是a表</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>a_id</th>
<th>a_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>路飞</td>
</tr>
<tr>
<td>2</td>
<td>索隆</td>
</tr>
<tr>
<td>3</td>
<td>香吉士</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>以下是b表</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>b_id</th>
<th>b_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>索隆</td>
</tr>
<tr>
<td>3</td>
<td>香吉士</td>
</tr>
<tr>
<td>4</td>
<td>乔巴</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>内连接语句：select * from a a inner join a a on a.a_id = b.b_id</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>a_id</th>
<th>a_name</th>
<th>b_id</th>
<th>b_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>索隆</td>
<td>2</td>
<td>索隆</td>
</tr>
<tr>
<td>3</td>
<td>香吉士</td>
<td>3</td>
<td>香吉士</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>左外连接语句：select * from A A left outer join B B on a.a_id = b.b_id</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>a_id</th>
<th>a_name</th>
<th>b_id</th>
<th>b_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>路飞</td>
<td>NULL</td>
<td>NULL</td>
</tr>
<tr>
<td>2</td>
<td>索隆</td>
<td>2</td>
<td>索隆</td>
</tr>
<tr>
<td>3</td>
<td>香吉士</td>
<td>3</td>
<td>香吉士</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-1-4-交叉连接（笛卡尔积）"><a href="#3-1-4-交叉连接（笛卡尔积）" class="headerlink" title="3.1.4 交叉连接（笛卡尔积）"></a>3.1.4 交叉连接（笛卡尔积）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span></span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">    <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-5-子查询"><a href="#3-1-5-子查询" class="headerlink" title="3.1.5 子查询"></a>3.1.5 子查询</h3><h3 id="3-1-6-分页查询"><a href="#3-1-6-分页查询" class="headerlink" title="3.1.6 分页查询"></a>3.1.6 分页查询</h3><ul>
<li>offset要显示条目的起始索引（起始索引从0开始）</li>
<li>size要显示的条目个数</li>
<li>网页的分页显示数据需要对数据库进行分页查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span></span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">    <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="keyword">offset</span>,size;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-7-联合查询"><a href="#3-1-7-联合查询" class="headerlink" title="3.1.7 联合查询"></a>3.1.7 联合查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    适用于要查询的结果来自多个表，且多个表没有直接的连接关系，但查询的信息一致时可以使用联合查询，类似于数学的并集</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">查询语句<span class="number">1</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">查询语句<span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> id,cname,csex <span class="keyword">FROM</span> t_ca</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> t_id,tName,tGender <span class="keyword">FROM</span> <span class="keyword">WHERE</span> tGender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 加<span class="keyword">ALL</span>表示会包含重复的内容</span><br><span class="line"><span class="keyword">SELECT</span> id,cname,csex <span class="keyword">FROM</span> t_ca</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> t_id,tName,tGender <span class="keyword">FROM</span> <span class="keyword">WHERE</span> tGender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h2><h3 id="3-2-1-查询前五条员工信息"><a href="#3-2-1-查询前五条员工信息" class="headerlink" title="3.2.1 查询前五条员工信息"></a>3.2.1 查询前五条员工信息</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">0</span>,<span class="number">5</span>;  </span><br><span class="line">#或者</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-分页查询规律"><a href="#3-2-2-分页查询规律" class="headerlink" title="3.2.2 分页查询规律"></a>3.2.2 分页查询规律</h3><ul>
<li>page表示第几页，(page-1)*size表示每一页的起始查询位置</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line">LIMIT (page<span class="number">-1</span>)<span class="operator">*</span>size,size;</span><br></pre></td></tr></table></figure>
<h1 id="四、增删改"><a href="#四、增删改" class="headerlink" title="四、增删改"></a>四、增删改</h1><h2 id="4-1-插入数据"><a href="#4-1-插入数据" class="headerlink" title="4.1 插入数据"></a>4.1 插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(元组值);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名序列) <span class="keyword">VALUES</span>(元组值);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名序列) <span class="keyword">VALUES</span>(元组值),(元组值),...;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">SET</span> 列名<span class="operator">=</span>值,列名<span class="operator">=</span>值,...    #用的少</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名序列) <span class="keyword">SELECT</span> 查询语句;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名序列) <span class="keyword">TABLE</span> 表名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-删除数据"><a href="#4-2-删除数据" class="headerlink" title="4.2 删除数据"></a>4.2 删除数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件表达式</span><br></pre></td></tr></table></figure>
<h2 id="4-3-修改数据"><a href="#4-3-修改数据" class="headerlink" title="4.3 修改数据"></a>4.3 修改数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 <span class="keyword">SET</span> 列名<span class="operator">=</span>值表达式,列名<span class="operator">=</span>值表达式,... <span class="keyword">WHERE</span> 条件表达式</span><br><span class="line">UPDATE 表名 <span class="keyword">SET</span> <span class="type">ROW</span><span class="operator">=</span>元组 <span class="keyword">WHERE</span> 条件表达式</span><br></pre></td></tr></table></figure>
<h1 id="五、视图"><a href="#五、视图" class="headerlink" title="五、视图"></a>五、视图</h1><h2 id="5-1-视图的创建"><a href="#5-1-视图的创建" class="headerlink" title="5.1 视图的创建"></a>5.1 视图的创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名(列名序列) <span class="keyword">AS</span> <span class="keyword">SELECT</span>查询语句</span><br></pre></td></tr></table></figure>
<h2 id="5-2-视图的撤销"><a href="#5-2-视图的撤销" class="headerlink" title="5.2 视图的撤销"></a>5.2 视图的撤销</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名</span><br></pre></td></tr></table></figure>
<h1 id="六、Mysql数据类型"><a href="#六、Mysql数据类型" class="headerlink" title="六、Mysql数据类型"></a>六、Mysql数据类型</h1><h2 id="6-1-数值型"><a href="#6-1-数值型" class="headerlink" title="6.1 数值型"></a>6.1 数值型</h2><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围（有符号）</th>
<th>范围（无符号）</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1 byte</td>
<td>(-128，127)</td>
<td>(0，255)</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2 bytes</td>
<td>(-32 768，32 767)</td>
<td>(0，65 535)</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3 bytes</td>
<td>(-8 388 608，8 388 607)</td>
<td>(0，16 777 215)</td>
</tr>
<tr>
<td>INT或INTEGER</td>
<td>4 bytes</td>
<td>(-2 147 483 648，2 147 483 647)</td>
<td>(0，4 294 967 295)</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8 bytes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>FLOAT</td>
<td>4 bytes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8 bytes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DECIMAL</td>
<td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h2 id="6-2-日期型"><a href="#6-2-日期型" class="headerlink" title="6.2 日期型"></a>6.2 日期型</h2><h2 id="6-3-字符型"><a href="#6-3-字符型" class="headerlink" title="6.3 字符型"></a>6.3 字符型</h2>]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2基础大全一</title>
    <url>/2022/02/23/Vue2%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h1><h2 id="1-1-Hello案例"><a href="#1-1-Hello案例" class="headerlink" title="1.1 Hello案例"></a>1.1 Hello案例</h2><h2 id="1-2-数据绑定"><a href="#1-2-数据绑定" class="headerlink" title="1.2 数据绑定"></a>1.2 数据绑定</h2><ul>
<li>v-bind：单向绑定，数据只能从data流向页面</li>
<li>v-model：双向绑定，数据不仅能从data流向页面，还可以从页面流向data</li>
<li>单向绑定和双向绑定的区别：<ul>
<li>v-model一般应用再表单类元素上</li>
<li>v-model:value可以简写为v-model，因为v-model默认收集的就是value值</li>
</ul>
</li>
</ul>
<img src="/2022/02/23/Vue2%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/data.png" class="" title="data">
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 花括号里为表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    单向绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    双向绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.config.productionTip = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//根据标签id进行绑定</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-MVVM模型"><a href="#1-3-MVVM模型" class="headerlink" title="1.3 MVVM模型"></a>1.3 MVVM模型</h2><ul>
<li>M：模型，对应data中的数据</li>
<li>V：视图，页面模板</li>
<li>VM：视图模型，Vue实例，以后一般使用”vm“作为变量名接收Vue实例</li>
</ul>
<img src="/2022/02/23/Vue2%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/mvvm.png" class="" title="mvvm">
<h2 id="1-4-数据代理"><a href="#1-4-数据代理" class="headerlink" title="1.4 数据代理"></a>1.4 数据代理</h2><h3 id="1-4-1-object-defineProperty"><a href="#1-4-1-object-defineProperty" class="headerlink" title="1.4.1 object.defineProperty"></a>1.4.1 object.defineProperty</h3><ul>
<li>动态为对象绑定属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态为person对象绑定属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">18</span>	<span class="comment">// 设置属性值</span></span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>, <span class="comment">// 控制属性是否可以枚举，默认为false</span></span><br><span class="line">    <span class="attr">writeable</span>:<span class="literal">true</span>,	<span class="comment">// 控制属性是否可以被修改，默认为false</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span>,	<span class="comment">// 控制属性是否可以被删除，默认为false</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当动态修改number值时，age便会发生改变</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 当动态修改age属性值时，number就发生改变</span></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="1-4-2-vue数据代理"><a href="#1-4-2-vue数据代理" class="headerlink" title="1.4.2 vue数据代理"></a>1.4.2 vue数据代理</h3><ul>
<li>Vue实例中的data对象中的属性就是使用到了object.defineProperty的getter和setter的操作</li>
<li>在控制台打印vue实例对象时，就可以看到代理的data数据</li>
</ul>
<img src="/2022/02/23/Vue2%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/vuedata.png" class="" title="vuedata">
<h2 id="1-5-事件处理"><a href="#1-5-事件处理" class="headerlink" title="1.5 事件处理"></a>1.5 事件处理</h2><h3 id="1-5-1-事件基本使用"><a href="#1-5-1-事件基本使用" class="headerlink" title="1.5.1 事件基本使用"></a>1.5.1 事件基本使用</h3><ul>
<li>使用v-on:xxx或@xxx绑定事件，其中xxx是事件名</li>
<li>事件的回调需要配置在methods对象中，最终会显示在vm上</li>
<li>methods中配置的函数，不需要箭头函数！否则this就不是vm了</li>
<li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象</li>
<li>@click=”demo”和@click=”demo($event)”效果一样，但后者可以自定义传参</li>
</ul>
<h3 id="1-5-2-事件修饰符"><a href="#1-5-2-事件修饰符" class="headerlink" title="1.5.2 事件修饰符"></a>1.5.2 事件修饰符</h3><p>Vue事件修饰符包括：</p>
<ol>
<li>prevent：阻止默认事件（常用）</li>
<li>stop：阻止事件冒泡</li>
<li>once：事件只触发一次，即下一次触发就没有效果了</li>
<li>capture：使用事件的捕获模式</li>
<li>self：只有event.target是当前操作的元素时才触发事件</li>
<li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li>
</ol>
<p>Vue的事件修饰符使用方式为：<code>@click.prevent=&quot;&quot;</code></p>
<p>示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">method</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-3-键盘事件"><a href="#1-5-3-键盘事件" class="headerlink" title="1.5.3 键盘事件"></a>1.5.3 键盘事件</h3><p>Vue中常用的键盘别名</p>
<ul>
<li>回车：enter</li>
<li>删除：delete（捕获“删除”和“退格”键）</li>
<li>空格：space</li>
<li>上：up</li>
<li>下：down</li>
<li>左：left</li>
<li>右：right</li>
</ul>
<p>键盘事件的捕获方式如下：</p>
<ul>
<li><p><code>@keyup.xxx</code>：键盘按下后弹起</p>
</li>
<li><p><code>@keydown.xxx</code>：键盘按下</p>
</li>
</ul>
<p>注意事项如下：</p>
<ul>
<li>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要将双驼峰命名转为xxx-xxx（短横线命名）</li>
<li>系统修饰键（用法特殊）：ctrl、alt、shift、meta<ul>
<li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发，如<code>@keyup.ctrl.y</code></li>
<li>配合keydown使用，正常触发事件</li>
</ul>
</li>
</ul>
<h2 id="1-6-计算属性"><a href="#1-6-计算属性" class="headerlink" title="1.6 计算属性"></a>1.6 计算属性</h2><p>计算属性是对vue属性进行计算操作后设定的属性，它有以下特点：</p>
<ul>
<li>计算属性和data中的属性不是一个概念，使用vm._data无法访问到计算属性</li>
<li>计算属性是对data属性计算后得到的属性</li>
<li>computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会从新计算 computed 的值；</li>
<li>不支持异步，当 Computed 中有异步操作时，无法监听数据的变化</li>
<li>如果一个属性是由其他属性计算而来的，这个属性依赖其他的属性，一般会使用computed</li>
<li>如果 computed 属性的属性值是函数，那么默认使用 get 方法，函数的返回值就是属性的属性值；在 computed 中，属性有一个 get 方法和一个 set 方法，当数据发生变化时，会调用 set 方法</li>
<li>computed中的函数必须用return返回</li>
<li>computed中不能对data中的属性进行赋值操作，如果对data中的属性进行赋值，data中的属性发生变化，从而触发computed中的函数，就会形成死循环。</li>
</ul>
<p>原始的计算属性写法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;zhang&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;san&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>简化后的写法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;zhang&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;san&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-7-监视属性"><a href="#1-7-监视属性" class="headerlink" title="1.7 监视属性"></a>1.7 监视属性</h2><p>监视属性具有以下特点</p>
<ul>
<li>更多的是「观察」的作用，用于监听data中的数据变化，只在被监听的属性值发生变化时执行；</li>
<li>watch不支持缓存，当一个属性发生变化时，它就会触发相应的操作；</li>
<li>watch支持异步监听</li>
<li>watch监听的函数接收两个参数，第一个参数是最新的值，第二个是变化之前的值</li>
<li>watch监听数据必须是 data 中声明的或者父组件传递过来的 props 中的数据，当发生变化时，会触发其他操作</li>
</ul>
<h3 id="1-7-1-计算属性与监视属性的区别"><a href="#1-7-1-计算属性与监视属性的区别" class="headerlink" title="1.7.1 计算属性与监视属性的区别"></a>1.7.1 计算属性与监视属性的区别</h3><p>computer是计算属性，且属性值具有缓存性。同时，computer还依赖于其他属性的计算值，当计算值发生变化时返回内容。当需要依赖于其他属性的计算值的变化来动态获取值的时候使用computer</p>
<p>watch只要监听到值发生变化就会执行回调，同时在回调过程中执行一些逻辑操作。当我们需要执行复杂的逻辑操作时，使用watch</p>
<h2 id="1-8-绑定样式"><a href="#1-8-绑定样式" class="headerlink" title="1.8 绑定样式"></a>1.8 绑定样式</h2>]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础大全</title>
    <url>/2022/02/22/js%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、JS基本操作"><a href="#一、JS基本操作" class="headerlink" title="一、JS基本操作"></a>一、JS基本操作</h1><h2 id="1-1-JS引入方式"><a href="#1-1-JS引入方式" class="headerlink" title="1.1 JS引入方式"></a>1.1 JS引入方式</h2><ul>
<li>第一种：内部标签<code>&lt;script&gt;&lt;/script&gt;</code></li>
<li>第二种：外部引入<code>&lt;script type=&quot;text/javascript&quot; src=&quot;./xxx.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
<h2 id="1-2-JS的6种数据类型"><a href="#1-2-JS的6种数据类型" class="headerlink" title="1.2 JS的6种数据类型"></a>1.2 JS的6种数据类型</h2><ul>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>object</li>
<li>function  函数</li>
</ul>
<h2 id="1-3-JS特殊值"><a href="#1-3-JS特殊值" class="headerlink" title="1.3 JS特殊值"></a>1.3 JS特殊值</h2><ul>
<li>Null      空值</li>
<li>Undefine  未定义</li>
<li>NAN       非数值</li>
</ul>
<h2 id="1-4-JS数组"><a href="#1-4-JS数组" class="headerlink" title="1.4 JS数组"></a>1.4 JS数组</h2><ul>
<li>var 数组名 = [1,’abc’]</li>
</ul>
<h2 id="1-5-JS循环"><a href="#1-5-JS循环" class="headerlink" title="1.5 JS循环"></a>1.5 JS循环</h2><h3 id="1-5-1-for"><a href="#1-5-1-for" class="headerlink" title="1.5.1 for"></a>1.5.1 for</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(语句<span class="number">1</span>;语句<span class="number">2</span>;语句<span class="number">3</span>)&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 对象名/数组名)&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5-2-while"><a href="#1-5-2-while" class="headerlink" title="1.5.2 while"></a>1.5.2 while</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;<span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure>
<h2 id="1-6-JS函数定义方式"><a href="#1-6-JS函数定义方式" class="headerlink" title="1.6 JS函数定义方式"></a>1.6 JS函数定义方式</h2><ul>
<li>第一种：function 函数名(形参列表){函数体}</li>
<li>第二种：var 函数名 = function(形参列表){函数体}</li>
<li>函数不允许重载</li>
<li>arguments：存放形参的数组，可以在函数体中直接调用，形参列表可以不写</li>
</ul>
<h2 id="1-7-JS对象的定义"><a href="#1-7-JS对象的定义" class="headerlink" title="1.7 JS对象的定义"></a>1.7 JS对象的定义</h2><h3 id="1-7-1-第一种"><a href="#1-7-1-第一种" class="headerlink" title="1.7.1 第一种"></a>1.7.1 第一种</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">变量名.属性名 = 值</span><br><span class="line">变量名.函数名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">this</span>关键字可以在函数体中使用</span><br></pre></td></tr></table></figure>
<h3 id="1-7-2-第二种"><a href="#1-7-2-第二种" class="headerlink" title="1.7.2 第二种"></a>1.7.2 第二种</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">    属性名:值,</span><br><span class="line">    属性名:值,</span><br><span class="line">    函数名:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-3-对象的访问"><a href="#1-7-3-对象的访问" class="headerlink" title="1.7.3 对象的访问"></a>1.7.3 对象的访问</h3><ul>
<li>对象名.属性名/函数名()</li>
</ul>
<h2 id="1-8-JS入口函数"><a href="#1-8-JS入口函数" class="headerlink" title="1.8 JS入口函数"></a>1.8 JS入口函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 开始编写JS代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-9-JS数组"><a href="#1-9-JS数组" class="headerlink" title="1.9 JS数组"></a>1.9 JS数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取不存在的索引，不会报错而会返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组长度，length表示最大的索引</span></span><br><span class="line"><span class="comment">//length可以修改，长了填充空值，短了截断</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="二、JS函数"><a href="#二、JS函数" class="headerlink" title="二、JS函数"></a>二、JS函数</h1><h2 id="2-1-函数的声明"><a href="#2-1-函数的声明" class="headerlink" title="2.1 函数的声明"></a>2.1 函数的声明</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参列表</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-函数对象"><a href="#2-2-函数对象" class="headerlink" title="2.2 函数对象"></a>2.2 函数对象</h2><ul>
<li>在JS中，函数名就代表了函数对象</li>
</ul>
<h2 id="2-3-匿名函数"><a href="#2-3-匿名函数" class="headerlink" title="2.3 匿名函数"></a>2.3 匿名函数</h2><h3 id="2-3-1-语法"><a href="#2-3-1-语法" class="headerlink" title="2.3.1 语法"></a>2.3.1 语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-立即执行函数"><a href="#2-4-立即执行函数" class="headerlink" title="2.4 立即执行函数"></a>2.4 立即执行函数</h2><h3 id="2-4-1-语法"><a href="#2-4-1-语法" class="headerlink" title="2.4.1 语法"></a>2.4.1 语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">形参列表</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;)(实参列表)</span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-特性"><a href="#2-4-2-特性" class="headerlink" title="2.4.2 特性"></a>2.4.2 特性</h3><ul>
<li>立即执行函数只执行一次</li>
</ul>
<h2 id="2-5-回调函数"><a href="#2-5-回调函数" class="headerlink" title="2.5 回调函数"></a>2.5 回调函数</h2><h3 id="2-5-1-概念"><a href="#2-5-1-概念" class="headerlink" title="2.5.1 概念"></a>2.5.1 概念</h3><ul>
<li>并非自己调用，而是由浏览器自动调用的函数</li>
<li>一般是作为函数的参数进行使用，可以通过匿名函数的写法进行传递，也可以直接传递函数名</li>
</ul>
<h3 id="2-5-2-语法"><a href="#2-5-2-语法" class="headerlink" title="2.5.2 语法"></a>2.5.2 语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">注意到click方法中是一个函数而不是一个变量</span><br><span class="line"><span class="comment">//它就是回调函数</span></span><br><span class="line">$(<span class="string">&quot;#btn_1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;Btn 1 Clicked&quot;</span>);</span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 它就是回调函数</span></span><br><span class="line">    alert(<span class="string">&quot;Btn 1 Clicked&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&quot;#btn_1&quot;</span>).click(click);  </span><br></pre></td></tr></table></figure>
<h1 id="三、JS对象"><a href="#三、JS对象" class="headerlink" title="三、JS对象"></a>三、JS对象</h1><h2 id="3-1-对象的分类"><a href="#3-1-对象的分类" class="headerlink" title="3.1 对象的分类"></a>3.1 对象的分类</h2><ul>
<li>内建对象</li>
<li>宿主对象</li>
<li>自定义对象</li>
</ul>
<h2 id="3-2-对象的定义"><a href="#3-2-对象的定义" class="headerlink" title="3.2 对象的定义"></a>3.2 对象的定义</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">变量名.属性名 = 值</span><br><span class="line">变量名.函数名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">this</span>关键字可以在函数体中使用</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">        属性名:值,</span><br><span class="line">        属性名:值,</span><br><span class="line">        函数名:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-this关键字"><a href="#3-3-this关键字" class="headerlink" title="3.3 this关键字"></a>3.3 this关键字</h2><ol>
<li>当以函数的形式调用时，this是window</li>
<li>当以方法的形式调用时，谁调用方法，this就是谁</li>
<li>当以构造函数的形式调用时，this就是新创建的那个对象</li>
</ol>
<h2 id="3-4-构造函数"><a href="#3-4-构造函数" class="headerlink" title="3.4 构造函数"></a>3.4 构造函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;    <span class="comment">//添加属性name</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>
<h3 id="3-4-1-执行流程"><a href="#3-4-1-执行流程" class="headerlink" title="3.4.1 执行流程"></a>3.4.1 执行流程</h3><ol>
<li>立刻创建一个新的对象</li>
<li>将新建的对象设置为函数中的this，在构造函数中可以使用this来引用新建的对象</li>
<li>执行函数中的代码</li>
<li>将新建的对象作为返回值返回</li>
</ol>
<h2 id="3-5-原型对象"><a href="#3-5-原型对象" class="headerlink" title="3.5 原型对象"></a>3.5 原型对象</h2><img src="/2022/02/22/js%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/prototype.png" class="" title="image">
<ul>
<li>JS中万物皆对象</li>
<li>每个对象都具有<strong>proto</strong>，用于指向其构造函数的原型，这也保证了实例能够访问在构造函数原型中定义的属性和方法</li>
<li>方法是一个特殊的对象（可以把方法的声明当作构造函数），它同时具有<strong>proto</strong>指针，以及属性prototype</li>
</ul>
<h1 id="四、Dom操作"><a href="#四、Dom操作" class="headerlink" title="四、Dom操作"></a>四、Dom操作</h1><h2 id="4-1-操作元素节点"><a href="#4-1-操作元素节点" class="headerlink" title="4.1 操作元素节点"></a>4.1 操作元素节点</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">getElementById()</td>
<td style="text-align:center">通过id属性获取一个元素节点对象</td>
</tr>
<tr>
<td style="text-align:center">getElementsByTagName()</td>
<td style="text-align:center">通过标签名获取一组元素节点对象</td>
</tr>
<tr>
<td style="text-align:center">getElementsByName()</td>
<td style="text-align:center">通过name属性获取一组元素节点对象</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>获取到元素对象/对象数组后，这些对象包含以下属性<ul>
<li>对象名.innerHtml</li>
<li>对象名.id</li>
<li>对象名.name</li>
<li>对象名.value</li>
<li>对象名.className</li>
<li>对象名.时间名=function(){}</li>
</ul>
</li>
</ul>
<h1 id="五、JS事件"><a href="#五、JS事件" class="headerlink" title="五、JS事件"></a>五、JS事件</h1><h2 id="5-1-事件的概念"><a href="#5-1-事件的概念" class="headerlink" title="5.1 事件的概念"></a>5.1 事件的概念</h2><ul>
<li>电脑输入设备与页面进行交互的响应</li>
</ul>
<h2 id="5-2-常用的事件"><a href="#5-2-常用的事件" class="headerlink" title="5.2 常用的事件"></a>5.2 常用的事件</h2><ul>
<li>onload：加载完成事件，页面加载完成之后，常用于做页面js代码初始化操作</li>
<li>onclick：单击事件，常用于按钮点击的响应操作</li>
<li>onblur：失去焦点事件，常用于输入框失去焦点后验证其输入内容是否合法</li>
<li>onchange：内容发生改变事件，常用于下拉列表和输入框内容发生改变后操作</li>
<li>onsubmit：表单提交事件，常用于表单提交前，验证所有表单是否合法</li>
</ul>
<h2 id="5-3-事件的注册"><a href="#5-3-事件的注册" class="headerlink" title="5.3 事件的注册"></a>5.3 事件的注册</h2><h3 id="5-3-1-静态注册"><a href="#5-3-1-静态注册" class="headerlink" title="5.3.1 静态注册"></a>5.3.1 静态注册</h3><ul>
<li>通过html标签的事件属性直接赋予事件响应后的代码</li>
</ul>
<h3 id="5-3-2-动态注册"><a href="#5-3-2-动态注册" class="headerlink" title="5.3.2 动态注册"></a>5.3.2 动态注册</h3><ul>
<li>是指先通过js代码得到标签的dom对象，然后再通过：dom对象.事件名=function(){}这种形式赋予事件响应后的代码</li>
</ul>
<h3 id="5-3-3-步骤"><a href="#5-3-3-步骤" class="headerlink" title="5.3.3 步骤"></a>5.3.3 步骤</h3><ol>
<li>获取标签对象</li>
<li>标签对象.事件名=function(){}</li>
</ol>
<h2 id="5-4-事件对象event"><a href="#5-4-事件对象event" class="headerlink" title="5.4 事件对象event"></a>5.4 事件对象event</h2><ul>
<li>在给元素绑定事件时，写上函数参数event</li>
<li>使用此event可以在触发事件时达到某些效果</li>
<li>为兼容IE8，函数体中可以写上此语句：event = event||window.event;</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">box1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;     <span class="comment">//参数名一般写做event或e</span></span><br><span class="line">    <span class="keyword">if</span>(event.target.className == <span class="string">&quot;link&quot;</span>)&#123;   <span class="comment">//判断子元素中是否有a链接元素</span></span><br><span class="line">        alert(<span class="string">&quot;我是box1的单击事件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-5-事件的冒泡"><a href="#5-5-事件的冒泡" class="headerlink" title="5.5 事件的冒泡"></a>5.5 事件的冒泡</h2><ul>
<li>给覆盖在父元素上的子元素都绑定上事件，点击子元素时，会先触发子元素的事件，然后再触发父元素的事件</li>
<li>event.cancelBubble = true;可以用来取消父元素的冒泡</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">box1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//回调函数，无需自己调用</span></span><br><span class="line">    alert(<span class="string">&quot;我是div的单击响应函数&quot;</span>);</span><br><span class="line">    event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-6-事件的委派"><a href="#5-6-事件的委派" class="headerlink" title="5.6 事件的委派"></a>5.6 事件的委派</h2><ul>
<li>给各子元素共同的祖先元素绑定事件，这样后代元素上的事件触发时，则会统一触发祖先绑定的事件</li>
<li>这样做无需一个个给子元素单独绑定事件，比较方便</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsById(<span class="string">&quot;ul&quot;</span>);</span></span><br><span class="line"><span class="javascript">    ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;我是ul的单击事件&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>乐理基础大全</title>
    <url>/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、音的概念"><a href="#一、音的概念" class="headerlink" title="一、音的概念"></a>一、音的概念</h1><h2 id="1-1-音名-唱名"><a href="#1-1-音名-唱名" class="headerlink" title="1.1 音名/唱名"></a>1.1 音名/唱名</h2><ul>
<li>音名是对音的一种标记，而唱名则是我们平时哼出来的do/re/mi/fa/sol/la/ti</li>
<li>音名像是对音的一种抽象，而唱名则是具体的对音的表现，也就是说任何一个音名都可以表示为1，然后一次推导出其他音名，当然我这里说的是自然大调的情况，后面在做详细解释</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>音名</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody>
<tr>
<td>唱名</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-2-十二平均律"><a href="#1-2-十二平均律" class="headerlink" title="1.2 十二平均律"></a>1.2 十二平均律</h2><ul>
<li>按照乐理从古至今的发展，人们发现了<strong>十二平均律</strong>这样一套声音的规律</li>
<li>在物理学中，声音是由振动产生的，而物体不同震动的频率会给人不同的听觉效果，国际上规定440HZ作为<strong>标准音</strong>，即钢琴上的第49号键（A键）的震动频率</li>
<li>根据振动给人听感上的不同，人们以<strong>每隔半音</strong>（规定的频率大小）的形式来规定音与音的距离关系（音程），因此就有了十二平均律的概念</li>
<li>比如对于1、2、3、4、5、6、7、1来说，它们就满足<strong>“全全半全全全半”</strong>的音程关系</li>
</ul>
<h2 id="1-3-音程-音数"><a href="#1-3-音程-音数" class="headerlink" title="1.3 音程/音数"></a>1.3 音程/音数</h2><ul>
<li>音程：表示音与音之间的距离，主要说的还是<strong>振动频率</strong>的关系</li>
<li>音数：衡量音程的一种<strong>单位</strong>，记录音与音之间的半音数</li>
<li>具体的音程与音数关系有以下几种：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">音程</th>
<th style="text-align:center">音数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">纯一度</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">小二度</td>
<td style="text-align:center">$\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">大二度</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">小三度</td>
<td style="text-align:center">$1\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">大三度</td>
<td style="text-align:center">$2$</td>
</tr>
<tr>
<td style="text-align:center">纯四度</td>
<td style="text-align:center">$2\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">增四度</td>
<td style="text-align:center">$3$</td>
</tr>
<tr>
<td style="text-align:center">纯五度</td>
<td style="text-align:center">$3\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">减五度</td>
<td style="text-align:center">$3$</td>
</tr>
<tr>
<td style="text-align:center">小六度</td>
<td style="text-align:center">$4$</td>
</tr>
<tr>
<td style="text-align:center">大六度</td>
<td style="text-align:center">$4 \tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">小七度</td>
<td style="text-align:center">$5$</td>
</tr>
<tr>
<td style="text-align:center">大七度</td>
<td style="text-align:center">$5\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">纯八度</td>
<td style="text-align:center">$6$</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>以C大调为例，各音阶度数关系如下：</li>
</ul>
<img src="/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/dushu.png" class="" title="dushu">
<h1 id="二、调式"><a href="#二、调式" class="headerlink" title="二、调式"></a>二、调式</h1><h2 id="2-1-大调式"><a href="#2-1-大调式" class="headerlink" title="2.1 大调式"></a>2.1 大调式</h2><h3 id="2-1-1-自然大调"><a href="#2-1-1-自然大调" class="headerlink" title="2.1.1 自然大调"></a>2.1.1 自然大调</h3><ul>
<li>满足<strong>“全全半全全全半”</strong>的关系</li>
<li>$1、2、3、4、5、6、7、\dot{1}$</li>
</ul>
<h3 id="2-1-2-和声大调"><a href="#2-1-2-和声大调" class="headerlink" title="2.1.2 和声大调"></a>2.1.2 和声大调</h3><ul>
<li>$1、2、3、4、5、{}^b6、7、\dot{1}$</li>
</ul>
<h3 id="2-1-3-旋律大调"><a href="#2-1-3-旋律大调" class="headerlink" title="2.1.3 旋律大调"></a>2.1.3 旋律大调</h3><ul>
<li>$1、2、3、4、5、{}^b6、{}^b7、1$</li>
</ul>
<h2 id="2-2-小调式"><a href="#2-2-小调式" class="headerlink" title="2.2 小调式"></a>2.2 小调式</h2><h3 id="2-2-1-自然小调"><a href="#2-2-1-自然小调" class="headerlink" title="2.2.1 自然小调"></a>2.2.1 自然小调</h3><ul>
<li>$6、7、\dot{1}、\dot{2}、\dot{3}、\dot{4}、\dot{5}、\dot{6}$</li>
</ul>
<h3 id="2-2-2-和声小调"><a href="#2-2-2-和声小调" class="headerlink" title="2.2.2 和声小调"></a>2.2.2 和声小调</h3><ul>
<li>$6、7、\dot{1}、\dot{2}、\dot{3}、\dot{4}、{}^井\dot{5}、\dot{6}$</li>
</ul>
<h3 id="2-2-3-旋律小调"><a href="#2-2-3-旋律小调" class="headerlink" title="2.2.3 旋律小调"></a>2.2.3 旋律小调</h3><ul>
<li>$6、7、\dot{1}、\dot{2}、\dot{3}、{}^井\dot{4}、{}^井\dot{5}、\dot{6}$</li>
</ul>
<h2 id="2-3-自然大调"><a href="#2-3-自然大调" class="headerlink" title="2.3 自然大调"></a>2.3 自然大调</h2><ul>
<li>以下对自然大调进行着重讲解，因为自然大调在流行音乐中较为常见</li>
<li>在吉他谱中，会在琴谱左上角标注C=1，这就规定了这首歌的<strong>调式为C调</strong><ul>
<li>同理，如果标注G=1，则这首歌的<strong>调式为G调</strong></li>
<li>根据半音的规律，我们就可以在自然大调中推导出<strong>十二种调式</strong>（十二平均律）</li>
<li>不同调式的给人的感觉是不同的，音名的构成也是不同的，下表就列出了不同调式的音的构成</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">调</th>
<th style="text-align:center">音名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">唱名</td>
<td style="text-align:center">1、2、3、4、5、6、7、1</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">C、D、E、F、G、A、B、C</td>
</tr>
<tr>
<td style="text-align:center">#C</td>
<td style="text-align:center">#C、#D、#E、#F、#G、#A、#B、#C</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">D、E、#F、G、A、B、#C、D</td>
</tr>
<tr>
<td style="text-align:center">bE</td>
<td style="text-align:center">bE、F、G、bA、bB、C、D、bE</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center">E、#F、#G、A、B、#C、#D、E</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">F、G、A、bB、C、D、E、F</td>
</tr>
<tr>
<td style="text-align:center">bG</td>
<td style="text-align:center">bG、bA、bB、bC、bD、bE、F、bG</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">G、A、B、C、D、E、#F、G</td>
</tr>
<tr>
<td style="text-align:center">bA</td>
<td style="text-align:center">bA、bB、C、bD、bE、F、G、bA</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">A、B、#C、D、E、#F、#G、A</td>
</tr>
<tr>
<td style="text-align:center">bB</td>
<td style="text-align:center">bB、C、D、bE、F、G、A、bB</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">B、#C、#D、E、#F、#G、#A、B</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-4-关系大小调"><a href="#2-4-关系大小调" class="headerlink" title="2.4 关系大小调"></a>2.4 关系大小调</h2><p>大调音阶的前三个音是大三度关系、小调音阶的前三个音是小三度关系</p>
<p>以自然大小调为例</p>
<ul>
<li>C大调的关系小调为a小调</li>
<li>D大调的关系小调为b小调</li>
<li>F大调的关系小调为d小调</li>
<li>G大调的关系小调为e小调</li>
</ul>
<p>推导也比较简单，比如C大调往前推一个小三度就是A，那么关系小调就是a小调</p>
<h2 id="2-5-其他"><a href="#2-5-其他" class="headerlink" title="2.5 其他"></a>2.5 其他</h2><ul>
<li>五声音阶：C G D A E，这五个音都相距纯五度，由此构成了五声音阶，顺序来看应该是1 2 3 5 6，这也是中国古代常用的音高顺序：宫 商 角 徵（zhǐ） 羽</li>
<li>布鲁斯音阶：<em>1、b3、4、b5、5、b7</em>或者<em>6、1、2、b3、3、5</em>，音程间隔为：小三、大二、小二、小二、小三</li>
<li>Dorian Mode（多利亚调式——自然大调2级音阶）：1、2、b3、4、5、6、b7</li>
<li>Phrygian Mode（弗利几亚调式——自然大调3级音阶）：1、b2、b3、4、5、b6、b7</li>
<li>Lydian Mode（利底亚调式——自然大调4级音阶）：1、2、3、#4、5、6、7。</li>
<li>Mixolydian Mode（米索利第亚调式——自然大调5级音阶）：1、2、3、4、5、6、b7</li>
<li>Aeolian Mode（爱奥里亚调式———自然小调式）：1、2、b3、4、5、b6、b7 </li>
<li>Locrian Mode（洛克利亚调式——自然大调7级音阶）：1、b2、b3、4、b5、b6、b7</li>
</ul>
<h1 id="三、和弦"><a href="#三、和弦" class="headerlink" title="三、和弦"></a>三、和弦</h1><h2 id="3-1-和弦分类"><a href="#3-1-和弦分类" class="headerlink" title="3.1 和弦分类"></a>3.1 和弦分类</h2><h3 id="3-1-1-三度和弦"><a href="#3-1-1-三度和弦" class="headerlink" title="3.1.1 三度和弦"></a>3.1.1 三度和弦</h3><ul>
<li>三和弦（三个音）</li>
<li>五和弦（四个音）</li>
<li>九和弦（五个音）</li>
<li>十一和弦（六个音）</li>
<li>十三和弦（七个音）</li>
</ul>
<h3 id="3-1-2-非三度和弦"><a href="#3-1-2-非三度和弦" class="headerlink" title="3.1.2 非三度和弦"></a>3.1.2 非三度和弦</h3><ul>
<li>挂留和弦</li>
<li>强力和弦</li>
</ul>
<h2 id="3-2-三和弦"><a href="#3-2-三和弦" class="headerlink" title="3.2 三和弦"></a>3.2 三和弦</h2><h3 id="3-2-1-大三和弦"><a href="#3-2-1-大三和弦" class="headerlink" title="3.2.1 大三和弦"></a>3.2.1 大三和弦</h3><ul>
<li>大三度+小三度</li>
<li>如C调的C：1-3-5、F：4-6-1、G：5-7-2</li>
</ul>
<h3 id="3-2-2-小三和弦"><a href="#3-2-2-小三和弦" class="headerlink" title="3.2.2 小三和弦"></a>3.2.2 小三和弦</h3><ul>
<li>小三度+大三度</li>
<li>如C调的Dm：2-4-6、Em：3-5-7、Am：6-1-3</li>
</ul>
<h3 id="3-2-3-增三和弦"><a href="#3-2-3-增三和弦" class="headerlink" title="3.2.3 增三和弦"></a>3.2.3 增三和弦</h3><ul>
<li>大三度+大三度</li>
<li>Caug：1-3-#5</li>
</ul>
<h3 id="3-2-4-减三和弦"><a href="#3-2-4-减三和弦" class="headerlink" title="3.2.4 减三和弦"></a>3.2.4 减三和弦</h3><ul>
<li>小三度+小三度</li>
<li>Cdim：1-b3-b5</li>
</ul>
<h2 id="3-3-七和弦"><a href="#3-3-七和弦" class="headerlink" title="3.3 七和弦"></a>3.3 七和弦</h2><h3 id="3-3-1-大七和弦"><a href="#3-3-1-大七和弦" class="headerlink" title="3.3.1 大七和弦"></a>3.3.1 大七和弦</h3><ul>
<li>大三和弦+根音的大7度音</li>
<li>Cmaj7：1-3-5-7</li>
<li>Fmaj7：4-6-1-3</li>
</ul>
<h3 id="3-3-2-大小七和弦（属七和弦）"><a href="#3-3-2-大小七和弦（属七和弦）" class="headerlink" title="3.3.2 大小七和弦（属七和弦）"></a>3.3.2 大小七和弦（属七和弦）</h3><ul>
<li>大三和弦+根音的小7度音</li>
<li>C7：1-3-5-b7</li>
<li>G7：5-7-2-4</li>
</ul>
<h3 id="3-3-3-小小七和弦"><a href="#3-3-3-小小七和弦" class="headerlink" title="3.3.3 小小七和弦"></a>3.3.3 小小七和弦</h3><ul>
<li>小三和弦+根音的小7度音</li>
<li>Dm7：2-4-6-1</li>
<li>Em7：3-5-7-2</li>
<li>Am7：6-1-3-5</li>
</ul>
<h3 id="3-3-4-减小七和弦"><a href="#3-3-4-减小七和弦" class="headerlink" title="3.3.4 减小七和弦"></a>3.3.4 减小七和弦</h3><ul>
<li>减三+根音7度音</li>
<li>Bdim7：7-2-4-6</li>
</ul>
<h3 id="3-3-5-减减七和弦"><a href="#3-3-5-减减七和弦" class="headerlink" title="3.3.5 减减七和弦"></a>3.3.5 减减七和弦</h3><ul>
<li>减三+根音减7度音</li>
<li>Bm-5：7-2-4-b6</li>
</ul>
<h3 id="3-3-6-调内七和弦"><a href="#3-3-6-调内七和弦" class="headerlink" title="3.3.6 调内七和弦"></a>3.3.6 调内七和弦</h3><p>以C大调为例，七和弦包括Cmaj7、Dm7、Em7、Fmaj7、G7、Am7</p>
<p>很明显，在某一大调调式中，只存在一个属七和弦，即五级属七和弦G7，这也是用来判断歌曲调式的一种方式</p>
<h2 id="3-4-九和弦"><a href="#3-4-九和弦" class="headerlink" title="3.4 九和弦"></a>3.4 九和弦</h2><h3 id="3-4-1-属九和弦"><a href="#3-4-1-属九和弦" class="headerlink" title="3.4.1 属九和弦"></a>3.4.1 属九和弦</h3><ul>
<li>在属七和弦上加上根音的大九度音</li>
<li>C9：1-3-5-b7-2</li>
</ul>
<h3 id="3-4-2-Add和弦"><a href="#3-4-2-Add和弦" class="headerlink" title="3.4.2 Add和弦"></a>3.4.2 Add和弦</h3><ul>
<li><p>三和弦基础上再添加的音符，后面的数字代表距离根音的度数</p>
</li>
<li><p>Cadd9：1-3-5-2（根音的大9度音）</p>
</li>
</ul>
<h2 id="3-5-挂留和弦"><a href="#3-5-挂留和弦" class="headerlink" title="3.5 挂留和弦"></a>3.5 挂留和弦</h2><ul>
<li>Csus2：1-2-5（三度音转为二度音）</li>
<li>Csus4：1-4-5（三度音转为四度音）</li>
</ul>
<h2 id="3-6-和弦转位"><a href="#3-6-和弦转位" class="headerlink" title="3.6 和弦转位"></a>3.6 和弦转位</h2><p>以C和弦为例，$1-3-5$它的两个转位和弦分别为$3-5-\dot{1}$和$5-\dot{1}-\dot{3}$</p>
<p>其中C和弦的do始终为根音，对于不同的转为其最低音是不同的，比如$3-5-\dot{1}$的最低音是mi，$5-\dot{1}-\dot{3}$最低音是sol</p>
<p>$3-5-\dot{1}$转位和弦表示为：$C_6$或者$C/E$，其中由于<strong>最低音到最高音</strong>和<strong>最低音到根音</strong>的度数都是6，所以表示为$C_6$</p>
<p>$5-\dot{1}-\dot{3}$转位和弦表示为：$C_6^4$或者$C/G$，其中$C_6^4$中的上标4表示<strong>最低音到根音的度数</strong>，下标6表示<strong>最低音到最高音的度数</strong></p>
<p>对于<strong>七和弦</strong>，应该用<strong>最低音到7音</strong>的度数和<strong>最低音到根音</strong>的度数来表示转位和弦</p>
<h1 id="四、五线谱"><a href="#四、五线谱" class="headerlink" title="四、五线谱"></a>四、五线谱</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><img src="/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/wuxian.png" class="" title="wuxian">
<h2 id="4-2-音符"><a href="#4-2-音符" class="headerlink" title="4.2 音符"></a>4.2 音符</h2><h3 id="4-2-1-音符分类"><a href="#4-2-1-音符分类" class="headerlink" title="4.2.1 音符分类"></a>4.2.1 音符分类</h3><ul>
<li>全音符</li>
<li>二分音符</li>
<li>四分音符</li>
<li>八分音符</li>
<li>十六分音符</li>
<li>三十二分音符</li>
<li>休止符</li>
<li>浮点音符：延长当前音符时值的一半</li>
</ul>
<img src="/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/yinfu.jpeg" class="" title="yinfu">
<h3 id="4-2-2-音符关系"><a href="#4-2-2-音符关系" class="headerlink" title="4.2.2 音符关系"></a>4.2.2 音符关系</h3><p>$全音符=2<em>二分音符=4</em>四分音符=8<em>八分音符=16</em>十六分音符$</p>
<h2 id="4-3-节拍"><a href="#4-3-节拍" class="headerlink" title="4.3 节拍"></a>4.3 节拍</h2><h3 id="4-3-1-概念"><a href="#4-3-1-概念" class="headerlink" title="4.3.1 概念"></a>4.3.1 概念</h3><ul>
<li><strong>bpm</strong>：每分钟节拍数</li>
<li>常见的节拍（从后往前读）：<ul>
<li>4/4：表示以四分音符为一拍，每小节四拍；强弱规律：<strong>强、弱、次强、弱</strong></li>
<li>3/8：表示以八分音符为一拍，每小节三拍；强弱规律：<strong>强、弱、弱</strong></li>
<li>6/8：强弱规律：<strong>强、弱、弱、次强、弱、弱</strong></li>
</ul>
</li>
</ul>
<h3 id="4-3-2-常见节奏"><a href="#4-3-2-常见节奏" class="headerlink" title="4.3.2 常见节奏"></a>4.3.2 常见节奏</h3><ul>
<li>常见音符：全音符、二分音符、四分音符、八分音符、十六分音符、三十二分音符</li>
<li>常见节奏组组合：</li>
</ul>
<h2 id="4-4-十二大小调五线谱"><a href="#4-4-十二大小调五线谱" class="headerlink" title="4.4 十二大小调五线谱"></a>4.4 十二大小调五线谱</h2><img src="/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/12-1.png" class="" title="12-1">
<img src="/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/12-2.png" class="" title="12-2">
<img src="/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/12-3.png" class="" title="12-3">
<h2 id="4-5-首调记谱法"><a href="#4-5-首调记谱法" class="headerlink" title="4.5 首调记谱法"></a>4.5 首调记谱法</h2><ul>
<li>C调：$1,2,3,4,5,6,7,\dot{1}$</li>
<li>D调：$2,3,#4,5,6,7,#\dot{1},\dot{2}$</li>
<li>E调：$3,#4,#5,6,7,#\dot{1},#\dot{2},\dot{3}$</li>
<li>F调：$4,5,6,b7,\dot{1},\dot{2},\dot{3},\dot{4}$</li>
<li>G调：$5,6,7,\dot{1},\dot{2},\dot{3},#\dot{4},\dot{5}$</li>
<li>A调：$6,7,#\dot1,\dot2,\dot3,#\dot4,#\dot5,\dot6$</li>
</ul>
<h1 id="五、乐器"><a href="#五、乐器" class="headerlink" title="五、乐器"></a>五、乐器</h1><h2 id="5-1-打击乐器"><a href="#5-1-打击乐器" class="headerlink" title="5.1 打击乐器"></a>5.1 打击乐器</h2><h3 id="5-1-1-架子鼓Drum"><a href="#5-1-1-架子鼓Drum" class="headerlink" title="5.1.1 架子鼓Drum"></a>5.1.1 架子鼓Drum</h3><img src="/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/jiazigu.png" class="" title="jiazigu">
<ul>
<li>嗵（<strong>tōng</strong>）鼓（tom drum）：顾名思义，发咚咚声</li>
<li>踩镲（<strong>chǎ</strong>）（hi-hat）：擦擦声，声音没那么响亮</li>
<li>军鼓（snare drum）：哒哒声，较其他鼓要响亮些</li>
<li>脚鼓（bass drum/kick）：低音大鼓，又叫底鼓，从正面看的一个大鼓，脚踩发声</li>
<li><p>节奏镲（ride cymbal）：啪啪声，最响亮的声</p>
</li>
<li><p>常用节奏示例：</p>
<ul>
<li><p>动（底鼓）、次（踩镲）、打（军鼓）、次 （踩镲）、动（底鼓 ）、动（底鼓）、打（  军鼓） 次（踩镲）。</p>
</li>
<li><p>动（底鼓 ） 、次（踩镲）、打（军鼓）、次（ 踩镲）、 动（ 底鼓）、 次（踩镲）、动（底鼓）、打（军鼓）、 次（踩镲）。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>乐理</tag>
        <tag>调式</tag>
        <tag>和弦</tag>
        <tag>和弦进行</tag>
        <tag>吉他音阶分布</tag>
      </tags>
  </entry>
  <entry>
    <title>前端组件实现-基于vis.js的节点展开</title>
    <url>/2022/03/12/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0-%E5%9F%BA%E4%BA%8Evis-js%E7%9A%84%E8%8A%82%E7%82%B9%E5%B1%95%E5%BC%80/</url>
    <content><![CDATA[<h1 id="一、数据准备"><a href="#一、数据准备" class="headerlink" title="一、数据准备"></a>一、数据准备</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><ul>
<li>id最好设置为数值型，方便后面的查找工作，需要通过id值查找其在staticNodes中的下标值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置点和边的数据</span></span><br><span class="line"><span class="keyword">var</span> staticNodes = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">label</span>:<span class="string">&quot;高玥&quot;</span>, <span class="attr">group</span>:<span class="number">1</span>, <span class="attr">pid</span>:<span class="number">0</span>, <span class="attr">subids</span>:[<span class="number">2</span>,<span class="number">3</span>]&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">label</span>:<span class="string">&quot;篮球&quot;</span>, <span class="attr">group</span>:<span class="number">2</span>, <span class="attr">pid</span>:<span class="number">1</span>, <span class="attr">subids</span>:[<span class="number">4</span>]&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">label</span>:<span class="string">&quot;羽毛球&quot;</span>, <span class="attr">group</span>:<span class="number">2</span>, <span class="attr">pid</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">4</span>, <span class="attr">label</span>:<span class="string">&quot;技巧&quot;</span>, <span class="attr">group</span>:<span class="number">3</span>,<span class="attr">pid</span>:<span class="number">2</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> staticEdges = [</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">label</span>:<span class="string">&quot;兴趣&quot;</span>, <span class="attr">from</span>: <span class="number">1</span>,<span class="attr">to</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">label</span>:<span class="string">&quot;兴趣&quot;</span>, <span class="attr">from</span>: <span class="number">1</span>,<span class="attr">to</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">label</span>:<span class="string">&quot;有&quot;</span>, <span class="attr">from</span>: <span class="number">2</span>,<span class="attr">to</span>: <span class="number">4</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="1-2-数据格式"><a href="#1-2-数据格式" class="headerlink" title="1.2 数据格式"></a>1.2 数据格式</h2><h3 id="1-2-1-格式要求"><a href="#1-2-1-格式要求" class="headerlink" title="1.2.1 格式要求"></a>1.2.1 格式要求</h3><ul>
<li>一般vis要显示network，需要以下格式<ul>
<li>node：id、label、group</li>
<li>edge：id、label、from、to</li>
</ul>
</li>
<li>为了实现节点展开收缩就需要在nodes中再添加两个字段：<ul>
<li>pid：父节点id</li>
<li>subids：子节点id列表</li>
</ul>
</li>
</ul>
<h3 id="1-2-2-后端实现方案（首页展示）："><a href="#1-2-2-后端实现方案（首页展示）：" class="headerlink" title="1.2.2 后端实现方案（首页展示）："></a>1.2.2 后端实现方案（首页展示）：</h3><ul>
<li>需要先给数据分层，添加level标签，表示层级关系，只需要标注第一层即可，因为其他层会因点击事件而进行展开</li>
<li>nodes节点中的pid和subids需要进行判断，再进行添加<ul>
<li>设置pid：根据关系进行判断（根据to，查找from），对于单向关系，比如（我，有，篮球），那么篮球的pid就设置为“我”的id值，<strong>注意：目前只考虑节点的父节点只有一个的情况，如果pid有多个就需要设置列表</strong></li>
<li>设置subids：根据关系进行判断（根据from，查找to），如存在一组关系（我，有，篮球）、（我，年龄，18），那么“我”的subids即表示为“篮球”和“18”对应id组成的列表</li>
<li>设置group：group是为了对节点进行区分<ul>
<li>前端实现：在进行节点展开时，会为nodes添加节点数据，这里就可以为节点添加上相同group，可以取一个随机整数</li>
<li>后端实现：对于关系中from标签相同的一组关系，为其to标签对应的节点添加上相同group值</li>
</ul>
</li>
</ul>
</li>
<li>为vis注入数据时，先注入第一层的数据，即先显示第一层的节点关系</li>
</ul>
<h1 id="二、vis-js绘制network"><a href="#二、vis-js绘制network" class="headerlink" title="二、vis.js绘制network"></a>二、vis.js绘制network</h1><h2 id="2-1-将数据注入到vis中"><a href="#2-1-将数据注入到vis中" class="headerlink" title="2.1 将数据注入到vis中"></a>2.1 将数据注入到vis中</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = <span class="keyword">new</span> vis.DataSet(staticNodes);</span><br><span class="line"><span class="keyword">var</span> edges = <span class="keyword">new</span> vis.DataSet(staticEdges);</span><br></pre></td></tr></table></figure>
<h2 id="2-2-配置network"><a href="#2-2-配置network" class="headerlink" title="2.2 配置network"></a>2.2 配置network</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个图的容器</span></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;mynetwork&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    <span class="attr">nodes</span>: nodes,</span><br><span class="line">    <span class="attr">edges</span>: edges</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="attr">nodes</span>:&#123;</span><br><span class="line">        <span class="attr">shape</span>: <span class="string">&quot;dot&quot;</span>,</span><br><span class="line">        <span class="comment">// scaling: &#123;</span></span><br><span class="line">        <span class="comment">//     customScalingFunction: function(min, max, total, value)&#123;</span></span><br><span class="line">        <span class="comment">//         return value / total;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     min:5,</span></span><br><span class="line">        <span class="comment">//     max:150,</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">edges</span>: &#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">0.15</span>,</span><br><span class="line">        <span class="comment">//physics: false,</span></span><br><span class="line">        <span class="attr">smooth</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;continuous&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">interaction</span>: &#123;</span><br><span class="line">        <span class="attr">hover</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">//hoverConnectedEdges: true</span></span><br><span class="line">        <span class="comment">//hideEdgesOnDrag: true,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">physics</span>: &#123;</span><br><span class="line">        <span class="comment">//enabled: false,</span></span><br><span class="line">        <span class="attr">repulsion</span>:&#123;</span><br><span class="line">            <span class="attr">nodeDistance</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">springLength</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">springConstant</span>: <span class="number">0.5</span>,</span><br><span class="line">            <span class="attr">centralGravity</span>: <span class="number">0.9</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">layout</span>:&#123;</span><br><span class="line">        <span class="comment">//hierarchical: &#123;direction: &#x27;UD&#x27;, sortMethod: &#x27;hubsize&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图可视化</span></span><br><span class="line"><span class="comment">// initialize your network!</span></span><br><span class="line"><span class="keyword">var</span> network = <span class="keyword">new</span> vis.Network(container, data, options);</span><br></pre></td></tr></table></figure>
<h2 id="2-3-为节点创建点击事件"><a href="#2-3-为节点创建点击事件" class="headerlink" title="2.3 为节点创建点击事件"></a>2.3 为节点创建点击事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击事件获取的是节点的列表，一般列表中只有一个节点id</span></span><br><span class="line">network.on(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">params</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 点击的是节点的情况（不考虑点击边的情况）</span></span><br><span class="line">    <span class="keyword">if</span> (params.nodes.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> clickNodeId = params.nodes[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//console.log(findArrayIndexById(staticNodes,clickNodeId));</span></span><br><span class="line">        <span class="comment">//removeSubNodes(clickNodeId);</span></span><br><span class="line">        <span class="comment">//removeByRecur(clickNodeId)</span></span><br><span class="line">        <span class="comment">//console.log(nodes.get(1));</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//	逻辑分离，如果点击的节点存在子节点，则递归收缩节点</span></span><br><span class="line">        <span class="comment">//	否则进行节点展开</span></span><br><span class="line">        <span class="keyword">if</span>(getSubNodes(clickNodeId).length!=<span class="number">0</span>)</span><br><span class="line">            removeNodes(clickNodeId);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            addNodes(clickNodeId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="三、展开收缩逻辑"><a href="#三、展开收缩逻辑" class="headerlink" title="三、展开收缩逻辑"></a>三、展开收缩逻辑</h1><ul>
<li>具体的逻辑实现如下：<ul>
<li>第一步：<strong>getSubNodes</strong>函数获取到点击节点的<strong>下级节点id列表</strong>subNodes</li>
<li>第二步：判断<strong>subNodes</strong>是否为空，如果<strong>不为空</strong>执行<strong>第三步</strong>，否则执行第四步</li>
<li>第三步：如果不为空：遍历subNodes中的id值，在<strong>staticNodes</strong>中找到其对应的节点并在nodes/edges中进行递归remove<strong>（收缩操作）</strong></li>
<li>第四步：如果为空：判断点击的节点是否存在<strong>下级节点列表subids</strong>，如果存在，执行第五步<strong>（展开操作）</strong></li>
<li>第五步：遍历<strong>subids下级id列表</strong>，在staticNodes中查找到对应的节点，添加到nodes和edges中，实现节点的展开操作</li>
</ul>
</li>
<li>收缩时，如果点击节点的下一级节点中包含下下一级节点，则进行递归查找并收缩，实现方法为<strong>removeNodes</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据id值查找其对应的下标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findArrayIndexById</span>(<span class="params">arr, id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res;</span><br><span class="line">    $.each(arr, <span class="function">(<span class="params">index,item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(item[<span class="string">&#x27;id&#x27;</span>] == id)&#123;</span><br><span class="line">            res = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点收缩</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeNodes</span>(<span class="params">clickNodeId</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取到的是下级节点列表</span></span><br><span class="line">    <span class="keyword">var</span> subNodes = getSubNodes(clickNodeId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果获取的下级节点列表长度 不为 0，表示节点没有收缩，则点击后进行收缩</span></span><br><span class="line">    <span class="keyword">if</span>(subNodes.length != <span class="number">0</span>)&#123;</span><br><span class="line">        $.each(subNodes,<span class="function">(<span class="params">index,item</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//消除的是注入到vis中的数据，而不是staticNodes/Edges</span></span><br><span class="line">            removeNodes(item);</span><br><span class="line">            nodes.remove(&#123;<span class="attr">id</span>:item&#125;);</span><br><span class="line">            edges.remove(&#123;<span class="attr">from</span>:clickNodeId,<span class="attr">to</span>:item&#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点展开</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNodes</span>(<span class="params">clickNodeId</span>)</span>&#123;</span><br><span class="line">    $.each(staticNodes[findArrayIndexById(staticNodes,clickNodeId)][<span class="string">&#x27;subids&#x27;</span>],<span class="function">(<span class="params">index,item</span>)=&gt;</span>&#123;</span><br><span class="line">        nodes.add(staticNodes[findArrayIndexById(staticNodes,item)]);</span><br><span class="line">        edges.add(&#123;<span class="attr">from</span>: clickNodeId,<span class="attr">to</span>: item&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取点击节点的下级节点列表，不包含与其相连的父节点id</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSubNodes</span>(<span class="params">clickNodeId</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取与该节点所连接的所有节点的id（只要是相连的都会被算进来）</span></span><br><span class="line">    <span class="keyword">var</span> returnNodes = [];</span><br><span class="line">    <span class="keyword">var</span> connectedNodes = network.getConnectedNodes(clickNodeId);<span class="comment">//获取所有连接节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对节点id列表进行遍历，index表示列表下标，item表示对应的id值</span></span><br><span class="line">    $.each(connectedNodes, <span class="function">(<span class="params">index,item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//这里的clickNodeId和staticNodes数组中的下标只是简单的-1操作</span></span><br><span class="line">        <span class="comment">//因为staticNodes中id都是顺序的，如果不是顺序的就需要遍历才能找到其下标值</span></span><br><span class="line">        <span class="comment">//clickNodeId是点击的那个节点的id，item是连接节点的id</span></span><br><span class="line">        <span class="comment">//如果这个连接的节点是点击的节点父节点，则不考虑进去！！！</span></span><br><span class="line">        <span class="keyword">if</span>(item != staticNodes[findArrayIndexById(staticNodes,clickNodeId)][<span class="string">&#x27;pid&#x27;</span>])&#123;</span><br><span class="line">            returnNodes.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> returnNodes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="四、实现效果"><a href="#四、实现效果" class="headerlink" title="四、实现效果"></a>四、实现效果</h1><img src="/2022/03/12/%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0-%E5%9F%BA%E4%BA%8Evis-js%E7%9A%84%E8%8A%82%E7%82%B9%E5%B1%95%E5%BC%80/node.gif" class="" title="image1">]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vis.js</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>诗词韵律解析</title>
    <url>/2022/03/02/%E8%AF%97%E8%AF%8D%E9%9F%B5%E5%BE%8B%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="一、诗体简介"><a href="#一、诗体简介" class="headerlink" title="一、诗体简介"></a>一、诗体简介</h1><h2 id="1-1-近体诗格律"><a href="#1-1-近体诗格律" class="headerlink" title="1.1 近体诗格律"></a>1.1 近体诗格律</h2><p>古体诗与近体诗的区别：</p>
<ul>
<li><p>古体诗不讲究押韵；近体诗用韵严格，必须一韵到底，不能换韵，且压平声韵</p>
</li>
<li><p>古体诗字数不固定；近体诗字数固定</p>
</li>
<li><p>古体诗没有严格的平仄、对仗；近体诗讲究平仄、对仗工整</p>
</li>
</ul>
<p>古体诗的代表有《诗经》《楚辞》《琵琶行》《归园田居》等</p>
<p>近体诗格律要求：</p>
<ul>
<li>诗句数固定</li>
<li>字数为五言或七言</li>
<li>一般押平声韵，不允许换韵，韵脚位置固定</li>
<li>平仄有规定</li>
<li>五七言律诗中间两联原则上必须对仗</li>
</ul>
<h2 id="1-2-绝句和律诗"><a href="#1-2-绝句和律诗" class="headerlink" title="1.2 绝句和律诗"></a>1.2 绝句和律诗</h2><ul>
<li>绝句为四句；律诗为八句</li>
<li>古绝讲究押韵，平仄与对仗较为自由；律诗即讲究押韵，又对平仄、对仗有严格规定</li>
<li>绝句（截句、绝诗）包括古绝和律绝两种，短小精炼</li>
</ul>
<h1 id="二、声律"><a href="#二、声律" class="headerlink" title="二、声律"></a>二、声律</h1><h2 id="2-1-声调"><a href="#2-1-声调" class="headerlink" title="2.1 声调"></a>2.1 声调</h2><ul>
<li>古汉语四声调：平、上、去、入</li>
<li>相间律：平仄交替使用</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>古声调</th>
<th>普通话声调</th>
</tr>
</thead>
<tbody>
<tr>
<td>平</td>
<td>阴平、阳平</td>
</tr>
<tr>
<td>上</td>
<td>去（第三声）</td>
</tr>
<tr>
<td>去</td>
<td>去（第四声）</td>
</tr>
<tr>
<td>入</td>
<td>融合到了平/上/去</td>
</tr>
</tbody>
</table>
</div>
<p>由于现代汉语没有了入声的发音习惯，对古代入声字的判断规则如下：</p>
<p>（一）凡b、d、g、j、zh、z六母的第二声字（阳平），都是古入声字</p>
<p>（二）凡d、t、L、z、c、s等六母跟韵母e拼合时，不论国语读何声调，都是古入声字</p>
<p>（三）凡k、zh、ch、sh、R五母与韵母uo拼合时，不论国语读何声调，都是古入声字</p>
<p>（四）凡b、p、m、d、t、n、L七母跟韵母ie拼时，无论国语读何声调，都是古入声字</p>
<p>（五）凡d、g、h、z、s五母与韵母ei拼合时，不论国语读何声调，都是古入声字</p>
<p>（六）凡声母f，跟韵母a、o拼合时，都是古入声字</p>
<p>（七）凡读ue韵母的字，都是古入声字。只有「嗟」jue，「瘸」queˊ，「靴」xue三字除外</p>
<p>（八）一字有两读，读音为开尾韵，语音读i或u韵尾的，也是古入声字</p>
<h2 id="2-2-五言律诗的平仄"><a href="#2-2-五言律诗的平仄" class="headerlink" title="2.2 五言律诗的平仄"></a>2.2 五言律诗的平仄</h2><h3 id="2-2-1-起声-收声"><a href="#2-2-1-起声-收声" class="headerlink" title="2.2.1 起声/收声"></a>2.2.1 起声/收声</h3><ul>
<li>仄起：第一句的第二个字为仄声</li>
<li>平起：第一句的第二个字为平声</li>
<li>仄收：第一句的第五字为仄声</li>
<li>平收：第一句的第五字为平声</li>
</ul>
<p>不同平仄格式的首句格式</p>
<ul>
<li>仄起仄收：仄仄平平仄、仄仄平平平仄仄</li>
<li>仄起平收（首句入韵）：仄仄仄平平、仄仄平平仄仄平</li>
<li>平起平收（首句入韵）：平平仄仄平、平平仄仄仄平平</li>
<li>平起仄收：平平平仄仄、平平仄仄平平仄</li>
</ul>
<h3 id="2-2-2-平仄格式"><a href="#2-2-2-平仄格式" class="headerlink" title="2.2.2 平仄格式"></a>2.2.2 平仄格式</h3><h4 id="（1）仄起仄收"><a href="#（1）仄起仄收" class="headerlink" title="（1）仄起仄收"></a>（1）仄起仄收</h4><p>加下划线表示<strong>可平可仄</strong></p>
<p>$\underline{仄}仄平平仄，平平仄仄平$</p>
<p>$\underline{平}平仄仄平，\underline{仄}仄仄平平$</p>
<p>$\underline{仄}仄平平仄，平平仄仄平$</p>
<p>$\underline{平}平仄仄平，\underline{仄}仄仄平平$</p>
<img src="/2022/03/02/%E8%AF%97%E8%AF%8D%E9%9F%B5%E5%BE%8B%E8%A7%A3%E6%9E%90/%E7%A7%8B%E5%8F%B6%E7%8B%AC%E5%9D%90.png" class="" title="wanwei1">
<ul>
<li><p>堂：泛指房屋的正厅</p>
</li>
<li><p>无生：佛家语，谓世本虚幻，万物实体无生无灭</p>
</li>
</ul>
<h4 id="（2）仄起平收"><a href="#（2）仄起平收" class="headerlink" title="（2）仄起平收"></a>（2）仄起平收</h4><p>$\underline{仄}仄仄平平，平平仄仄平$</p>
<p>$\underline{平}平平仄仄，\underline{仄}仄仄平平$</p>
<p>$\underline{仄}仄平平仄，平平仄仄平$</p>
<p>$\underline{平}平平仄仄，\underline{仄}仄仄平平$</p>
<img src="/2022/03/02/%E8%AF%97%E8%AF%8D%E9%9F%B5%E5%BE%8B%E8%A7%A3%E6%9E%90/%E7%BB%88%E5%8D%97%E5%B1%B1.png" class="" title="zns">
<p>终南山：在长安南五十里，秦岭主峰之一。古人又称秦岭山脉为终南山。秦岭绵延八百余里，是渭水和汉水的分水岭。</p>
<p>太乙：又名太一，秦岭之一峰。唐人每称终南山一名太一，如《元和郡县志》：”终南山在县（京兆万年县）南五十里。按经传所说，终南山一名太一，亦名中南”。</p>
<p>天都：天帝所居。</p>
<p>青霭：山中的岚气。霭：云气。</p>
<p>海隅：海边。终南山并不到海，此为夸张之词。</p>
<p>分野：古天文学名词。古人以天上的二十八个星宿的位置来区分中国境内的地域，被称为分野。</p>
<p>壑：山谷。</p>
<h4 id="（3）平起仄收"><a href="#（3）平起仄收" class="headerlink" title="（3）平起仄收"></a>（3）平起仄收</h4><p>$\underline{平}平平仄仄，仄仄仄平平$</p>
<p>$\underline{仄}仄平平仄，\underline{平}平仄仄平$</p>
<p>$\underline{平}平平仄仄，\underline{仄}仄仄平平$</p>
<p>$\underline{仄}仄平平仄，\underline{平}平仄仄平$</p>
<h4 id="（4）平起平收"><a href="#（4）平起平收" class="headerlink" title="（4）平起平收"></a>（4）平起平收</h4><p>$\underline{平}平仄仄平，仄仄仄平平$</p>
<p>$\underline{仄}仄平平仄，\underline{平}平仄仄平$</p>
<p>$\underline{平}平平仄仄，\underline{仄}仄仄平平$</p>
<p>$\underline{仄}仄平平仄，\underline{平}平仄仄平$</p>
<img src="/2022/03/02/%E8%AF%97%E8%AF%8D%E9%9F%B5%E5%BE%8B%E8%A7%A3%E6%9E%90/%E9%80%81%E8%B5%B5%E9%83%BD%E7%9D%A3%E8%B5%B4%E4%BB%A3%E5%B7%9E.png" class="" title="szddfdz">
<p>代州：治所在今山西代县</p>
<p>刁斗：古代行军用具。斗形有柄，铜质；白天用作炊具，晚上击以巡更</p>
<p>三军：军队的通称</p>
<p>井陉$x\acute{i}ng$：古关名，即井陉口，又名井陉关，唐时要塞，在今河北井陉县境内，井隘北井隆山上。秦汉时为军事要地。</p>
<p>凤阙：汉代宫阙名，在建章宫东，因为其上有铜凤凰而得名</p>
<p>取龙庭：借指誓歼敌虏。龙庭：原指匈奴单于祭天的地方。</p>
<h2 id="2-3-七言律诗的平仄"><a href="#2-3-七言律诗的平仄" class="headerlink" title="2.3 七言律诗的平仄"></a>2.3 七言律诗的平仄</h2><h3 id="2-3-1-平仄格式"><a href="#2-3-1-平仄格式" class="headerlink" title="2.3.1 平仄格式"></a>2.3.1 平仄格式</h3><h4 id="（1）平起平收"><a href="#（1）平起平收" class="headerlink" title="（1）平起平收"></a>（1）平起平收</h4><p>$\underline{平}平\underline{仄}仄仄平平，\underline{仄}仄平平仄仄平$</p>
<p>$\underline{仄}仄\underline{平}平平仄仄，\underline{平}平\underline{仄}仄仄平平$</p>
<p>$\underline{平}平\underline{仄}仄平平仄，\underline{仄}仄平平仄仄平$</p>
<p>$\underline{仄}仄\underline{平}平平仄仄，\underline{平}平\underline{仄}仄仄平平$</p>
<h4 id="（2）平起仄收"><a href="#（2）平起仄收" class="headerlink" title="（2）平起仄收"></a>（2）平起仄收</h4><p>$\underline{平}平\underline{仄}仄平平仄，\underline{仄}仄平平仄仄平$</p>
<p>$\underline{仄}仄\underline{平}平平仄仄，\underline{平}平\underline{仄}仄仄平平$</p>
<p>$\underline{平}平\underline{仄}仄平平仄，\underline{仄}仄平平仄仄平$</p>
<p>$\underline{仄}仄\underline{平}平平仄仄，\underline{平}平\underline{仄}仄仄平平$</p>
<h4 id="（3）仄起平收"><a href="#（3）仄起平收" class="headerlink" title="（3）仄起平收"></a>（3）仄起平收</h4><p>$\underline{仄}仄平平仄仄平，\underline{平}平\underline{仄}仄仄平平$</p>
<p>$\underline{平}平\underline{仄}仄平平仄，\underline{仄}仄平平仄仄平$</p>
<p>$\underline{仄}仄\underline{平}平平仄仄，\underline{平}平\underline{仄}仄仄平平$</p>
<p>$\underline{平}平\underline{仄}仄平平仄，\underline{仄}仄平平仄仄平$</p>
<h4 id="（4）仄起仄收"><a href="#（4）仄起仄收" class="headerlink" title="（4）仄起仄收"></a>（4）仄起仄收</h4><p>$仄仄平平平仄仄，\underline{平}平\underline{仄}仄仄平平$</p>
<p>$\underline{平}平\underline{仄}仄平平仄，\underline{仄}仄平平仄仄平$</p>
<p>$\underline{仄}仄\underline{平}平平仄仄，\underline{平}平\underline{仄}仄仄平平$</p>
<p>$\underline{平}平\underline{仄}仄平平仄，\underline{仄}仄平平仄仄平$</p>
<h2 id="2-4-相对律、相粘律"><a href="#2-4-相对律、相粘律" class="headerlink" title="2.4 相对律、相粘律"></a>2.4 相对律、相粘律</h2><h3 id="2-4-1-相对律"><a href="#2-4-1-相对律" class="headerlink" title="2.4.1 相对律"></a>2.4.1 相对律</h3><ul>
<li>一联中，<strong>出句</strong>和<strong>对句</strong>的平仄是相对的</li>
</ul>
<h3 id="2-4-2-相粘律"><a href="#2-4-2-相粘律" class="headerlink" title="2.4.2 相粘律"></a>2.4.2 相粘律</h3><ul>
<li><strong>后一联出句第二字</strong>的平仄要跟<strong>前一联对句第二字</strong>的平仄一致</li>
<li>即：第三句第二字的平仄与第二句第二字的平仄相同，第五局第二字的平仄和第四句第二字的平仄相同，第七句第二字的平仄与第六句第二字的平仄相同</li>
</ul>
<h2 id="2-5-特殊平仄格式"><a href="#2-5-特殊平仄格式" class="headerlink" title="2.5 特殊平仄格式"></a>2.5 特殊平仄格式</h2><p>在唐人近体诗创作中存在对句型为【平平平仄仄】、【仄仄平平平仄仄】平仄格式进行修改的情况，如下：</p>
<ul>
<li>五言：平平【平仄仄】—-&gt;平平仄【平仄】</li>
<li>七言：仄仄平平【平仄仄】—-&gt;平仄平平【仄平仄】</li>
</ul>
<p>句型修改为特殊平仄格式后，这种句型的第一个字必须为平声</p>
<h2 id="2-6-一三五不论、二四六分明"><a href="#2-6-一三五不论、二四六分明" class="headerlink" title="2.6 一三五不论、二四六分明"></a>2.6 一三五不论、二四六分明</h2><p>这句话的意思是：</p>
<ul>
<li>近体七言诗每句的第一字、第三字和第五字的平仄可以不论</li>
<li>第二字、第四字和第六字的平仄必须严格依照格式</li>
</ul>
<p>当然这句话不一定要完全遵循，有例外情况</p>
<h3 id="2-6-1-反例"><a href="#2-6-1-反例" class="headerlink" title="2.6.1 反例"></a>2.6.1 反例</h3><p>以下反例都是“一三五不论、二四六分明”所导致的情况，不符合诗词的韵律</p>
<ul>
<li>犯孤平：诗的一句中，除了韵脚外只有一个平字，这是作诗的禁忌</li>
<li>三平调：句末三字的平仄为连着的三平声</li>
</ul>
<h2 id="2-7-拗与救"><a href="#2-7-拗与救" class="headerlink" title="2.7 拗与救"></a>2.7 拗与救</h2><ul>
<li>拗：不符合平仄格式的字，这种形式叫做拗</li>
<li>救：如果前一个字用了“拗”，比如前一个字在本该用平声的地方用了仄声，那么在后面合适的地方补充一个平声</li>
</ul>
<h1 id="三、用韵"><a href="#三、用韵" class="headerlink" title="三、用韵"></a>三、用韵</h1><h2 id="3-1-韵母解析"><a href="#3-1-韵母解析" class="headerlink" title="3.1 韵母解析"></a>3.1 韵母解析</h2><p>押韵：押韵是把同韵母或韵母相近的字，放在诗篇某些句子的末尾，使诗歌读起来顺口，听起来悦耳，容易记得住、传得开</p>
<p>韵母由韵头、韵腹、韵尾三个部分组成</p>
<ul>
<li>韵头：又称介音，是韵腹前面、起前导作用的部分，发音比较模糊，往往迅速带过；</li>
<li>韵腹：又称主要元音，是一个韵母发音的关键，是韵母发音过程时，口腔肌肉最紧张，发音最响亮的部分；</li>
<li>韵尾：可元音可辅音。一种叫鼻韵尾，有-n,-ng两个。另一种叫口韵尾。韵尾是韵腹后面、起收尾作用的部分，发音也比较模糊，但务求发到位。</li>
</ul>
<p>如“娘”niáng的韵母是iang，其中i是韵头，a是韵腹，ng是韵尾。</p>
<p>每个韵母一定有韵腹，韵头和韵尾则可有可无。如“大”dà的韵母是a，a是韵腹，没有韵头、韵尾；<br>“瓜”guā的韵母是ua，其中u是韵头，a是韵腹，没有韵尾；<br>“刀”dāo的韵母是ao，其中a是韵腹，o是韵尾，没有韵头。</p>
<h2 id="3-2-平声韵"><a href="#3-2-平声韵" class="headerlink" title="3.2 平声韵"></a>3.2 平声韵</h2><p>平声韵，是汉语中读音为平声的单字归类，其主要特点是发声比较平和。“平声”与“仄声”相对应。在诗词中，句尾押韵有压平声韵和仄声韵， 平声即阴平、阳平，仄声是上声、去声。压阴平、阳平韵的是平声韵，压上声、去声的是仄声韵。</p>
<p>做诗所依据的韵书，一般指《平水韵》，平、上、去、入四声一共106韵</p>
<p>平声30韵，上声29韵，去声30韵，入声17韵。律诗一般只用平声韵</p>
<ul>
<li>上平声：一东、二冬、三江、四支、五微、六鱼、七虞、八齐、九佳、十灰、十一真、十二文、十三元、十四寒、十五删</li>
<li>下平声：一先、二萧、三肴、四豪、五歌、六麻、七阳、八庚、九青、十蒸、十一尤、十二侵、十三覃、十四盐、十五咸</li>
<li>上声韵：一董、二肿、三讲、四纸、五尾、六语、七雨、八荠(jì)、九蟹、十贿、十一轸(zhěn)、十二吻、十三阮、十四旱、十五潸(shān)、十六铣(xiǎn/xǐ)、十七小、十八巧、十九皓、二十哿、二十一马、二十二养、二十三梗、二十四迥(jiǒng)、二十五有、二十六寝、二十七感、二十八琰(yǎn)、二十九豏(xiàn)</li>
<li>去声韵：一送、二宋、三绛(jiàng)、四寘(zhì)、五未、六御、七遇、八霁(jì)、九泰、十卦、十一队、十二震、十三问、十四愿、十五翰(hàn)、十六谏、十七霰(xiàn)、十八啸、十九效、二十号、二十一箇(gè)、二十二禡(mà)、二十三漾、二十四敬、二十五径(jìng)、二十六宥(yòu)、二十七沁、二十八勘(kān)、二十九艳、三十陷</li>
<li>入声韵：一屋、二沃、三觉、四质、五物、六月、七曷(hé)、八黠(xiá)、九屑(xiè)、十药、十一陌、十二锡(xī)、十三职、十四缉(qī/jī)、十五合、十六叶、十七洽(qià)</li>
</ul>
<h2 id="3-3-宽韵与窄韵"><a href="#3-3-宽韵与窄韵" class="headerlink" title="3.3 宽韵与窄韵"></a>3.3 宽韵与窄韵</h2><p>宽韵：包括四支、一先、七阳、八庚、十一尤、一东、十一真、七虞.作诗用这些韵,有较多的韵脚可供选择</p>
<p>中韵：包括十三元、十四寒、六鱼、二萧、十二侵、二冬、十灰、八齐、五歌、六麻、四豪.作诗用这些韵,有次多的韵脚可供选择</p>
<p>窄韵：包括五微、十二文、十五删、九青、十蒸、十三覃、十四盐.作诗用这些韵,可供选择的较少</p>
<p>险韵：包括包括三江、九佳、三肴、十五咸.作诗用这些韵,可供选择的很少</p>
<h1 id="四、对仗"><a href="#四、对仗" class="headerlink" title="四、对仗"></a>四、对仗</h1><h2 id="4-1-对仗要求"><a href="#4-1-对仗要求" class="headerlink" title="4.1 对仗要求"></a>4.1 对仗要求</h2><ul>
<li>字面相对：构成对仗的字词意义相对或相反</li>
<li>词性一致：名词对名词，动词对动词，形容词对形容词等</li>
<li>对仗时，对应位置上的字不能相同，如昔我往矣，杨柳依依；今我来思，雨雪霏霏</li>
</ul>
<h2 id="4-2-对仗的类型"><a href="#4-2-对仗的类型" class="headerlink" title="4.2 对仗的类型"></a>4.2 对仗的类型</h2><ul>
<li>言对：</li>
<li>事对：</li>
<li>反对：</li>
<li>正对：</li>
</ul>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>中国诗词</category>
      </categories>
      <tags>
        <tag>中国传统</tag>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>H5C3基础大全一</title>
    <url>/2022/03/01/H5C3%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、HTML基础"><a href="#一、HTML基础" class="headerlink" title="一、HTML基础"></a>一、HTML基础</h1><h2 id="1-1-基础网页结构"><a href="#1-1-基础网页结构" class="headerlink" title="1.1 基础网页结构"></a>1.1 基础网页结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>day01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-1-1-结构"><a href="#1-1-1-结构" class="headerlink" title="1.1.1 结构"></a>1.1.1 结构</h3><ul>
<li>头部：<code>&lt;header&gt;</code></li>
<li>主体：<code>&lt;main&gt;</code></li>
<li>底部：<code>&lt;footer&gt;</code></li>
</ul>
<h3 id="1-1-2-内容区"><a href="#1-1-2-内容区" class="headerlink" title="1.1.2 内容区"></a>1.1.2 内容区</h3><ul>
<li>导航：<code>&lt;nav&gt;</code></li>
<li>侧边栏：<code>&lt;aside&gt;</code></li>
<li>文章区：<code>&lt;artical&gt;</code></li>
<li>读取区块：<code>&lt;section&gt;</code></li>
</ul>
<h3 id="1-1-3-注意"><a href="#1-1-3-注意" class="headerlink" title="1.1.3 注意"></a>1.1.3 注意</h3><ul>
<li>1.1.1和1.1.2的标签是h5新增的标签，使用的不多，一般使用div和span</li>
<li>div没有语义，就用来表示一个区域，目前来讲div还是我们主要的布局元素</li>
<li>span是一个行内元素，没有任何的语义，一般用于在网页中选中文字</li>
</ul>
<h2 id="1-2-实体符号"><a href="#1-2-实体符号" class="headerlink" title="1.2 实体符号"></a>1.2 实体符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">实体符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\&amp;nbsp</td>
<td style="text-align:center">表示空格</td>
</tr>
<tr>
<td style="text-align:center">\&amp;gt</td>
<td style="text-align:center">大于号</td>
</tr>
<tr>
<td style="text-align:center">&amp;lt</td>
<td style="text-align:center">小于号</td>
</tr>
<tr>
<td style="text-align:center">&amp;copy</td>
<td style="text-align:center">版权符号</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-3-块元素与行内元素"><a href="#1-3-块元素与行内元素" class="headerlink" title="1.3 块元素与行内元素"></a>1.3 块元素与行内元素</h2><h3 id="1-3-1-块元素（block-element）"><a href="#1-3-1-块元素（block-element）" class="headerlink" title="1.3.1 块元素（block element）"></a>1.3.1 块元素（block element）</h3><ul>
<li>在页面中独占一行的元素</li>
<li>块元素基本上什么都能放</li>
</ul>
<h3 id="1-3-2-行内元素（inline-element）"><a href="#1-3-2-行内元素（inline-element）" class="headerlink" title="1.3.2 行内元素（inline element）"></a>1.3.2 行内元素（inline element）</h3><ul>
<li>在页面中不会独占一行的元素，且该元素的宽高由其内容撑开</li>
<li>行内元素主要用来包裹文字</li>
<li>一般情况下会在块元素中放行内元素，而不会在行内元素中放块元素</li>
<li>浏览器对网页进行解析时，会自动对网页中不符合规范的内容进行修正</li>
</ul>
<h1 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h1><h2 id="2-1-网页组成部分"><a href="#2-1-网页组成部分" class="headerlink" title="2.1 网页组成部分"></a>2.1 网页组成部分</h2><ul>
<li>结构（HTML）</li>
<li>表现（CSS）</li>
<li>行为（JS）</li>
</ul>
<h2 id="2-2-CSS介绍"><a href="#2-2-CSS介绍" class="headerlink" title="2.2 CSS介绍"></a>2.2 CSS介绍</h2><ul>
<li>网页实际上是一个多层的结构，通过CSS可以分别为网页的每一层来设置样式</li>
<li>而最终我们能看到的知识网页的最上边一层</li>
<li>总之一句话，CSS用来设置网页中元素的样式</li>
</ul>
<h2 id="2-3-使用方式"><a href="#2-3-使用方式" class="headerlink" title="2.3 使用方式"></a>2.3 使用方式</h2><h3 id="2-3-1-第一种：内联样式，行内样式"><a href="#2-3-1-第一种：内联样式，行内样式" class="headerlink" title="2.3.1 第一种：内联样式，行内样式"></a>2.3.1 第一种：内联样式，行内样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在标签内部通过style属性来设置元素的样式</span></span><br><span class="line"><span class="comment">问题：</span></span><br><span class="line"><span class="comment">    1. 使用内联样式，样式只能对一个标签生效</span></span><br><span class="line"><span class="comment">    2. 如果希望影响到多个元素必须在每个元素中都复制一遍</span></span><br><span class="line"><span class="comment">    3. 并且当样式发生变化时，我们必须要一个一个的修改，非常的不方便</span></span><br><span class="line"><span class="comment">注意：开发时绝对不要使用内联样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 20px;&quot;</span>&gt;</span>少小离家老大回，乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-第二种：内部样式表"><a href="#2-3-2-第二种：内部样式表" class="headerlink" title="2.3.2 第二种：内部样式表"></a>2.3.2 第二种：内部样式表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    第二种方式（内部样式表）</span></span><br><span class="line"><span class="comment">        将样式编写到head钟的style标签里</span></span><br><span class="line"><span class="comment">            然后通过CSS的选择器来选中元素并为其设置各种样式</span></span><br><span class="line"><span class="comment">            可以同时为多个标签设置样式，并且修改时只需要修改一处即可全部应用</span></span><br><span class="line"><span class="comment">        内部样式表更加方便对样式进行复用</span></span><br><span class="line"><span class="comment">        问题：</span></span><br><span class="line"><span class="comment">            我们的内部样式表只能对一个网页起作用</span></span><br><span class="line"><span class="comment">                它里面的样式不能跨页面进行复用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">         <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">         <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h3 id="2-3-3-第三种：外部样式表（推荐）"><a href="#2-3-3-第三种：外部样式表（推荐）" class="headerlink" title="2.3.3 第三种：外部样式表（推荐）"></a>2.3.3 第三种：外部样式表（推荐）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    第三种方式（外部样式表）推荐方式</span></span><br><span class="line"><span class="comment">        可以将CSS样式编写到一个外部的CSS文件中</span></span><br><span class="line"><span class="comment">            然后通过link标签来引入外部的CSS文件</span></span><br><span class="line"><span class="comment">        外部样式表需要通过link标签进行引入</span></span><br><span class="line"><span class="comment">            意味着只要想使用这些样式的网页都可以对其进行引用</span></span><br><span class="line"><span class="comment">            使样式可以在不同页面之间进行复用</span></span><br><span class="line"><span class="comment">        将样式编写到外部的CSS文件中，可以最大限度的使用到浏览器的缓存机制</span></span><br><span class="line"><span class="comment">            从而加快网页的加载速度，提高用户的体验</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-基本语法"><a href="#2-4-基本语法" class="headerlink" title="2.4 基本语法"></a>2.4 基本语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">    样式:样式值;</span><br><span class="line">    样式:样式值;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-5-样式的继承"><a href="#2-5-样式的继承" class="headerlink" title="2.5 样式的继承"></a>2.5 样式的继承</h2><h3 id="2-5-1-概念"><a href="#2-5-1-概念" class="headerlink" title="2.5.1 概念"></a>2.5.1 概念</h3><ul>
<li>样式的继承：我们为一个元素设置的样式同时也会应用到它的后代元素上</li>
<li>继承是发生在祖先和后代之间的</li>
</ul>
<h3 id="2-5-2-作用"><a href="#2-5-2-作用" class="headerlink" title="2.5.2 作用"></a>2.5.2 作用</h3><ul>
<li>继承的设计是为了方便我们的开发，</li>
<li>利用继承我们可以将一些通用的样式统一设置到共同的祖先元素上，</li>
<li>这样只需要设置一次即可让所有的元素都具有该样式</li>
</ul>
<h3 id="2-5-3-注意"><a href="#2-5-3-注意" class="headerlink" title="2.5.3 注意"></a>2.5.3 注意</h3><ul>
<li>注意：并不是所有的样式都会被继承</li>
<li>比如    背景相关的，布局相关等的这些样式都不会被继承</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*p元素设置的颜色也会作用到子元素span上*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    我是一个p元素</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素中的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素外的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、CSS选择器"><a href="#三、CSS选择器" class="headerlink" title="三、CSS选择器"></a>三、CSS选择器</h1><h2 id="3-1-基本选择器"><a href="#3-1-基本选择器" class="headerlink" title="3.1 基本选择器"></a>3.1 基本选择器</h2><ul>
<li>元素选择器：标签名{}</li>
<li>id选择器：#id值{}</li>
<li>类选择器：.类名{}</li>
<li>通配选择器：*{}</li>
</ul>
<h2 id="3-2-复合选择器"><a href="#3-2-复合选择器" class="headerlink" title="3.2 复合选择器"></a>3.2 复合选择器</h2><h3 id="3-2-1-交集选择器"><a href="#3-2-1-交集选择器" class="headerlink" title="3.2.1 交集选择器"></a>3.2.1 交集选择器</h3><ul>
<li>作用：选中同时符合多个条件的元素</li>
<li>语法：选择器1 选择器2 … 选择器n{}</li>
<li>注意点：<ul>
<li>交集选择器中如果有元素选择器， 必须使用元素选择器开头</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 要求带有class为red的div */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 要求同时具有a b c三个类 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.c</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-并集选择器"><a href="#3-2-2-并集选择器" class="headerlink" title="3.2.2 并集选择器"></a>3.2.2 并集选择器</h3><ul>
<li>作用：同时选择多个选择器对应的元素</li>
<li>语法：选择器1,选择器2,…,选择器n{}<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span>, <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: blueviolet;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-3-关系选择器"><a href="#3-3-关系选择器" class="headerlink" title="3.3 关系选择器"></a>3.3 关系选择器</h2><h3 id="3-3-1-元素关系"><a href="#3-3-1-元素关系" class="headerlink" title="3.3.1 元素关系"></a>3.3.1 元素关系</h3><ul>
<li>父元素：直接包含子元素的元素叫父元素</li>
<li>子元素：直接被父元素包含的元素是子元素</li>
<li>祖先元素：直接或简介包含后代元素的元素叫做祖先元素<ul>
<li>一个元素的父元素也是它的祖先元素</li>
</ul>
</li>
<li>后代元素：直接或间接被祖先元素包含的元素<ul>
<li>子元素也是后代元素</li>
</ul>
</li>
<li>兄弟元素：拥有相同父元素的元素是兄弟元素</li>
</ul>
<h3 id="3-3-2-子元素选择器"><a href="#3-3-2-子元素选择器" class="headerlink" title="3.3.2 子元素选择器"></a>3.3.2 子元素选择器</h3><ul>
<li>作用：选中指定父元素的指定子元素</li>
<li>语法：父元素&gt;子元素<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-3-后代选择器"><a href="#3-3-3-后代选择器" class="headerlink" title="3.3.3 后代选择器"></a>3.3.3 后代选择器</h3><ul>
<li>作用：选中指定元素内的指定后代元素</li>
<li>语法：祖先 后代<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">     <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-4-兄弟选择器：选择下一个兄弟"><a href="#3-3-4-兄弟选择器：选择下一个兄弟" class="headerlink" title="3.3.4 兄弟选择器：选择下一个兄弟"></a>3.3.4 兄弟选择器：选择下一个兄弟</h3><ul>
<li>语法：前一个 + 下一个</li>
<li>只对下一个兄弟起作用，其他兄弟不起作用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> + <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-5-兄弟选择器：选择下面所有兄弟"><a href="#3-3-5-兄弟选择器：选择下面所有兄弟" class="headerlink" title="3.3.5 兄弟选择器：选择下面所有兄弟"></a>3.3.5 兄弟选择器：选择下面所有兄弟</h3><ul>
<li>语法：前一个 ~ 下一个</li>
<li>只对下面所有的兄弟起作用，前面的兄弟不起作用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> ~ <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-4-属性选择器"><a href="#3-4-属性选择器" class="headerlink" title="3.4 属性选择器"></a>3.4 属性选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名]    选择含有指定属性的元素*/</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名=属性值] 选择含有指定属性和属性值的元素*/</span></span><br><span class="line"><span class="xml">p[title=abc]&#123;</span></span><br><span class="line"><span class="xml">    color: orange;</span></span><br><span class="line"><span class="xml">&#125; </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名^=属性值]    选择属性值以指定值开头的元素*/</span></span><br><span class="line"><span class="xml">p[title^=abc]&#123;</span></span><br><span class="line"><span class="xml">    color: orange;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名$=属性值]    选择属性值以指定值结尾的元素*/</span></span><br><span class="line"><span class="xml">p[title$=abc]&#123;</span></span><br><span class="line"><span class="xml">    color: orange;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名*=属性值]    选择属性值中含有某值的元素*/</span></span><br><span class="line"><span class="xml">p[title*=e]&#123;</span></span><br><span class="line"><span class="xml">    color: orange;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- title表示鼠标悬停时显示的文字 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>少小离家老大回<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;abcdef&quot;</span>&gt;</span>乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;helloabc&quot;</span>&gt;</span>乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>儿童相见不相识<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>秋水共长天一色<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 落霞与孤鹜齐飞<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-5-伪类选择器"><a href="#3-5-伪类选择器" class="headerlink" title="3.5 伪类选择器"></a>3.5 伪类选择器</h2><h3 id="3-5-1-概念"><a href="#3-5-1-概念" class="headerlink" title="3.5.1 概念"></a>3.5.1 概念</h3><ul>
<li>伪类（不存在的类，特殊的类）</li>
<li>伪类用来描述一个元素的特殊状态</li>
<li>比如：第一个子元素，被点击的元素、鼠标移入的元素</li>
</ul>
<h3 id="3-5-2-常用的伪类选择器"><a href="#3-5-2-常用的伪类选择器" class="headerlink" title="3.5.2 常用的伪类选择器"></a>3.5.2 常用的伪类选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-child    第一个子元素</span><br><span class="line"><span class="selector-pseudo">:last-child</span>     最后一个子元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span>()    选中第n个子元素</span><br><span class="line">特殊值：</span><br><span class="line">        n   第n个 n的范围<span class="number">0</span>到正无穷</span><br><span class="line">        <span class="number">2</span>n 或 even  选中偶数位的元素</span><br><span class="line">        <span class="number">2</span>n+<span class="number">1</span> 或 odd     都表示奇数位元素</span><br><span class="line">以上这些伪类都是根据所有子元素进行排序</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:first</span>-of-type </span><br><span class="line"><span class="selector-pseudo">:last-of-type</span></span><br><span class="line"><span class="selector-pseudo">:nth-of-type</span>()</span><br><span class="line">这几个伪类的功能和上述的类似，不同点是他们是在同类型元素中进行排序</span><br><span class="line">                </span><br><span class="line"><span class="selector-pseudo">:not</span>()  否定伪类</span><br><span class="line">        将符合条件的元素从选择器中去除</span><br></pre></td></tr></table></figure>
<h3 id="3-5-3-使用"><a href="#3-5-3-使用" class="headerlink" title="3.5.3 使用"></a>3.5.3 使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 选中所有元素*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n)&#123;  </span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125; </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 选中偶数位元素元素*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n)&#123;  </span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125; </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 如果要选择li中的第三个需要用:nth-of-type(3) */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>))&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &lt;span&gt;我是span&lt;/span&gt;   </span></span><br><span class="line"><span class="comment">        加上这句话，first-child就不能选中第一个li，</span></span><br><span class="line"><span class="comment">        可以使用first-of-type</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第五个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-5-4-a元素的伪类"><a href="#3-5-4-a元素的伪类" class="headerlink" title="3.5.4 a元素的伪类"></a>3.5.4 a元素的伪类</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    :link   用来表示没访问过的链接（正常的链接）</span></span></span><br><span class="line"><span class="comment"><span class="css"> */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    :visited    用来表示访问过的链接</span></span></span><br><span class="line"><span class="comment"><span class="css">    </span></span></span><br><span class="line"><span class="comment"><span class="css">    由于隐私的原因，所以visited这个伪类只能修改链接的颜色</span></span></span><br><span class="line"><span class="comment"><span class="css">*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    :hover  用来表示鼠标移入的状态</span></span></span><br><span class="line"><span class="comment"><span class="css">*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    :active 用来表示鼠标点击的状态</span></span></span><br><span class="line"><span class="comment"><span class="css">*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* hover和active    别的标签也能使用 */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1. 没有访问过的链接</span></span><br><span class="line"><span class="comment">    2. 访问过的链接</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-6-伪元素选择器"><a href="#3-6-伪元素选择器" class="headerlink" title="3.6 伪元素选择器"></a>3.6 伪元素选择器</h2><h3 id="3-6-1-概念"><a href="#3-6-1-概念" class="headerlink" title="3.6.1 概念"></a>3.6.1 概念</h3><ul>
<li>表示页面中一些并不真实的存在的元素（特殊的位置）</li>
<li>位元素使用  ::  开头</li>
<li>::first-letter  表示第一个字母</li>
<li>::first-line    表示第一行</li>
<li>::selection 表示鼠标拖动选中的内容</li>
<li>::before    表示元素的开始位置</li>
<li>::after     表示元素结尾的位置<ul>
<li>before和after必须结合content属性来使用</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&#x27;abc&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&#x27;123&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello How are you<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Consequuntur necessitatibus eaque cupiditate! Eum fuga eos nam placeat magnam libero quia suscipit? Provident natus iste perspiciatis voluptas animi impedit sint? Eius.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-7-选择器的权重"><a href="#3-7-选择器的权重" class="headerlink" title="3.7 选择器的权重"></a>3.7 选择器的权重</h2><h3 id="3-7-1-样式的冲突"><a href="#3-7-1-样式的冲突" class="headerlink" title="3.7.1 样式的冲突"></a>3.7.1 样式的冲突</h3><ul>
<li>当我们通过不同的选择器，选中一个相同的元素，并且为相同的样式设置不同的值，此时就发生了样式的冲突</li>
<li>发生样式冲突时，应用哪个样式由选择器的优先级（权重）决定</li>
</ul>
<h3 id="3-7-2-权重"><a href="#3-7-2-权重" class="headerlink" title="3.7.2 权重"></a>3.7.2 权重</h3><div class="table-container">
<table>
<thead>
<tr>
<th>样式</th>
<th>权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>内联样式</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>id选择器</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>类和伪类选择器</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>元素选择器</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>通配选择器</td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>继承的样式</td>
<td>没有优先级</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-7-3-注意"><a href="#3-7-3-注意" class="headerlink" title="3.7.3 注意"></a>3.7.3 注意</h3><ul>
<li>比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，则越优先显示</li>
<li>分组选择器是单独计算<ul>
<li>选择器的累加不会超过其最大的数量级，类选择器再高也不会超过id选择器</li>
<li>如果优先级计算后相同，则优先使用靠下的样式</li>
</ul>
</li>
<li>可以再某一个样式的后边添加!important，则此时该样式获取到最高的优先级，甚至超过内联样式<ul>
<li>注意：在开发中一定要慎用</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">*&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 因为span是继承div的，没有优先级，所有span使用的是通配中的样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>我是一个div <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div中的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、CSS单位与颜色"><a href="#四、CSS单位与颜色" class="headerlink" title="四、CSS单位与颜色"></a>四、CSS单位与颜色</h1><h2 id="4-1-长度单位"><a href="#4-1-长度单位" class="headerlink" title="4.1 长度单位"></a>4.1 长度单位</h2><h3 id="4-1-1-像素与百分比"><a href="#4-1-1-像素与百分比" class="headerlink" title="4.1.1 像素与百分比"></a>4.1.1 像素与百分比</h3><ul>
<li>像素：同样的200px在不同的设备下显示效果不一样</li>
<li>百分比：也可以将属性值设置为相对于其父元素属性的百分比<br>；可以使子元素跟随父元素的改变而改变</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-1-2-em和rem"><a href="#4-1-2-em和rem" class="headerlink" title="4.1.2 em和rem"></a>4.1.2 em和rem</h3><ul>
<li>em：em是相对于元素的字体大小来计算的；<ul>
<li>1em=1font-size</li>
<li>em会根据字体大小的改变而改变</li>
</ul>
</li>
<li>rem：rem是相对于根元素的字体大小来计算</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">10rem</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">10rem</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-1-3-颜色单位"><a href="#4-1-3-颜色单位" class="headerlink" title="4.1.3 颜色单位"></a>4.1.3 颜色单位</h2><ul>
<li>RGB值：RGB通过三种颜色的不同浓度来调配出不同的颜色<ul>
<li>语法:rgb(红色,绿色,蓝色)</li>
</ul>
</li>
<li>RGBA：A表示透明度<ul>
<li>值为1表示不透明</li>
<li>值为0表示透明</li>
<li>值为.5表示半透明</li>
</ul>
</li>
<li>十六进制RGB值：<ul>
<li>语法：#红色绿色蓝色</li>
<li>如：#FFFFFF     表示白色</li>
</ul>
</li>
<li>HSL/HSLA值：<ul>
<li>H：色相 （0 - 360）</li>
<li>S：饱和度（0 - 100%）</li>
<li>L：亮度（0 - 100%）</li>
</ul>
</li>
</ul>
<h1 id="五、CSS盒子模型"><a href="#五、CSS盒子模型" class="headerlink" title="五、CSS盒子模型"></a>五、CSS盒子模型</h1><h2 id="5-1-文档流（normal-flow）"><a href="#5-1-文档流（normal-flow）" class="headerlink" title="5.1 文档流（normal flow）"></a>5.1 文档流（normal flow）</h2><p>网页是一个多层的结构<br>通过css可以分别为每一层来设置样式<br>作为用户只能看到最顶上一层<br>这些层中，最底下的一层称为文档流，文档流是网页的基础</p>
<h3 id="5-1-2-元素的状态"><a href="#5-1-2-元素的状态" class="headerlink" title="5.1.2 元素的状态"></a>5.1.2 元素的状态</h3><p>在文档流中<br>不在文档流中（脱离文档流）</p>
<h3 id="5-1-3-元素在文档流的特点"><a href="#5-1-3-元素在文档流的特点" class="headerlink" title="5.1.3 元素在文档流的特点"></a>5.1.3 元素在文档流的特点</h3><ul>
<li>块元素：<ul>
<li>块元素会在页面中独占一行（自上向下垂直排列）</li>
<li>默认宽度是父元素的全部（会把父元素撑满）</li>
<li>默认高度是被内容撑开（子元素）</li>
</ul>
</li>
<li>行内元素：<ul>
<li>行内元素不会独占页面的一行，只占自身的大小</li>
<li>行内元素在页面中自左向右水平排列，如果一行之中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（书写习惯一致）</li>
<li>行内元素的默认宽度和高度都是被内容撑开</li>
</ul>
</li>
</ul>
<h2 id="5-2-盒模型"><a href="#5-2-盒模型" class="headerlink" title="5.2 盒模型"></a>5.2 盒模型</h2><h3 id="5-2-1-概念"><a href="#5-2-1-概念" class="headerlink" title="5.2.1 概念"></a>5.2.1 概念</h3><ul>
<li>CSS将页面中的所有元素都设置为了一个矩形的盒子</li>
<li>将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置</li>
<li>每一个盒子都由以下几个部分组成：<ul>
<li>内容区（content）</li>
<li>内边距（padding）</li>
<li>边框（border）</li>
<li>外边距（margin）</li>
</ul>
</li>
</ul>
<img src="/2022/03/01/H5C3%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" class="" title="image">
<h3 id="5-2-2-内容区"><a href="#5-2-2-内容区" class="headerlink" title="5.2.2 内容区"></a>5.2.2 内容区</h3><ul>
<li>内容区（content），元素中的所有的子元素和文本内容都在内容区中排列</li>
<li>内容区的大小由width和height两个属性来设置<ul>
<li>width   设置内容去的宽度</li>
<li>height  设置内容区的高度</li>
</ul>
</li>
</ul>
<h3 id="5-2-3-边框border"><a href="#5-2-3-边框border" class="headerlink" title="5.2.3 边框border"></a>5.2.3 边框border</h3><ul>
<li>边框（border），边框属于盒子边缘，边框里面属于盒子内部，出了边框都是盒子的外部</li>
<li>边框的大小会影响到整个盒子的大小</li>
<li>要设置边框，需要至少设置三个样式：<ul>
<li>边框的宽度：border-widht</li>
<li>边框的颜色：border-color</li>
<li>边框的风格：border-style</li>
</ul>
</li>
<li>属性值设置：见附录</li>
</ul>
<h3 id="5-2-4-内边距padding"><a href="#5-2-4-内边距padding" class="headerlink" title="5.2.4 内边距padding"></a>5.2.4 内边距padding</h3><ul>
<li>内边距：内容区和边框之间的距离是内边距</li>
<li>一共有四个方向的内边距：<ul>
<li>padding-top</li>
<li>padding-right</li>
<li>padding-bottom</li>
<li>padding-left</li>
</ul>
</li>
<li>内边距的设置会影响到盒子的大小</li>
<li>背景颜色会延伸到内边距上</li>
<li>一共盒子的可见框的大小，由内容区、内边距 和 边框共同决定</li>
<li>padding 内边距的简写属性，可以同时指定四个方向的内边距，规则和border-width一样</li>
</ul>
<h3 id="5-2-5-外边距margin"><a href="#5-2-5-外边距margin" class="headerlink" title="5.2.5 外边距margin"></a>5.2.5 外边距margin</h3><ul>
<li>外边距不会影响盒子可见框的大小</li>
<li>但是外边距会影响盒子的位置</li>
<li>一共有四个方向的外边距：<ul>
<li>margin-top      上外边距，设置一个正值，元素会向下移动</li>
<li>margin-right    默认情况下设置margin-right不会产生任何效果</li>
<li>margin-bottom   下外边距，设置一个正值，下面的元素会向下移动</li>
<li>margin-left     上外边距，设置一个正值，元素会向右移动</li>
</ul>
</li>
<li>margin也可以设置负值，如果是负值则元素会向相反的方向移动</li>
<li>元素在页面中是按照自左向右顺序排列的</li>
<li>所有默认情况下如果我们设置的左和上外边距则会移动元素自身；而设置下和右外边距会移动其他元素</li>
<li>margin的简写属性：margin  可以同时设置四个方向的外边距，用法和padding一样</li>
<li>margin会影响到盒子实际占用空间</li>
</ul>
<h2 id="5-3-盒子的尺寸"><a href="#5-3-盒子的尺寸" class="headerlink" title="5.3 盒子的尺寸"></a>5.3 盒子的尺寸</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--box-sizing  用来设置盒子尺寸的计算方式（设置width和height的作用）</span></span><br><span class="line"><span class="comment">    可选值</span></span><br><span class="line"><span class="comment">        content-box 默认值，宽度和高度用来设置内容区的大小</span></span><br><span class="line"><span class="comment">        bordor-box  宽度和高度用来设置整个盒子可见框的大小</span></span><br><span class="line"><span class="comment">            width 和 height 指的是内容区 和 内边距 和边框的总大小--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">                默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">                box-sizing  用来设置盒子尺寸的计算方式（设置width和height的作用）</span></span></span><br><span class="line"><span class="comment"><span class="css">                    可选值</span></span></span><br><span class="line"><span class="comment"><span class="css">                        content-box 默认值，宽度和高度用来设置内容区的大小</span></span></span><br><span class="line"><span class="comment"><span class="css">                        bordor-box  宽度和高度用来设置整个盒子可见框的大小</span></span></span><br><span class="line"><span class="comment"><span class="css">                            width 和 height 指的是内容区 和 内边距 和边框的总大小</span></span></span><br><span class="line"><span class="comment"><span class="css">             */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="六、布局"><a href="#六、布局" class="headerlink" title="六、布局"></a>六、布局</h1><h2 id="6-1-水平布局"><a href="#6-1-水平布局" class="headerlink" title="6.1 水平布局"></a>6.1 水平布局</h2><ul>
<li>元素在其父元素中水平方向的位置由以下几个属性共同决定<ul>
<li>margin-left</li>
<li>border-left</li>
<li>padding-left</li>
<li>width</li>
<li>padding-right</li>
<li>border-right</li>
<li>margin-right</li>
</ul>
</li>
<li>一个元素在其父元素中，水平布局必须满足以下的等式<ul>
<li>margin-left+border-left+padding-left+width+padding-right+border-right+margin-right等于其父元素内容区的宽度</li>
</ul>
</li>
</ul>
<h3 id="6-1-2-过度约束"><a href="#6-1-2-过度约束" class="headerlink" title="6.1.2 过度约束"></a>6.1.2 过度约束</h3><ul>
<li>0 + 0 + 0 + 200 + 0 + 0 + 0 = 800</li>
<li>0 + 0 + 0 + 200 + 0 + 0 + 600 = 800</li>
<li>以上等式必须满足，如果相加结果使等式不成立，则称为过度约束，则等式会自动调整</li>
<li>调整的情况：<ul>
<li>如果这七个值中没有为 auto 的情况，则浏览器会自动调整margin-right值，以使等式满足</li>
</ul>
</li>
</ul>
<h3 id="6-1-3-可以设置为auto的值"><a href="#6-1-3-可以设置为auto的值" class="headerlink" title="6.1.3 可以设置为auto的值"></a>6.1.3 可以设置为auto的值</h3><ul>
<li>width</li>
<li>margin-left</li>
<li>margin-right</li>
<li>如果某个值为auto，会自动调整为auto的那个值以使等式成立</li>
<li>比如：0 + 0 + 0 + auto + 0 + 0 + 0 = 800，会让auto为800</li>
<li>如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0</li>
<li>如果将三个值都设置为auto，则外边距都是0，宽度最大</li>
</ul>
<h3 id="6-1-4-元素居中效果"><a href="#6-1-4-元素居中效果" class="headerlink" title="6.1.4 元素居中效果"></a>6.1.4 元素居中效果</h3><ul>
<li>如果将两个外边距设置为auto，宽度值固定，则会将外边距设置为相同的值</li>
<li>元素居中效果：auto + 0 + 0 + 200 + 0 + 0 + auto = 800</li>
<li>所以我们经常利用这个特点来使一个元素在其父元素中水平居中</li>
<li>示例：<ul>
<li>width:xxx px;</li>
<li>margin:0 auto;</li>
</ul>
</li>
<li>如果width超过内容区，则会设置margin-right为负值，以使得等式成立<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#dfa</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="6-2-垂直布局"><a href="#6-2-垂直布局" class="headerlink" title="6.2 垂直布局"></a>6.2 垂直布局</h2><ul>
<li>默认情况下父元素的高度被内容撑开</li>
<li>子元素是在父元素的内容区中排列的</li>
<li>如果子元素的大小超过了父元素，则子元素会从父元素中溢出</li>
<li>使用 overflow 属性来设置父元素如何处理溢出的子元素</li>
<li>overflow属性可选值<ul>
<li>visible 默认值，子元素会从父元素中溢出，在父元素外部的位置显示</li>
<li>hidden  溢出的内容将会被裁剪不会显示</li>
<li>scroll  生成两个滚动条，通过滚动条来查看完整的内容</li>
<li>auto    根据需要生成滚动条</li>
</ul>
</li>
<li>overflow-x：      设置水平方向</li>
<li>overflow-y：      设置垂直方向</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* height: 100px; */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">overflow</span>: scroll;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="七、外边距的重叠"><a href="#七、外边距的重叠" class="headerlink" title="七、外边距的重叠"></a>七、外边距的重叠</h1><h2 id="7-1-概念"><a href="#7-1-概念" class="headerlink" title="7.1 概念"></a>7.1 概念</h2><ul>
<li>相邻的垂直方向外边距会发生重叠现象</li>
</ul>
<h2 id="7-2-兄弟元素"><a href="#7-2-兄弟元素" class="headerlink" title="7.2 兄弟元素"></a>7.2 兄弟元素</h2><ul>
<li>兄弟元素间的相邻垂直外边距会取两者之间的较大值（两者都是正值）</li>
<li>特殊情况：<ul>
<li>如果相邻的外边距一正一负，则取两者的和</li>
<li>如果相邻的外边距都是负值，则取两者中绝对值较大的</li>
</ul>
</li>
</ul>
<h2 id="7-3-父子元素"><a href="#7-3-父子元素" class="headerlink" title="7.3 父子元素"></a>7.3 父子元素</h2><ul>
<li>父子元素间相邻外边距，子元素的会传递给父元素（上外边距）</li>
<li>父子外边距的折叠会影响到页面的布局，必须要进行处理</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>,<span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 设置一个下外边距 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 设置一个上外边距 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* padding-top: 100px; */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border-top</span>: <span class="number">1px</span> <span class="number">#bfa</span> solid;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: <span class="number">99px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="八、行内元素的盒模型"><a href="#八、行内元素的盒模型" class="headerlink" title="八、行内元素的盒模型"></a>八、行内元素的盒模型</h1><h2 id="8-1-特点"><a href="#8-1-特点" class="headerlink" title="8.1 特点"></a>8.1 特点</h2><ul>
<li>行内元素不支持设置宽度和高度</li>
<li>行内元素可以设置padding，但是垂直方向的padding不会影响页面的布局</li>
<li>行内元素可以设置border，垂直方向的border不会影响页面的布局</li>
<li>行内元素可以设置margin，垂直方向的margin不会影响布局</li>
</ul>
<h2 id="8-2-display"><a href="#8-2-display" class="headerlink" title="8.2 display"></a>8.2 display</h2><ul>
<li>display：用来设置元素显示的类型</li>
<li>属性可选值：<ul>
<li>inline ： 将元素设置为行内元素</li>
<li>block ：  将元素设置为块元素</li>
<li>inline-block   ： 将元素设置为行内块元素；行内块，既可以设置宽度和高度又不会独占一行</li>
<li>table ：  将元素设置为表格</li>
<li>none  ：  元素不在页面中显示</li>
</ul>
</li>
</ul>
<h2 id="8-3-visibility"><a href="#8-3-visibility" class="headerlink" title="8.3 visibility"></a>8.3 visibility</h2><ul>
<li>visibility ： 用来设置元素的显示状态</li>
<li>属性可选值：<ul>
<li>visible ： 默认值，元素在页面中正常显示</li>
<li>hidden ： 元素在页面中隐藏    不显示，但是依然占据页面中的位置</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.s1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    <span class="comment">/* width: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">     height: 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">     <span class="comment">/* padding: 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">     <span class="comment">/* border: 100px solid red; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">     <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* display: inline; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* display: block; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* display: inline-block; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* display: none; */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="九、默认样式"><a href="#九、默认样式" class="headerlink" title="九、默认样式"></a>九、默认样式</h1><h2 id="9-1-概念"><a href="#9-1-概念" class="headerlink" title="9.1 概念"></a>9.1 概念</h2><ul>
<li>通常情况下，浏览器都会为元素设置一些默认样式</li>
<li>默认样式的存在会影响到页面的布局，通常情况下编写网页时必须要去除掉浏览器的默认样式（pc端的页面）</li>
</ul>
<h2 id="9-2-重置样式表reset-css"><a href="#9-2-重置样式表reset-css" class="headerlink" title="9.2 重置样式表reset.css"></a>9.2 重置样式表reset.css</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,pre,hr,<span class="selector-tag">figure</span>,<span class="selector-tag">table</span>,<span class="selector-tag">caption</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">menu</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">header</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">section</span>,<span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">hgroup</span>,<span class="selector-tag">address</span>,<span class="selector-tag">figure</span>,<span class="selector-tag">figcaption</span>,<span class="selector-tag">menu</span>,<span class="selector-tag">details</span>&#123;<span class="attribute">display</span>:block;&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">caption</span>,<span class="selector-tag">th</span>&#123;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">img</span>,<span class="selector-tag">iframe</span>,<span class="selector-tag">abbr</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">i</span>,<span class="selector-tag">cite</span>,<span class="selector-tag">em</span>,<span class="selector-tag">var</span>,<span class="selector-tag">address</span>,<span class="selector-tag">dfn</span>&#123;<span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"><span class="selector-attr">[hidefocus]</span>,<span class="selector-tag">summary</span>&#123;<span class="attribute">outline</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,small&#123;<span class="attribute">font-size</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-tag">sup</span>,sub&#123;<span class="attribute">font-size</span>:<span class="number">83%</span>;&#125;</span><br><span class="line">pre,<span class="selector-tag">code</span>,<span class="selector-tag">kbd</span>,<span class="selector-tag">samp</span>&#123;<span class="attribute">font-family</span>:inherit;&#125;</span><br><span class="line"><span class="selector-tag">q</span>:before,q:after&#123;content:none;&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;<span class="attribute">overflow</span>:auto;<span class="attribute">resize</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">label</span>,<span class="selector-tag">summary</span>&#123;<span class="attribute">cursor</span><span class="selector-pseudo">:default</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>&#123;<span class="attribute">cursor</span>:pointer;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">em</span>,<span class="selector-tag">strong</span>,<span class="selector-tag">b</span>&#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br><span class="line"><span class="selector-tag">del</span>,<span class="selector-tag">ins</span>,u,s,<span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,select,keygen,<span class="selector-tag">legend</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.14</span> arial,\<span class="number">5</span>b8b\<span class="number">4</span>f53;<span class="attribute">color</span>:<span class="number">#333</span>;<span class="attribute">outline</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#333</span>;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>H5C3</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础大全</title>
    <url>/2022/03/26/redis%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、安装与配置"><a href="#一、安装与配置" class="headerlink" title="一、安装与配置"></a>一、安装与配置</h1><ol>
<li>安装gcc：<strong>yum install gcc -y</strong></li>
<li>下载redis-x.x.x.tar.gz，并解压：<strong>tar -zxvf redis-x.x.x.tar.gz</strong></li>
<li>进入redis解压目录，执行命令<strong>make和make install</strong>，不报错就表示安装成功，默认安装位置在<strong>/usr/local/bin</strong>目录下</li>
<li>开启redis后台启动，将<strong>redis解压目录</strong>下的<strong>redis.conf</strong>文件复制到其他位置，比如/etc目录下</li>
<li>修改<strong>redis.conf</strong>文件，找到<strong>daemonize</strong>字段，将其后的值no改为<strong>yes</strong>后，保存退出</li>
<li>执行命令<strong>redis-server /etc/redis.conf</strong>，即可后台开启redis</li>
<li>使用redis客户端访问redis服务，执行命令<strong>redis-cli</strong>进入redis客户端</li>
</ol>
<h1 id="二、Redis语法"><a href="#二、Redis语法" class="headerlink" title="二、Redis语法"></a>二、Redis语法</h1><h2 id="2-1-数据类型"><a href="#2-1-数据类型" class="headerlink" title="2.1 数据类型"></a>2.1 数据类型</h2><ul>
<li>字符串String</li>
<li>列表List</li>
<li>集合Set</li>
<li>哈希Hash</li>
<li>有序集合Zset</li>
</ul>
<h2 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h2><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ping</td>
<td>查看服务是否正常运行</td>
</tr>
<tr>
<td>dbsize</td>
<td>查看当前数据库中key的数目（返回值为integer）</td>
</tr>
<tr>
<td>select 0</td>
<td>切换数据库，默认使用的是db0<br/>Redis默认操作16个数据库，序号为0~15</td>
</tr>
<tr>
<td>flushdb</td>
<td>删除当前操作的数据库中的内容</td>
</tr>
<tr>
<td>flushall</td>
<td>删除所有的库中的数据</td>
</tr>
<tr>
<td>keys pattern</td>
<td>查找所有符合pattern的key，pattern可以使用统配符</td>
</tr>
<tr>
<td>exists [key…]</td>
<td>判断key是否存在，存在key返回1，不存在返回0；<br/>使用多个key，则执行后返回key的数量</td>
</tr>
<tr>
<td>expire [key] [seconds]</td>
<td>设置key的生存时间，超过时间key自动删除；单位是秒；<br/>设置成功返回1，其他情况是0</td>
</tr>
<tr>
<td>ttl [key]</td>
<td>以秒为单位，返回key的剩余生存时间；<br/>-1：表示没有设置 key 的生存时间， key 永不过期；<br/>-2 ：表示key 不存在；其他表示剩余时间</td>
</tr>
<tr>
<td>type [key]</td>
<td>查看key所存储的数据类型</td>
</tr>
<tr>
<td>del [key…]</td>
<td>删除指定的key，不存在的key进行忽略；<br/>返回值：数字，删除的key的数量</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-3-字符串String"><a href="#2-3-字符串String" class="headerlink" title="2.3 字符串String"></a>2.3 字符串String</h2><ul>
<li>虽然给某个key设置的值是数字，但key的类型仍然是字符串，数字是以字符串的形式存储的，增加和减小操作也是基于字符串的操作</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>set [key] [value]</td>
<td>将字符串值设置到key中；设置成功返回OK</td>
</tr>
<tr>
<td>get [key]</td>
<td>获取数据库中key的值；<br/>返回值：key对应的value值</td>
</tr>
<tr>
<td>incr [key]</td>
<td>将 key 中储存的数字值加 1<br/>如果 key 不存在，则创建 key 并初始化其值为 0 再执行incr 操作（只能对数字类型的数据操作）</td>
</tr>
<tr>
<td>decr [key]</td>
<td>与incr作用相反，是减1操作</td>
</tr>
<tr>
<td>append [key] [value]</td>
<td>字符串追加；<br/>如果 key 存在， 则将 value 追加到 key 原来旧值的末尾<br/>如果 key 不存在， 则将 key 设置值为 value；<br/>返回值：追加后的字符串总长度</td>
</tr>
<tr>
<td>strlen [key]</td>
<td>返回 key 所储存的字符串值的长度</td>
</tr>
<tr>
<td>getrange [key] [start] [end]</td>
<td>获取 key 中字符串值从 start 开始 到 end 结束 的子字符串,包括 start 和 end<br/>负数表示从字符串的末尾开始， -1 表示最后一个字符</td>
</tr>
<tr>
<td>setrange [key] [offset] [value]</td>
<td>用 value 覆盖（替换）key 的从offset位置开始存储的值<br/>不存在的 key ，在offset前填充空白字符<br/>返回值：修改后的字符串的长度</td>
</tr>
<tr>
<td>mset [key value…]</td>
<td>同时设置一个或多个 key-value<br/>返回值： OK</td>
</tr>
<tr>
<td>mget [key …]</td>
<td>获取所有(一个或多个)给定 key 的值<br/>包含所有 key 的列表</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-4-列表List"><a href="#2-4-列表List" class="headerlink" title="2.4 列表List"></a>2.4 列表List</h2><h3 id="2-4-1-原理"><a href="#2-4-1-原理" class="headerlink" title="2.4.1 原理"></a>2.4.1 原理</h3><ul>
<li>单键多值</li>
<li>底层：双向链表</li>
</ul>
<h3 id="2-4-2-命令"><a href="#2-4-2-命令" class="headerlink" title="2.4.2 命令"></a>2.4.2 命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>lpush/rpush key [value…]</td>
<td>从左/右侧将一个或多个值 value 插入到列表 key 的表头<br/>从左侧插入属于头插法，列表顺序为倒序<br/>返回值：数字，新列表的长度</td>
</tr>
<tr>
<td>lpop/rpop</td>
<td></td>
</tr>
<tr>
<td>rpoplpush</td>
<td></td>
</tr>
<tr>
<td>lrange [key] [start] [stop]</td>
<td>获取列表 key 中指定区间内的元素，0表示第一个元素，-1为最后一个元素<br/>返回值：指定区间的列表</td>
</tr>
<tr>
<td>lindex [key] [index]</td>
<td>获取列表 key 中下标为指定 index 的元素<br/>返回值：指定下标的元素；index 不在列表范围，返回 nil</td>
</tr>
<tr>
<td>llen [key]</td>
<td>获取列表 key 的长度<br/>返回值：数值，列表的长度； key 不存在返回 0</td>
</tr>
<tr>
<td>lrem [key] [count] [value]</td>
<td>移除列表中count个与value相等的元素<br/>count&gt;0从列表左侧开始移除；<br/>count<0从列表右侧开始移除；<br/>count=0移除表中所有与 value 相等的值</td>
</tr>
<tr>
<td>lset [key] [index] [value]</td>
<td>将列表 key 下标为 index 的元素的值设置为 value<br/>返回值：设置成功返回 ok ; key 不存在或者 index 超出范围返回错误信息</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-5-集合Set"><a href="#2-5-集合Set" class="headerlink" title="2.5 集合Set"></a>2.5 集合Set</h2><h3 id="2-5-1-原理"><a href="#2-5-1-原理" class="headerlink" title="2.5.1 原理"></a>2.5.1 原理</h3><ul>
<li>底层：hash表</li>
</ul>
<h3 id="2-5-2-命令"><a href="#2-5-2-命令" class="headerlink" title="2.5.2 命令"></a>2.5.2 命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>sadd [key] [member…]</td>
<td>将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略，不会再加入。<br/>返回值：加入到集合的新元素的个数。不包括被忽略的元素</td>
</tr>
<tr>
<td>smembers [key]</td>
<td>获取集合 key 中的所有成员元素，不存在的 key 视为空集合</td>
</tr>
<tr>
<td>sismember [key] [member]</td>
<td>判断 member 元素是否是集合 key 的成员返回值：member 是集合成员返回 1，其他返回 0</td>
</tr>
<tr>
<td>scard [key]</td>
<td>获取集合里面的元素个数<br/>返回值：数字，key 的元素个数。 其他情况返回 0</td>
</tr>
<tr>
<td>srem [key] [member…]</td>
<td>删除集合 key 中的一个或多个 member 元素，不存在的元素被忽略<br/>返回值：数字，成功删除的元素个数，不包括被忽略的元素。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-6-有序集合Zset"><a href="#2-6-有序集合Zset" class="headerlink" title="2.6 有序集合Zset"></a>2.6 有序集合Zset</h2><h3 id="2-6-1-原理"><a href="#2-6-1-原理" class="headerlink" title="2.6.1 原理"></a>2.6.1 原理</h3><h3 id="2-6-2-命令"><a href="#2-6-2-命令" class="headerlink" title="2.6.2 命令"></a>2.6.2 命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>zadd [key] [[score] member…]</td>
<td>将一个或多个 member 元素及其 score 值加入到有序集合 key 中，如果 member存在集合中，则更新值；score 可以是整数或浮点数<br/>返回值：数字，新添加的元素个数</td>
</tr>
<tr>
<td>zrange [key] [start] [stop] [WITHSCORES]</td>
<td>查询有序集合，指定区间的内的元素。集合成员按 score 值从小到大来排序<br/>WITHSCORES 选项让 score 和 value 一同返回</td>
</tr>
<tr>
<td>zrem [key] [member…]</td>
<td>删除有序集合 key 中的一个或多个成员，不存在的成员被忽略<br/>返回值：被成功删除的成员数量，不包括被忽略的成员。</td>
</tr>
<tr>
<td>zcard [key]</td>
<td>获取有序集 key 的元素成员的个数<br/>返回值：key 存在返回集合元素的个数， key 不存在，返回 0</td>
</tr>
</tbody>
</table>
</div>
<h1 id="三、Redis配置文件"><a href="#三、Redis配置文件" class="headerlink" title="三、Redis配置文件"></a>三、Redis配置文件</h1><h1 id="四、Redis发布和订阅"><a href="#四、Redis发布和订阅" class="headerlink" title="四、Redis发布和订阅"></a>四、Redis发布和订阅</h1><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h2><ul>
<li>发布和订阅是一种信息通信模式：发送者（pub）发送消息，订阅者（sub）接收信息</li>
<li>Redis客户端可以订阅任意数量的频道</li>
</ul>
<h2 id="4-2-示例"><a href="#4-2-示例" class="headerlink" title="4.2 示例"></a>4.2 示例</h2><ul>
<li>打开两个redis客户端，分别为A、B，A为发送者，B为订阅者</li>
<li>A执行命令<strong>public channel1 hello</strong>，表示向channel1频道发布信息hello<ul>
<li>命令执行后的返回值表示<strong>订阅者的数量</strong></li>
</ul>
</li>
<li>B执行命令<strong>SUBSCRIBE channel1</strong>，表示接收channel1的频道<ul>
<li>返回的是频道的信息列表</li>
</ul>
</li>
</ul>
<h1 id="五、其他数据类型"><a href="#五、其他数据类型" class="headerlink" title="五、其他数据类型"></a>五、其他数据类型</h1><h2 id="5-1-Bitmaps"><a href="#5-1-Bitmaps" class="headerlink" title="5.1 Bitmaps"></a>5.1 Bitmaps</h2><h3 id="5-1-1-原理"><a href="#5-1-1-原理" class="headerlink" title="5.1.1 原理"></a>5.1.1 原理</h3><ul>
<li><p>存储二进制的字符串，比如user=00001</p>
<ul>
<li>其中value为00001在Redis中依旧是以字符串的形式存储的</li>
<li>偏移量offset从0开始算起，这里value中1的偏移量就是4</li>
<li>想要得到以上的KV对，需要执行命令setbit user 4 1</li>
</ul>
</li>
<li><p>Bitmaps可以用来保存用户活跃度，Set集合也可以做，但两者有区别</p>
<ul>
<li>当用户活跃量特别大时，使用Bitmaps可以极大的减少存储空间</li>
<li>当用户活跃量比较小时，使用Set集合则比较合适</li>
</ul>
</li>
</ul>
<h3 id="5-1-2-命令"><a href="#5-1-2-命令" class="headerlink" title="5.1.2 命令"></a>5.1.2 命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>setbit [key] [offset] [value]</td>
<td>将key的offset位置的值设置为value</td>
</tr>
<tr>
<td>getbit [key] [offset]</td>
<td>获取key中offset位置的值</td>
</tr>
<tr>
<td>bitcount [key] [start,end]</td>
<td>不指定[start,end]时，统计key中value所有被设置为1的bit个数<br/>指定[start,end]时，这里的start和end表示的是字节下标，[1,2]表示统计<strong>第一个字节（8位）</strong>到第二个字节中1的个数，[0,-2]则表示统计从0到倒数第二个字节中1个数</td>
</tr>
</tbody>
</table>
</div>
<h2 id="5-2-HyperLogLog"><a href="#5-2-HyperLogLog" class="headerlink" title="5.2 HyperLogLog"></a>5.2 HyperLogLog</h2><h3 id="5-2-1-原理"><a href="#5-2-1-原理" class="headerlink" title="5.2.1 原理"></a>5.2.1 原理</h3><ul>
<li>计算<strong>基数（集合中不重复元素个数）</strong>的一种算法</li>
<li>对比Set，所占内存更小，统计的范围更大，重复的元素不会被添加进去</li>
</ul>
<h3 id="5-2-2-命令"><a href="#5-2-2-命令" class="headerlink" title="5.2.2 命令"></a>5.2.2 命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>pfadd [key] [element…]</td>
<td>添加指定元素到HyperLogLog中<br/>返回值：添加<strong>重复元素</strong>返回0，添加<strong>不重复元素</strong>返回1</td>
</tr>
<tr>
<td>pfcount [key…]</td>
<td>统计某个key的基数个数</td>
</tr>
<tr>
<td>pfmerge [destkey] [sourcekey…]</td>
<td>合并多个sourcekey后，将结果存放到destkey中</td>
</tr>
</tbody>
</table>
</div>
<h2 id="5-3-Geospatial"><a href="#5-3-Geospatial" class="headerlink" title="5.3 Geospatial"></a>5.3 Geospatial</h2><h3 id="5-3-1-原理"><a href="#5-3-1-原理" class="headerlink" title="5.3.1 原理"></a>5.3.1 原理</h3><ul>
<li>存放地理信息的数据结构，即表示经纬度的二维坐标</li>
</ul>
<h3 id="5-3-2-命令"><a href="#5-3-2-命令" class="headerlink" title="5.3.2 命令"></a>5.3.2 命令</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>geoadd [key] [[longitude] [latitude] [menber]…]</td>
<td>添加地理位置信息，（经度，纬度，名称）<br/>示例：geoadd china 100 100 shanghai 120 120 beijin</td>
</tr>
<tr>
<td>geopos [key] [member…]</td>
<td>获取key中名称位member的经纬度坐标</td>
</tr>
<tr>
<td>geodist [key] [member1] [member2] [m\</td>
<td>km\</td>
<td>ft\</td>
<td>mi]</td>
<td>获取key中member1和member2的直线距离，后面可以设置单位，m为默认单位</td>
</tr>
<tr>
<td>georadius [key] [longitude] [latitude] radius m\</td>
<td>km\</td>
<td>ft\</td>
<td>mi</td>
<td>以给定的经纬度坐标为中心，找出key中包含在半径为radius的圆中的member名称列表</td>
</tr>
</tbody>
</table>
</div>
<h1 id="六、Jedis"><a href="#六、Jedis" class="headerlink" title="六、Jedis"></a>六、Jedis</h1><h1 id="七、Springboot整合Redis"><a href="#七、Springboot整合Redis" class="headerlink" title="七、Springboot整合Redis"></a>七、Springboot整合Redis</h1><h2 id="7-1-配置环境"><a href="#7-1-配置环境" class="headerlink" title="7.1 配置环境"></a>7.1 配置环境</h2><h3 id="7-1-1-引入依赖"><a href="#7-1-1-引入依赖" class="headerlink" title="7.1.1 引入依赖"></a>7.1.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提供池化操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="7-1-2-配置文件"><a href="#7-1-2-配置文件" class="headerlink" title="7.1.2 配置文件"></a>7.1.2 配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">192.168.47.33</span></span><br><span class="line"><span class="comment">#Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#Redis数据库索引（默认位0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">1800000</span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#最大阻塞等待时间（复数表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#连接池中的最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>
<h3 id="7-1-3-Redis配置类"><a href="#7-1-3-Redis配置类" class="headerlink" title="7.1.3 Redis配置类"></a>7.1.3 Redis配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 开启缓存支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> LettuceConnectionFactory lettuceConnectionFactory;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@description</span> 自定义的缓存key的生成策略 若想使用这个key</span></span><br><span class="line"><span class="comment">	 *              只需要讲注解上keyGenerator的值设置为keyGenerator即可&lt;/br&gt;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 自定义策略生成的key</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span> </span>&#123;</span><br><span class="line">				StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">				sb.append(target.getClass().getName());</span><br><span class="line">				sb.append(method.getDeclaringClass().getName());</span><br><span class="line">				Arrays.stream(params).map(Object::toString).forEach(sb::append);</span><br><span class="line">				<span class="keyword">return</span> sb.toString();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * RedisTemplate配置</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 设置序列化</span></span><br><span class="line">		Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">		ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		om.setVisibility(PropertyAccessor.ALL, Visibility.ANY);</span><br><span class="line">		om.enableDefaultTyping(DefaultTyping.NON_FINAL);</span><br><span class="line">		jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">		<span class="comment">// 配置redisTemplate</span></span><br><span class="line">		RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">		redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">		RedisSerializer&lt;?&gt; stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">		redisTemplate.setKeySerializer(stringSerializer);<span class="comment">// key序列化</span></span><br><span class="line">		redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<span class="comment">// value序列化</span></span><br><span class="line">		redisTemplate.setHashKeySerializer(stringSerializer);<span class="comment">// Hash key序列化</span></span><br><span class="line">		redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<span class="comment">// Hash value序列化</span></span><br><span class="line">		redisTemplate.afterPropertiesSet();</span><br><span class="line">		<span class="keyword">return</span> redisTemplate;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 缓存配置管理器</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(LettuceConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置序列化</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofHours(<span class="number">1</span>));</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> StringRedisSerializer()))</span><br><span class="line">                												.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer()));</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 以锁写入的方式创建RedisCacheWriter对象</span></span><br><span class="line">		<span class="comment">//RedisCacheWriter writer = RedisCacheWriter.lockingRedisCacheWriter(factory);</span></span><br><span class="line">		<span class="comment">// 创建默认缓存配置对象</span></span><br><span class="line">		<span class="comment">/* 默认配置，设置缓存有效期 1小时*/</span></span><br><span class="line">		<span class="comment">//RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofHours(1));</span></span><br><span class="line">		<span class="comment">/* 配置test的超时时间为120s*/</span></span><br><span class="line">		RedisCacheManager cacheManager = RedisCacheManager.builder(RedisCacheWriter.lockingRedisCacheWriter(factory)).cacheDefaults(redisCacheConfiguration)</span><br><span class="line">				.withInitialCacheConfigurations(singletonMap(<span class="string">&quot;test&quot;</span>, RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofMinutes(<span class="number">120</span>)).disableCachingNullValues()))</span><br><span class="line">				.transactionAware().build();</span><br><span class="line">		<span class="keyword">return</span> cacheManager;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-2-RedisTemplate"><a href="#7-2-RedisTemplate" class="headerlink" title="7.2 RedisTemplate"></a>7.2 RedisTemplate</h2><h1 id="八、事务"><a href="#八、事务" class="headerlink" title="八、事务"></a>八、事务</h1><h2 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8.1 概念"></a>8.1 概念</h2><ul>
<li>Redis事务作用是串联多个命令并顺序执行</li>
<li>一个redis客户端可以通过multi命令进入事务状态，并且事务在执行时不会被其他redis客户端打断</li>
</ul>
<h2 id="8-2-命令"><a href="#8-2-命令" class="headerlink" title="8.2 命令"></a>8.2 命令</h2><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>multi</td>
<td>开启事务命令，之后的命令就进入队列，而不会马上被执行</td>
<td>在事务生存期间，所有的 Redis 关于数据结构的命令都会入队</td>
</tr>
<tr>
<td>watch [key…]</td>
<td>监听某些键，当被监听的键在事务执行前被修改，则事务会被回滚</td>
<td>使用乐观锁</td>
</tr>
<tr>
<td>unwatch [key…]</td>
<td>取消监听某些键</td>
<td>–</td>
</tr>
<tr>
<td>exec</td>
<td>执行事务，如果被监听的键没有被修改，则采用执行命令，否则就回滚命令</td>
<td>在执行事务队列存储的命令前， Redis 会检测被监听的键值对有没有发生变化，如果没有则执行命令 ，否则就回滚事务</td>
</tr>
<tr>
<td>discard</td>
<td>回滚事务</td>
<td>回滚进入队列的事务命令，之后就不能再用 exec命令提交了</td>
</tr>
</tbody>
</table>
</div>
<h2 id="8-3-悲观锁-乐观锁"><a href="#8-3-悲观锁-乐观锁" class="headerlink" title="8.3 悲观锁/乐观锁"></a>8.3 悲观锁/乐观锁</h2><h3 id="8-3-1-区别"><a href="#8-3-1-区别" class="headerlink" title="8.3.1 区别"></a>8.3.1 区别</h3><ul>
<li>乐观锁和悲观锁的出现都是解决共享数据的操作问题</li>
<li>悲观锁：每次操作共享数据时，都会给数据上锁，防止其他事务对其进行操作<ul>
<li>“悲观”意思是在每次操作数据前都悲观的认为别人也会操作这个数据，所以必须加上锁，保证数据为自己所用。但这样做的缺点是效率不高</li>
</ul>
</li>
<li>乐观锁：不会像悲观锁一样每次操作前都加锁，而是让每个事务都能对共享数据进行操作，<strong>哪个事务操作的快，则更新当前版本</strong>，这样过去版本的事务操作就会因为版本不匹配而无法执行</li>
</ul>
<h3 id="8-3-2-示例"><a href="#8-3-2-示例" class="headerlink" title="8.3.2 示例"></a>8.3.2 示例</h3><ul>
<li>watch </li>
<li>unwatch</li>
</ul>
<h3 id="8-3-3-事务特性"><a href="#8-3-3-事务特性" class="headerlink" title="8.3.3 事务特性"></a>8.3.3 事务特性</h3><ul>
<li>隔离性：客户端事务在执行时不能被其他客户端命令打断，没有隔离级别概念</li>
<li>原子性：不保证原子性，因为一条命令执行失败，其他命令仍然会执行，不会执行回滚</li>
</ul>
<h1 id="九、秒杀案例"><a href="#九、秒杀案例" class="headerlink" title="九、秒杀案例"></a>九、秒杀案例</h1><h2 id="9-1-并发模拟"><a href="#9-1-并发模拟" class="headerlink" title="9.1 并发模拟"></a>9.1 并发模拟</h2><h3 id="9-1-1-http-tools"><a href="#9-1-1-http-tools" class="headerlink" title="9.1.1 http-tools"></a>9.1.1 http-tools</h3><ul>
<li>安装httpd-tools：yum install httpd-tools</li>
<li>httpd-tools中包含有ab命令</li>
</ul>
<h3 id="9-1-2-ab命令"><a href="#9-1-2-ab命令" class="headerlink" title="9.1.2 ab命令"></a>9.1.2 ab命令</h3><ul>
<li><p>ab -n 1000 -c 100 -p ~/postfile -T ‘application/x-www-form-urlencoded’ 请求地址</p>
<ul>
<li>-n：表示请求次数</li>
<li>-c：表示并发数</li>
<li>-T content-type：POST/PUT 数据所使用的Content-type头信息</li>
<li>-p postfile：包含要 POST 的数据的文件，记得还要设置 -T 参数</li>
</ul>
</li>
<li><p>命令返回结果</p>
<ul>
<li>Concurrency Level: 并发量</li>
<li>Time taken for tests: 整个测试的时间</li>
<li>Complete requests: 完成的总请求数</li>
<li>Failed requests: 失败的请求数</li>
<li>Total transferred: 响应数据的总长度（包括http头信息和消息体数据）</li>
<li>HTML transferred: 响应数据中消息体数据的总和</li>
<li>Requests per second:吞吐率（计算方式为：Complete requests / Time taken for tests，也就是 完成的总请求数 / 整个测试的时间）</li>
<li>Time per request: 用户平均请求等待时间</li>
<li>Time per request: 服务器平均请求等待时间</li>
<li>Transfer rate: 单位时间内从服务器获取的数据长度（计算方式为：Total transferred / Time taken for tests， 也就是 响应数据的总长度（包括http头信息和消息体数据）/ 整个测试的时间）</li>
</ul>
</li>
</ul>
<h2 id="9-1-案例源码"><a href="#9-1-案例源码" class="headerlink" title="9.1 案例源码"></a>9.1 案例源码</h2><h1 id="十、持久化操作"><a href="#十、持久化操作" class="headerlink" title="十、持久化操作"></a>十、持久化操作</h1><h2 id="10-1-RDB（默认方式）"><a href="#10-1-RDB（默认方式）" class="headerlink" title="10.1 RDB（默认方式）"></a>10.1 RDB（默认方式）</h2><ul>
<li>读时共享，写时复制</li>
</ul>
<h2 id="10-2-AOF"><a href="#10-2-AOF" class="headerlink" title="10.2 AOF"></a>10.2 AOF</h2><h1 id="十一、主从复制"><a href="#十一、主从复制" class="headerlink" title="十一、主从复制"></a>十一、主从复制</h1><h1 id="十二、集群"><a href="#十二、集群" class="headerlink" title="十二、集群"></a>十二、集群</h1><h1 id="十三、换成"><a href="#十三、换成" class="headerlink" title="十三、换成"></a>十三、换成</h1><h1 id="十四、分布式锁"><a href="#十四、分布式锁" class="headerlink" title="十四、分布式锁"></a>十四、分布式锁</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx基础大全</title>
    <url>/2022/03/26/nginx%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、Nginx简介"><a href="#一、Nginx简介" class="headerlink" title="一、Nginx简介"></a>一、Nginx简介</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础大全</title>
    <url>/2022/04/03/Linux%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、系统分区"><a href="#一、系统分区" class="headerlink" title="一、系统分区"></a>一、系统分区</h1><h2 id="1-1-分区类型"><a href="#1-1-分区类型" class="headerlink" title="1.1 分区类型"></a>1.1 分区类型</h2><h3 id="1-1-1-主分区"><a href="#1-1-1-主分区" class="headerlink" title="1.1.1 主分区"></a>1.1.1 主分区</h3><ul>
<li>最多只能有4个</li>
</ul>
<h3 id="1-1-2-扩展分区"><a href="#1-1-2-扩展分区" class="headerlink" title="1.1.2 扩展分区"></a>1.1.2 扩展分区</h3><ul>
<li>最多只能有1个</li>
<li>主分区加扩展分区最多有4个</li>
<li>不能写入数据，只能包含逻辑分区</li>
</ul>
<h3 id="1-1-3-逻辑分区"><a href="#1-1-3-逻辑分区" class="headerlink" title="1.1.3 逻辑分区"></a>1.1.3 逻辑分区</h3><ul>
<li>可以写入数据</li>
</ul>
<h2 id="1-2-格式化"><a href="#1-2-格式化" class="headerlink" title="1.2 格式化"></a>1.2 格式化</h2><ul>
<li>又称逻辑格式化</li>
<li>目的是在硬盘中写入文件系统</li>
<li>文件系统有：FAT16、FAT32、NTFS、EXT2、EXT3、EXT4（默认）等</li>
</ul>
<h2 id="1-3-硬件设备名"><a href="#1-3-硬件设备名" class="headerlink" title="1.3 硬件设备名"></a>1.3 硬件设备名</h2><div class="table-container">
<table>
<thead>
<tr>
<th>硬件</th>
<th>设备文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>IDE硬盘</td>
<td>/dev/hd[a-d]</td>
</tr>
<tr>
<td>SCSI/SATA/USB硬盘</td>
<td>/dev/sd[a-p]</td>
</tr>
<tr>
<td>光驱</td>
<td>/dev/cdrom或/dev/sr0</td>
</tr>
<tr>
<td>软盘</td>
<td>/dev/fd[0-1]</td>
</tr>
<tr>
<td>打印机（25针）</td>
<td>/dev/lp[0-2]</td>
</tr>
<tr>
<td>打印机（USB）</td>
<td>/dev/usb/lp[0-15]</td>
</tr>
<tr>
<td>鼠标</td>
<td>/dev/mouse</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-4-分区表示"><a href="#1-4-分区表示" class="headerlink" title="1.4 分区表示"></a>1.4 分区表示</h2><ul>
<li>不管如何分区，1、2、3、4都用于主分区，第一个逻辑分区都是从5开始</li>
</ul>
<img src="/2022/04/03/Linux%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/fenqu.png" class="" title="fenqu">
<h2 id="1-5-挂载"><a href="#1-5-挂载" class="headerlink" title="1.5 挂载"></a>1.5 挂载</h2><h3 id="1-5-1-必备分区"><a href="#1-5-1-必备分区" class="headerlink" title="1.5.1 必备分区"></a>1.5.1 必备分区</h3><ul>
<li>/ （根分区）</li>
<li>swap分区（交换分区，内存2倍，不超过2GB）</li>
</ul>
<h3 id="1-5-2-推荐分区"><a href="#1-5-2-推荐分区" class="headerlink" title="1.5.2 推荐分区"></a>1.5.2 推荐分区</h3><ul>
<li>/boot（启动分区，200MB，默认是sda1）</li>
</ul>
<h2 id="1-6-文件系统结构"><a href="#1-6-文件系统结构" class="headerlink" title="1.6 文件系统结构"></a>1.6 文件系统结构</h2><img src="/2022/04/03/Linux%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/file.png" class="" title="file">
<ul>
<li>Linux目录可以放在不同的系统分区中</li>
</ul>
<h2 id="1-7-小结"><a href="#1-7-小结" class="headerlink" title="1.7 小结"></a>1.7 小结</h2><ul>
<li>分区：把大硬盘分为小的逻辑分区</li>
<li>格式化：写入文件系统</li>
<li>分区设备文件名：给每个分区定义设备文件名</li>
<li>挂载：给每个分区分配挂载点（挂载点必须是空目录，挂载后分区才能正常使用）</li>
</ul>
<h1 id="二、Linux命令"><a href="#二、Linux命令" class="headerlink" title="二、Linux命令"></a>二、Linux命令</h1><h2 id="2-1-文件目录"><a href="#2-1-文件目录" class="headerlink" title="2.1 文件目录"></a>2.1 文件目录</h2><div class="table-container">
<table>
<thead>
<tr>
<th>目录名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>代表当前目录</td>
</tr>
<tr>
<td>..</td>
<td>代表上一级目录</td>
</tr>
<tr>
<td>-</td>
<td>代表前一个工作目录</td>
</tr>
<tr>
<td>~</td>
<td>代表[目前用户身份]所在的家目录</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-2-文件处理命令"><a href="#2-2-文件处理命令" class="headerlink" title="2.2 文件处理命令"></a>2.2 文件处理命令</h2><h3 id="2-2-1-命令列表"><a href="#2-2-1-命令列表" class="headerlink" title="2.2.1 命令列表"></a>2.2.1 命令列表</h3><ul>
<li>以下命令执行权限为<strong>所有用户</strong></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ls</td>
<td>-ald [文件/目录]</td>
<td style="text-align:left">a：显示目录中全部文件（包括隐藏文件）<br/>-l：详细信息显示<br/>-d：查看目录属性<br/>-i：查看i节点<br/>显示目录文件信息<br/>所在位置/bin/mkdir</td>
</tr>
<tr>
<td>mkdir</td>
<td>-p</td>
<td style="text-align:left">-p：递归创建<br/>创建新目录</td>
</tr>
<tr>
<td>cd</td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>pwd</td>
<td></td>
<td style="text-align:left">显示当前目录<br/>所在位置/bin/pwd</td>
</tr>
<tr>
<td>rmdir</td>
<td></td>
<td style="text-align:left">删除空目录</td>
</tr>
<tr>
<td>cp</td>
<td>-rp [原文件/目录] [目标目录]</td>
<td style="text-align:left">-r：表示复制目录<br/>-p：表示保留文件属性<br/>复制文件或目录<br/>所在位置/bin/cp</td>
</tr>
<tr>
<td>mv</td>
<td>[原文件或目录] [目标目录]</td>
<td style="text-align:left">剪切文件、改名<br/>所在位置/bin/mv</td>
</tr>
<tr>
<td>rm</td>
<td>-rf</td>
<td style="text-align:left">-r：表示删除目录<br/>-f：表示强制执行</td>
</tr>
<tr>
<td>touch</td>
<td>[文件名]</td>
<td style="text-align:left">创建空文件<br/>所在位置/bin/touch，文件名不推荐加空格</td>
</tr>
<tr>
<td>cat</td>
<td>-n [文件名]</td>
<td style="text-align:left">-n：表示显示行号<br/>显示文件内容</td>
</tr>
<tr>
<td>tac</td>
<td></td>
<td style="text-align:left">反向显示文件内容</td>
</tr>
<tr>
<td>more</td>
<td></td>
<td style="text-align:left">按f/空格翻页<br/>按Enter换行<br/>按q退出<br/>分页显示文件内容<br/>所在位置/bin/more</td>
</tr>
<tr>
<td>less</td>
<td></td>
<td style="text-align:left">按PgUp向上翻页<br/>/+搜索名称进行内容搜索（继续按n可以向下查找）<br/>分页显示文件内容（可以向上翻页）<br/>所在位置/usr/bin/less</td>
</tr>
<tr>
<td>head</td>
<td>-n [文件名]</td>
<td style="text-align:left">-n：指定行数<br/>显示文件前几行，默认显示前世行<br/>所在位置/uer/bin/head</td>
</tr>
<tr>
<td>tail</td>
<td>-nf</td>
<td style="text-align:left">-n：指定行数<br/>-f：表示动态显示文件末尾内容<br/>显示文件后几行，默认显示后10行<br/>所在位置/usr/bin/tail</td>
</tr>
<tr>
<td>ln</td>
<td></td>
<td style="text-align:left">-s [原文件] [目标文件]<br/>生成链接文件<br/>所在位置/bin/ln</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-2-2-示例"><a href="#2-2-2-示例" class="headerlink" title="2.2.2 示例"></a>2.2.2 示例</h3><ul>
<li>ls -ld</li>
<li>mkdir -p /tmp/a/b</li>
<li>cd ..（返回上一目录）/cd [绝对路径/相对路径]</li>
<li>pwd</li>
<li>rmdir /tmp/a/b</li>
<li>cp -r /tmp/a/b /root（将b目录复制到root目录下）</li>
<li>mv /tmp/a/b /root/c（将b剪切到root目录并改名为c）</li>
<li>touch a.list</li>
<li>cat /etc/issue</li>
<li>more /etc/services</li>
<li>less /etc/services</li>
<li>head -n 20 /etc/services</li>
<li>tail -n 18 /etc/services</li>
<li>ln -s /etc/issue /tmp/issue.soft</li>
</ul>
<h2 id="2-3-权限管理命令"><a href="#2-3-权限管理命令" class="headerlink" title="2.3 权限管理命令"></a>2.3 权限管理命令</h2><h3 id="2-3-1-命令列表"><a href="#2-3-1-命令列表" class="headerlink" title="2.3.1 命令列表"></a>2.3.1 命令列表</h3><ul>
<li>以下命令执行权限为<strong>所有用户</strong></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>chmod</td>
<td>[{ugoa}{+-=}{rwx}] [文件或目录]或[mode=421] [文件或目录]/-R</td>
<td>-R：表示递归修改某一目录下全部文件的权限<br/>改变文件或目录权限<br/>u表示所有者，r=4，w=2，x=1<br/>所在位置/bin/chmod</td>
</tr>
<tr>
<td>chown</td>
<td>[用户] [文件或目录]</td>
<td>改变文件或目录的所有者<br/>所在位置/bin/chown</td>
</tr>
<tr>
<td>chgrp</td>
<td>[用户组] [文件或目录]</td>
<td>改变文件或目录的所属组<br/>所在位置/bin/chgrp</td>
</tr>
<tr>
<td>umask</td>
<td>[-S]</td>
<td>-S：表示以rwx形式显示新建文件缺省权限<br/>显示、设置文件的缺省权限<br/>所在位置Shell内置命令</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-3-2-示例"><a href="#2-3-2-示例" class="headerlink" title="2.3.2 示例"></a>2.3.2 示例</h3><ul>
<li>chmod u+x,o-r,g=rwx a.list</li>
<li>chmod 640 a.list</li>
<li>chown gaoy a (改变文件a的所有者为gaoy)</li>
<li>chown root:tsgroup /project/（改变project目录的所有者和所属组）</li>
<li>chgrp a b.list</li>
<li>umask -S</li>
</ul>
<h2 id="2-4-文件搜索命令"><a href="#2-4-文件搜索命令" class="headerlink" title="2.4 文件搜索命令"></a>2.4 文件搜索命令</h2><h3 id="2-4-1-命令列表"><a href="#2-4-1-命令列表" class="headerlink" title="2.4.1 命令列表"></a>2.4.1 命令列表</h3><ul>
<li>以下命令执行权限为<strong>所有用户</strong></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>find</td>
<td>[搜索范围] [匹配条件]</td>
<td>-name：根据文件名查找<br/>-iname：不区分大小写查找<br/>- size：根据文件大小查找<br/>-user：根据所有者查找<br/>文件搜索<br/>所在位置/bin/find</td>
</tr>
<tr>
<td>locate</td>
<td>[文件名]</td>
<td>-i：不区分大小写查找<br/>在文件资料库中查找文件，速度比find快<br/>所在位置/usr/bin/locate</td>
</tr>
<tr>
<td>which</td>
<td>[命令名称]</td>
<td>搜索命令所在目录及别名信息<br/>所在位置/usr/bin/which</td>
</tr>
<tr>
<td>whereis</td>
<td>[命令名称]</td>
<td>搜索命令所在目录及帮助文档路径</td>
</tr>
<tr>
<td>grep</td>
<td>-inv [关键字] [文件名]</td>
<td>在文件中搜寻字串匹配的行并输出<br/>所在位置/bin/grep</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-4-2-示例"><a href="#2-4-2-示例" class="headerlink" title="2.4.2 示例"></a>2.4.2 示例</h3><ul>
<li>find /etc -name init(在目录/etc中查找文件init)</li>
<li>locate inittab</li>
<li>which ls</li>
<li>whereis ls</li>
<li>grep mysql /root/install.log</li>
</ul>
<h2 id="2-5-帮助命令"><a href="#2-5-帮助命令" class="headerlink" title="2.5 帮助命令"></a>2.5 帮助命令</h2><h3 id="2-5-1-命令列表"><a href="#2-5-1-命令列表" class="headerlink" title="2.5.1 命令列表"></a>2.5.1 命令列表</h3><ul>
<li>以下命令执行权限为<strong>所有用户</strong></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>man</td>
<td>[命令或配置文件]</td>
<td>获取帮助信息<br/>按q退出<br/>按空格翻页<br/>按Enter换行<br/>按/-[查找内容]进行查找<br/>按n向下查找<br/>所在位置/usr/bin/man</td>
</tr>
<tr>
<td>whatis</td>
<td>[命令]</td>
<td>简单显示命令帮助信息</td>
</tr>
<tr>
<td>apropos</td>
<td>[配置文件]</td>
<td>查看配置文件的信息</td>
</tr>
<tr>
<td>—help</td>
<td>[命令] —help</td>
<td>查看命令常见选项</td>
</tr>
<tr>
<td>help</td>
<td>[命令]</td>
<td>获取Shell内置命令的版帮助信息<br/>所在位置Shell内置命令</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-5-2-示例"><a href="#2-5-2-示例" class="headerlink" title="2.5.2 示例"></a>2.5.2 示例</h3><ul>
<li>man ls</li>
<li>man services：查看配置文件services的帮助信息</li>
<li>whatis ls</li>
<li>apropos inittab</li>
<li>ls —help</li>
<li>help umask</li>
</ul>
<h2 id="2-6-用户管理命令"><a href="#2-6-用户管理命令" class="headerlink" title="2.6 用户管理命令"></a>2.6 用户管理命令</h2><h3 id="2-6-1-命令列表"><a href="#2-6-1-命令列表" class="headerlink" title="2.6.1 命令列表"></a>2.6.1 命令列表</h3><ul>
<li>useradd/userdel执行权限为root</li>
<li>其他命令执行权限为所有用户</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>useradd</td>
<td>-udcgGs</td>
<td>-u [UID]：手工指定用户的UID<br/>-d [家目录]：手工指定用户的家目录<br/>-c [用户说明]：手工指定用户的说明<br/>-g [组名]：手工指定用户的初始组<br/>-G [组名]：手工指定用户的附加组<br/>-s shell：手工指定用户的登录shell，默认是/bin/bash<br/>所在位置：/usr/sbin/useradd；<br/>添加用户，不推荐手工指定用户的家目录</td>
</tr>
<tr>
<td>passwd</td>
<td>-Slu [用户名]—stdin</td>
<td>-S：查询用户密码的密码状态<br/>-l：暂时锁定用户<br/>-u：解锁用户<br/>—stdin：可以通过管道符输出的数据作为用户的密码<br/>-Slu：这些选项只能由root执行<br/>设置用户密码，root可以更改任何人的密码，普通用户可以更改自己的密码<br/>所在位置：/usr/bin/passwd；<br/>只用root可以改其他用户的密码，其他用户只能直接输入passwd（不用接用户名）改自己的密码（必须符合密码复杂性原则）</td>
</tr>
<tr>
<td>usermod</td>
<td>-ucGLU</td>
<td>-u [UID]：修改用户的UID号<br/>-c [用户说明]：修改用户的说明信息<br/>-G [组名]：修改用户的附加组-L-U；<br/>-L：临时锁定用户<br/>-U：解锁用户锁定</td>
</tr>
<tr>
<td>chage</td>
<td></td>
<td>-l：列出用户的详细密码<br/>-d [日期]：修改密码最后一次更改日期<br/>-m [天数]：两次密码修改间隔<br/>-M [天数]：密码有效期<br/>-W [天数]：密码过期前警告天数<br/>-I [天数]：密码过后宽限天数<br/>-E [日期]：账号失效时间</td>
</tr>
<tr>
<td>userdel</td>
<td>-r [用户名]</td>
<td>-r：删除用户的同时删除用户家目录</td>
</tr>
<tr>
<td>id</td>
<td>[用户名]</td>
<td>查看用户ID（UID、GID等）</td>
</tr>
<tr>
<td>su [选项] [用户名]</td>
<td>-<br/>-c</td>
<td>-：选项只是用“-”代表连带用户的环境变量一起切换<br/>-c：仅执行一次命令，而不切换用户身份</td>
</tr>
<tr>
<td>groupadd</td>
<td>-g [GID] [组名]</td>
<td>-g [GID]：指定组ID</td>
</tr>
<tr>
<td>groupmod [选项] [组名]</td>
<td>-g [GID]-n [新组名]</td>
<td>-g：修改GID<br/>-n：修改组名</td>
</tr>
<tr>
<td>groupdel [组名]</td>
<td></td>
<td>没有初始组，此用户不能存在</td>
</tr>
<tr>
<td>gpasswd</td>
<td>-ad [用户名] [组名]</td>
<td>-a：把用户加入组<br/>-d：把用户从组中删除；<br/>把用户添加入组或从组中删除</td>
</tr>
<tr>
<td>who</td>
<td></td>
<td>查看登录用户信息<br/>所在位置：/usr/bin/who</td>
</tr>
<tr>
<td>w</td>
<td></td>
<td>查看登录用户详细信息<br/>所在位置：/usr/bin/w</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-6-2-示例"><a href="#2-6-2-示例" class="headerlink" title="2.6.2 示例"></a>2.6.2 示例</h3><ul>
<li>useradd yangmi</li>
<li>echo “123” | passwd —stdin lamp：给用户lamp添加密码123</li>
<li>passwd -l sc：锁定用户（该用户无法登录）</li>
<li>usermod -c “test user” lamp</li>
<li>chage -d 0 lamp：用户一登录就要修改密码</li>
<li>su root：这样切换不会改变此用户的环境变量</li>
<li>su - root：把用户的操作环境也改为root环境（推荐）</li>
<li>su - root -c “useradd user3”：不切换成root，但执行useradd命令添加user3用户</li>
<li>groupmod -n testgrp group1：把组名group1修改为testgrp</li>
<li>gpasswd -a user1 root：把user1用户加入到root组中</li>
<li>who</li>
<li>w</li>
</ul>
<h2 id="2-7-压缩解压命令"><a href="#2-7-压缩解压命令" class="headerlink" title="2.7 压缩解压命令"></a>2.7 压缩解压命令</h2><h3 id="2-7-1-命令列表"><a href="#2-7-1-命令列表" class="headerlink" title="2.7.1 命令列表"></a>2.7.1 命令列表</h3><ul>
<li>以下命令执行权限为<strong>所有用户</strong></li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>gzip</td>
<td>[文件]</td>
<td>压缩文件(目录不可以)，压缩后文件格式为.gz，压缩后只保留压缩后的文件，不保留原文件所在位置/bin/gzip</td>
</tr>
<tr>
<td>gunzip</td>
<td>[压缩文件]</td>
<td>解压缩.gz的压缩文件</td>
</tr>
<tr>
<td>tar</td>
<td>-zcfvx [压缩后的文件名] [目录]</td>
<td>-c：打包<br/>-v：显示详细信息<br/>-f：指定文件名<br/>-z：打包同时压缩<br/>-x：解包<br/>打包目录，即把目录打包成一个.tar的文件，压缩后的文件格式为.tar.gz所在位置：/bin/tar</td>
</tr>
<tr>
<td>zip</td>
<td>-r [压缩后文件名] [文件或目录]</td>
<td>-r：压缩目录<br/>压缩文件或目录，压缩后文件格式为.zip<br/>所在位置/usr/bin/zip</td>
</tr>
<tr>
<td>unzip</td>
<td>[压缩文件]</td>
<td>解压.zip的压缩文件<br/>所在位置/usr/bin/unzip</td>
</tr>
<tr>
<td>bzip2</td>
<td>-k [文件]</td>
<td>压缩文件，压缩后文件格式.bz2</td>
</tr>
<tr>
<td>bunzip2</td>
<td>-k [压缩文件]</td>
<td>解压缩</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-7-2-示例"><a href="#2-7-2-示例" class="headerlink" title="2.7.2 示例"></a>2.7.2 示例</h3><ul>
<li>gunzip a.gz</li>
<li>tar -zcf Japan.tar.gz Japan</li>
<li>tar -axvf Japan.tar.gz（解包）</li>
<li>zip -r Japan.zip Japan</li>
<li>unzip test.zip</li>
<li>bzip2 -k boduo</li>
<li>tar -cjf Japan.tar.bz2 Japan（针对目录）</li>
<li>bunzip2 -k boduo.bz2</li>
<li>tar -xjf Japan.tar.bz2（针对目录）</li>
</ul>
<h2 id="2-8-网络命令"><a href="#2-8-网络命令" class="headerlink" title="2.8 网络命令"></a>2.8 网络命令</h2><h3 id="2-8-1-命令列表"><a href="#2-8-1-命令列表" class="headerlink" title="2.8.1 命令列表"></a>2.8.1 命令列表</h3><ul>
<li>以下命令执行权限为<strong>所有用户</strong></li>
<li>ifconfig执行权限为root，其他均为所有用户</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>write</td>
<td>&lt;用户名&gt;</td>
<td>给登录用户发信息<br/>以Ctrl+D保存结束<br/>所在位置：/usr/bin/write</td>
</tr>
<tr>
<td>wall</td>
<td>[message]</td>
<td>发广播信息<br/>所在位置：/usr/bin/wall</td>
</tr>
<tr>
<td>ping</td>
<td>-c [IP地址]</td>
<td>测试网络连通性<br/>所在位置：/bin/ping</td>
</tr>
<tr>
<td>ifconfig</td>
<td>[网卡名称] [IP地址]</td>
<td>查看和设置网卡信息<br/>所在位置：/sbin/ifconfig</td>
</tr>
<tr>
<td>mail</td>
<td>[用户名]</td>
<td>查看发送电子邮件<br/>所在位置/bin/mail</td>
</tr>
<tr>
<td>last</td>
<td></td>
<td>列出目前与过去登入系统的用户信息<br/>所在位置：/usr/bin/last</td>
</tr>
<tr>
<td>lastlog</td>
<td>-u [uid]</td>
<td>检查某特定用户上次登录的时间<br/>所在位置/usr/bin/lastlog</td>
</tr>
<tr>
<td>traceroute</td>
<td></td>
<td>显示数据包到主机间的路径<br/>所在位置：/bin/traceroute</td>
</tr>
<tr>
<td>netstat</td>
<td>-tulrn</td>
<td>显示网络相关信息<br/>所在位置：/bin/netstat</td>
</tr>
<tr>
<td>setup</td>
<td></td>
<td>配置网络<br/>所在位置/usr/bin/setup</td>
</tr>
<tr>
<td>mount</td>
<td>[-t 文件系统] [设备文件名] [挂载点]</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-8-2-示例"><a href="#2-8-2-示例" class="headerlink" title="2.8.2 示例"></a>2.8.2 示例</h3><ul>
<li>write linzhiling</li>
<li>wall abcdefgh</li>
<li>ping -c 3 192.168.1.156</li>
<li>ifconfig eth0 192.168.8.250</li>
<li>mail root</li>
<li>mail</li>
<li>last</li>
<li>lastlog</li>
<li>lastlog -u 502</li>
<li>traceroute www.baidu.com</li>
<li>netstat -tlun（查看本机监听的端口）</li>
<li>netstat -an（查看本机所有的网络连接）</li>
<li>netstat -rn（查看本机路由表）</li>
<li>setup</li>
<li>mount -t iso9660 /dev/sr0 /mnt/cdrom</li>
<li>umount /dev/sr0（卸载）</li>
</ul>
<h2 id="2-9-关机重启命令"><a href="#2-9-关机重启命令" class="headerlink" title="2.9 关机重启命令"></a>2.9 关机重启命令</h2><h3 id="2-9-1-命令列表"><a href="#2-9-1-命令列表" class="headerlink" title="2.9.1 命令列表"></a>2.9.1 命令列表</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>shutdown</td>
<td>-chr [时间]</td>
<td>-c：取消前一个关机命令<br/>-h：关机<br/>-r：重启</td>
</tr>
<tr>
<td>reboot</td>
<td></td>
<td>重启</td>
</tr>
<tr>
<td>init 0</td>
<td></td>
<td>关机</td>
</tr>
<tr>
<td>init 6</td>
<td></td>
<td>重启</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-9-2-系统运行级别"><a href="#2-9-2-系统运行级别" class="headerlink" title="2.9.2 系统运行级别"></a>2.9.2 系统运行级别</h3><h4 id="（1）级别"><a href="#（1）级别" class="headerlink" title="（1）级别"></a>（1）级别</h4><div class="table-container">
<table>
<thead>
<tr>
<th>级别</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>关机</td>
</tr>
<tr>
<td>1</td>
<td>单用户</td>
</tr>
<tr>
<td>2</td>
<td>不完全多用户、不含NFS服务</td>
</tr>
<tr>
<td>3</td>
<td>完全多用户（默认）</td>
</tr>
<tr>
<td>4</td>
<td>未分配</td>
</tr>
<tr>
<td>5</td>
<td>图形界面</td>
</tr>
<tr>
<td></td>
<td>重启</td>
</tr>
</tbody>
</table>
</div>
<h4 id="（2）相关命令"><a href="#（2）相关命令" class="headerlink" title="（2）相关命令"></a>（2）相关命令</h4><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>runlevel</td>
<td>查看系统运行级别</td>
</tr>
<tr>
<td>logout</td>
<td>退出登录</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-10-Shell命令"><a href="#2-10-Shell命令" class="headerlink" title="2.10 Shell命令"></a>2.10 Shell命令</h2><h3 id="2-10-1-命令列表"><a href="#2-10-1-命令列表" class="headerlink" title="2.10.1 命令列表"></a>2.10.1 命令列表</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>echo</td>
<td>-e [输出内容]</td>
<td>-e：支持反斜线控制的字符转换；基本输出命令</td>
</tr>
<tr>
<td>history</td>
<td>-cw [历史命令保存文件]</td>
<td>-c：清空历史命令（不推荐清空）<br/>-w：把缓存中的历史命令写入历史命令保护文件<br/>~/.bash_history<br/>查看之前输入的命令，不加w选项，刚输入的命令还在缓存中，还未写入历史命令保存文件中，默认保存1000条历史命令（可以在环境变量配置文件/etc/profile中进行修改）</td>
</tr>
<tr>
<td>alias</td>
<td>[别名]=[‘原命令’]</td>
<td>alias [别名]=[‘原命令’]：设定命令别名<br/>alias：查询命令别名<br/>临时生效，重启后无效</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-10-2-示例"><a href="#2-10-2-示例" class="headerlink" title="2.10.2 示例"></a>2.10.2 示例</h3><ul>
<li>history</li>
<li>history -w</li>
<li>alias vi=’vim’</li>
<li>alias</li>
</ul>
<h2 id="2-11-字符提取命令"><a href="#2-11-字符提取命令" class="headerlink" title="2.11 字符提取命令"></a>2.11 字符提取命令</h2><h3 id="2-11-1-cut命令"><a href="#2-11-1-cut命令" class="headerlink" title="2.11.1 cut命令"></a>2.11.1 cut命令</h3><ul>
<li>选项：-df [文件名]</li>
<li>解释：<ul>
<li>-d 分隔符：按照指定分隔符分割列</li>
<li>-f 列号：提取第几列</li>
</ul>
</li>
<li>说明：默认提取以制表符分割的列</li>
</ul>
<h3 id="2-11-2-printf命令"><a href="#2-11-2-printf命令" class="headerlink" title="2.11.2 printf命令"></a>2.11.2 printf命令</h3><ul>
<li>‘输出类型/输出格式’ 输出内容</li>
<li>输出类型：<ul>
<li>%ns：输出字符串。n是数字指代输出几个字符</li>
<li>%ni：输出整数。n是数字指代输出几个数字</li>
<li>%m.nf：输出浮点数。m和n是数字，指代输出的整数位数和小数位数。如%8.2f代表共输出8位数，其中2位是小数，6位是整数</li>
</ul>
</li>
<li><p>输出格式：</p>
<ul>
<li>\a：输出警告音</li>
<li>\b：输出退格键</li>
<li>\f：清除屏幕</li>
<li>\n：换行</li>
<li>\r：回车</li>
<li>\t：水平输出退格键，即Tab键</li>
<li>\v：垂直输出退格键，即Tab键</li>
</ul>
</li>
<li><p>说明：利用管道符或者直接接文件名都无法利用此命令输出文件内容，print和printf一般在awk命令中使用</p>
</li>
<li>示例<ul>
<li>printf ‘%s %s %s \n’ 1 2 3 4 5 6</li>
<li>printf ‘%s’ $(cat s.txt)：输出文件内容</li>
</ul>
</li>
</ul>
<h3 id="2-11-3-awk命令"><a href="#2-11-3-awk命令" class="headerlink" title="2.11.3 awk命令"></a>2.11.3 awk命令</h3><ul>
<li>选项：<ul>
<li>‘条件1 {动作1}</li>
<li>条件2 {动作2}…’ 文件名</li>
</ul>
</li>
<li>条件：<ul>
<li>一般使用关系表达式作为条件</li>
<li>x&gt;10</li>
<li>x&gt;=10</li>
<li>x&lt;=10</li>
</ul>
</li>
<li>动作：格式化输出流程控制语句</li>
<li>说明：print只能在awk中使用，会自动换行</li>
<li>示例：<ul>
<li>awk ‘{printf $2 “\t” $6 “\n”}’ s.txt：输出文件第2列和第六列</li>
<li>df -h | awk ‘{print $1 “\t” $3}’</li>
<li>df -h | grep sda5 | awk ‘{print $5}’ | cut -d “%” -f 1：截取某一行的第5列数据</li>
<li>awk ‘BEGIN{printf “This is a txt \n”} {print $2 “\t” $5}’ s.txt：在输出文件内容前，先输出This is a txt</li>
<li>awk ‘BEGIN{FS=”:”} {print $1 “\t” $3}’ /etc/passwd：FS指定分隔符为冒号，不加BEGIN，文件的第一行就不会处理</li>
<li>awk ‘END{printf “The End \n”} {printf $2 “\t” $6 “\n”}’ s.txtEND：表示输出完成之后，再输出The End</li>
</ul>
</li>
</ul>
<h3 id="2-11-4-sed命令"><a href="#2-11-4-sed命令" class="headerlink" title="2.11.4 sed命令"></a>2.11.4 sed命令</h3><ul>
<li>选项：[-nei] ‘[动作]’ [文件名]</li>
<li>解释：<ul>
<li>-n：一般sed命令会把所有数据都输出到屏幕，如果加入此选项，则只会把经过sed命令处理的行输出到屏幕</li>
<li>-e：允许对输入数据应用多条sed命令编辑</li>
<li>-i：用sed的修改结果直接修改读取数据的文件，而不是由屏幕输出</li>
</ul>
</li>
<li><p>动作：</p>
<ul>
<li>a \：追加，在当前行后添加一行或多行。添加多行时，除最后一行外，每行末尾需要用“\”代表数据未完结</li>
<li>c \：行替换，用c后面的字符串替换原数据行，替换多行时，除最后一行外，每行末尾需用“\”代表数据未完结</li>
<li>i \：插入，在当前行前插入一行或多行。插入多行时，除最后一行外，每行末尾需要用“\”代表数据未完结</li>
<li>d：删除，删除指定的行</li>
<li>p：打印，输出指定的行</li>
<li>s：字串替换，用一个字符串替换另外一个字符串。</li>
<li>格式为“行范围s/旧字串/新字串/g”（和vim中的替换格式类似）</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li>sed -n ‘2p’ s.txt：输出第二行，不加-n会把所有内容都输出</li>
<li>df -h | sed -n ‘2p’ s.txt：输出df命令内容第2行</li>
<li>sed ‘2,4d’ s.txt：将文件输出的内容的第2到4行删除，但不改变文件本身</li>
<li>sed ‘2i hello \world’ s.txt：在文件输出内容第2行插入hello world内容，并不改变文件本身</li>
<li>sed ‘4s/99/55/g’ s.txt：将文件输出内容的第4行的99改为55</li>
<li>sed -e ‘s/LiMing//g ; s/Gao//g/‘ s.txt：同时把LiMing和Gao修改为空白</li>
</ul>
</li>
</ul>
<h1 id="三、网络配置"><a href="#三、网络配置" class="headerlink" title="三、网络配置"></a>三、网络配置</h1><h2 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h2><ul>
<li>将虚拟机网络配置改为桥接模式，才能保证主机和虚拟机ping通</li>
</ul>
<h2 id="3-2-第一步"><a href="#3-2-第一步" class="headerlink" title="3.2 第一步"></a>3.2 第一步</h2><h3 id="3-2-1-修改配置文件参数"><a href="#3-2-1-修改配置文件参数" class="headerlink" title="3.2.1 修改配置文件参数"></a>3.2.1 修改配置文件参数</h3><ol>
<li>dhclient：动态分配IP地址</li>
<li>vim /etc/sysconfig/network-scripts/ifcfg-ens33</li>
<li>修改静态IP：BOOTPROTO=static</li>
<li>修改自启动：ONBOOT=yes</li>
</ol>
<h2 id="3-3-第二步"><a href="#3-3-第二步" class="headerlink" title="3.3 第二步"></a>3.3 第二步</h2><h3 id="3-3-1-向配置文件添加IP地址、子网掩码、网关、DNS"><a href="#3-3-1-向配置文件添加IP地址、子网掩码、网关、DNS" class="headerlink" title="3.3.1 向配置文件添加IP地址、子网掩码、网关、DNS"></a>3.3.1 向配置文件添加IP地址、子网掩码、网关、DNS</h3><ul>
<li>IPADDR=192.168.1.102</li>
<li>NETMASK=255.255.255.0</li>
<li>GATEWAY=192.168.1.1</li>
<li>DNS1=119.29.29.29</li>
<li>GATEWAY和IPADDR需要在同一网段下，否则无法上网</li>
</ul>
<h2 id="3-4-第三步"><a href="#3-4-第三步" class="headerlink" title="3.4 第三步"></a>3.4 第三步</h2><ul>
<li>重启网络服务：systemctl restart network.service</li>
</ul>
<h1 id="四、开启web服务"><a href="#四、开启web服务" class="headerlink" title="四、开启web服务"></a>四、开启web服务</h1><h2 id="4-1-安装tomcat"><a href="#4-1-安装tomcat" class="headerlink" title="4.1 安装tomcat"></a>4.1 安装tomcat</h2><h2 id="4-2-安装nginx"><a href="#4-2-安装nginx" class="headerlink" title="4.2 安装nginx"></a>4.2 安装nginx</h2><h2 id="4-3-开放端口"><a href="#4-3-开放端口" class="headerlink" title="4.3 开放端口"></a>4.3 开放端口</h2><ul>
<li>在不关闭防火墙的前提下，开放浏览器访问端口<ul>
<li>开启tomcat：systemctl start tomcat.service</li>
<li>永久开放8080端口：firewall-cmd —zone=public —add-port=8080/tcp —permanent</li>
<li>重启防火墙：systemctl restart firewalld.service</li>
<li>查看是否开放成功：firewall-cmd —list-ports</li>
</ul>
</li>
<li>也可以关闭防火墙对服务器进行访问：<ul>
<li>暂时关闭防火墙：systemctl stop firewalld</li>
<li>永久关闭防火墙：systemctl disable firewalld</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC基础大全</title>
    <url>/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h2 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1 什么是MVC"></a>1.1 什么是MVC</h2><ul>
<li>MVC：软件架构思想</li>
<li>M：模型层，指工程中的bean</li>
<li>V：视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</li>
<li>C：控制层，指工程中的servlet，用于接收请求和响应数据</li>
<li>MVC工作流程：视图层发送请求到服务器，服务器请求被控制层接收，控制层调用响应的模型层处理请求，处理完之后将结果返回控制层，控制层，再根据请求处理的结果找到相应的视图层，渲染数据后最终相应给浏览器</li>
</ul>
<h1 id="二、一个案例"><a href="#二、一个案例" class="headerlink" title="二、一个案例"></a>二、一个案例</h1><h2 id="2-1-创建MAVEN工程"><a href="#2-1-创建MAVEN工程" class="headerlink" title="2.1 创建MAVEN工程"></a>2.1 创建MAVEN工程</h2><ul>
<li>在pom文件中设置打包方式为war包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-引入依赖"><a href="#2-2-引入依赖" class="headerlink" title="2.2 引入依赖"></a>2.2 引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-创建webapp"><a href="#2-3-创建webapp" class="headerlink" title="2.3 创建webapp"></a>2.3 创建webapp</h2><ul>
<li>在mian目录下创建webapp文件夹</li>
<li>在webapp下创建文件夹WEB-INF</li>
<li>在项目结构窗口的modules窗口中添加web.xml配置，注意路径要在WEB-INF前添加上src/main/webapp</li>
</ul>
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/webxml.png" class="" title="imageweb">
<ul>
<li>在WEB-INF中创建templates/index.html</li>
</ul>
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/project.png" class="" title="imagepro">
<h2 id="2-4-配置web-xml"><a href="#2-4-配置web-xml" class="headerlink" title="2.4 配置web.xml"></a>2.4 配置web.xml</h2><h3 id="2-4-1-默认配置方式"><a href="#2-4-1-默认配置方式" class="headerlink" title="2.4.1 默认配置方式"></a>2.4.1 默认配置方式</h3><ul>
<li>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<code>&lt;servlet-name&gt;</code>-servlet.xml，例如以下配置所对应的SpringMVC的配置文件位于WEB-INF下，文件名为SpringMVC-servlet.xml</li>
<li>不推荐，因为spring配置资源一般都是放在resources下的</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC前端控制器，对浏览器发送的请求进行统一处理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置SpringMVC核心控制器所能处理的请求路径</span></span><br><span class="line"><span class="comment">        / 所匹配的请求可以是/login或.html/.css/.js等方式的请求路径</span></span><br><span class="line"><span class="comment">        但不匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-扩展配置方式（推荐）"><a href="#2-4-2-扩展配置方式（推荐）" class="headerlink" title="2.4.2 扩展配置方式（推荐）"></a>2.4.2 扩展配置方式（推荐）</h3><ul>
<li>加入init-param，设置配置资源路径</li>
<li>配置好init-param后，需要在resources中创建springMVC.xml配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC前端控制器，对浏览器发送的请求进行统一处理  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置SpringMVC配置文件的位置和名称，然后在reources中创建xml配置文件    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="comment">&lt;!--    将前端控制器DispatcherServlet启动时间提前到服务器启动的时候    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    提升第一次访问的速度    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    设置SpringMVC核心控制器所能处理的请求路径</span></span><br><span class="line"><span class="comment">    / 所匹配的请求可以是/login或.html/.css/.js等方式的请求路径</span></span><br><span class="line"><span class="comment">    但不匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-配置springMVC-xml"><a href="#2-5-配置springMVC-xml" class="headerlink" title="2.5 配置springMVC.xml"></a>2.5 配置springMVC.xml</h2><h3 id="2-5-1-开启自动扫描"><a href="#2-5-1-开启自动扫描" class="headerlink" title="2.5.1 开启自动扫描"></a>2.5.1 开启自动扫描</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.mvc.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-5-2-添加Thymeleaf视图解析器"><a href="#2-5-2-添加Thymeleaf视图解析器" class="headerlink" title="2.5.2 添加Thymeleaf视图解析器"></a>2.5.2 添加Thymeleaf视图解析器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-5-3-静态资源处理配置"><a href="#2-5-3-静态资源处理配置" class="headerlink" title="2.5.3 静态资源处理配置"></a>2.5.3 静态资源处理配置</h3><ul>
<li>暂时不需要配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-6-控制层实现"><a href="#2-6-控制层实现" class="headerlink" title="2.6 控制层实现"></a>2.6 控制层实现</h2><ul>
<li>创建controller层实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求地址映射，实现页面跳转</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-7-编写页面"><a href="#2-7-编写页面" class="headerlink" title="2.7 编写页面"></a>2.7 编写页面</h2><h3 id="2-7-1-添加thymeleaf命名空间"><a href="#2-7-1-添加thymeleaf命名空间" class="headerlink" title="2.7.1 添加thymeleaf命名空间"></a>2.7.1 添加thymeleaf命名空间</h3><ul>
<li>在html标签内写入<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-8-配置服务器"><a href="#2-8-配置服务器" class="headerlink" title="2.8 配置服务器"></a>2.8 配置服务器</h2><ul>
<li>使用tomcat服务器部署项目并运行</li>
</ul>
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/tomcat.png" class="" title="tomcat">
<ul>
<li>注意这些选项的配置<ul>
<li>简化访问路径和调试方式</li>
</ul>
</li>
</ul>
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/path.png" class="" title="path">
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/action.png" class="" title="action">
<h1 id="三、RequestMapping注解"><a href="#三、RequestMapping注解" class="headerlink" title="三、RequestMapping注解"></a>三、RequestMapping注解</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><ul>
<li>将请求和控制器方法联系起来</li>
</ul>
<h2 id="3-2-注解位置"><a href="#3-2-注解位置" class="headerlink" title="3.2 注解位置"></a>3.2 注解位置</h2><ul>
<li><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
</li>
<li><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
</li>
</ul>
<h2 id="3-3-注解属性"><a href="#3-3-注解属性" class="headerlink" title="3.3 注解属性"></a>3.3 注解属性</h2><h3 id="3-3-1-value"><a href="#3-3-1-value" class="headerlink" title="3.3.1 value"></a>3.3.1 value</h3><ul>
<li>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求<ul>
<li>一个方法可以对应多个请求</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-2-method"><a href="#3-3-2-method" class="headerlink" title="3.3.2 method"></a>3.3.2 method</h3><ul>
<li>配置请求方式，如果浏览器请求方式与method方式不匹配，则会报错405</li>
<li>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>@RequestMapping的派生注解<ul>
<li>@GetMapping</li>
<li>@PostMapping</li>
<li>@PutMapping</li>
<li>@DeleteMapping</li>
</ul>
</li>
<li><p>常用的请求方式：get、post、put、delete</p>
</li>
<li><p>但是目前<strong>浏览器只支持get和post</strong>，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p>
</li>
<li><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p>
</li>
</ul>
<h2 id="3-4-ant风格路径"><a href="#3-4-ant风格路径" class="headerlink" title="3.4 ant风格路径"></a>3.4 ant风格路径</h2><ul>
<li>RequestMapping设置的请求地址时会使用到以下匹配字符<ul>
<li>?：表示任意的单个字符</li>
<li>*：表示任意的0个或多个字符</li>
<li>**：表示任意的一层或多层目录</li>
</ul>
</li>
</ul>
<h2 id="3-5-占位符（RESTful）"><a href="#3-5-占位符（RESTful）" class="headerlink" title="3.5 占位符（RESTful）"></a>3.5 占位符（RESTful）</h2><ul>
<li>原始请求路径：/deleteUser?id=1</li>
<li><p>RESTful风格请求地址：/deleteUser/{id}</p>
<ul>
<li>比如请求地址为/deleteUser/1，与原始请求路径方式作用一致</li>
<li>{xxx}匹配请求参数，可以使用多个，如：/deleteUser/{id}/{username}</li>
</ul>
</li>
<li><p>控制器获取<strong>RESTful风格请求</strong>的参数方式：</p>
<ul>
<li>需要使用注解@PathVariable，对应请求参数</li>
</ul>
</li>
<li>配置了<strong>RESTful风格请求路径</strong>，就无法使用原始请求路径进行访问了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestMapping/&#123;id&#125;&quot;,)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、获取请求参数"><a href="#四、获取请求参数" class="headerlink" title="四、获取请求参数"></a>四、获取请求参数</h1><h2 id="4-1-RequestParam注解"><a href="#4-1-RequestParam注解" class="headerlink" title="4.1 RequestParam注解"></a>4.1 RequestParam注解</h2><ul>
<li>配置需要的请求参数名</li>
<li>value可以配置参数名</li>
<li>required可以设置请求参数是否必须要传递，默认为true<ul>
<li>设置为false之后，没有传这个参数，方法形参得到的值就是null</li>
</ul>
</li>
<li>defaultValue表示为形参设置默认值<ul>
<li>前端需要传递参数但没有传递值，如/user?id=&amp;username=</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">(<span class="meta">@RequestParam(value=&quot;id&quot;,required = false，defaultValue = 1)</span>Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-RequestHeader注解"><a href="#4-2-RequestHeader注解" class="headerlink" title="4.2 RequestHeader注解"></a>4.2 RequestHeader注解</h2><ul>
<li>同RequestParam，拥有value/required/defaultValue属性</li>
<li>用于获取请求头信息</li>
</ul>
<h2 id="4-3-CookieValue注解"><a href="#4-3-CookieValue注解" class="headerlink" title="4.3 CookieValue注解"></a>4.3 CookieValue注解</h2><ul>
<li>同RequestParam，拥有value/required/defaultValue属性</li>
<li>用于获取cookie信息</li>
</ul>
<h2 id="4-4-实体类获取请求参数"><a href="#4-4-实体类获取请求参数" class="headerlink" title="4.4 实体类获取请求参数"></a>4.4 实体类获取请求参数</h2><ul>
<li>当表单的name属性和实体类的属性一一对应时，使用实体类形参即可获取到请求信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>以上方式可以接收表单请求数据，但是user数据在控制台打印时会出现乱码的问题</li>
<li>get请求数据乱码可以修改tomcat配置文件server.xml的URIEncoding属性</li>
<li>post请求乱码需要在web.xml中配置过滤器进行处理</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置过滤器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h2 id="5-1-Servlet四大作用域"><a href="#5-1-Servlet四大作用域" class="headerlink" title="5.1 Servlet四大作用域"></a>5.1 Servlet四大作用域</h2><ul>
<li><strong>page</strong>：对应pageContext对象，JSP页面容器（page对象）,当前页面有效（重定向/请求转发都会使其无效）</li>
<li><strong>request</strong>：对应HttpServletContext对象，请求对象，同一次请求有效（请求转发有效、重定向无效）</li>
<li><strong>session</strong>：对应HttpSession对象，会话对象，同一次会话有效（请求转发/重定向有效，关闭/切换浏览器无效）</li>
<li><strong>application</strong>：对应ServletContext对象，全局对象，全局有效（整个项目运行期间/切换浏览器都有效，关闭服务、其他项目中无效）</li>
<li>有效的意思是说以上4个对象使用setAttribute()方法后的有效范围</li>
<li>尽量使用最小的范围，作用域越大，系统开销越大</li>
<li><strong>经常改动</strong>的数据一般使用较小的作用域，<strong>不常变动</strong>的数据一般使用较大的作用域</li>
</ul>
<h2 id="5-2-request域对象共享数据"><a href="#5-2-request域对象共享数据" class="headerlink" title="5.2 request域对象共享数据"></a>5.2 request域对象共享数据</h2><ul>
<li><p>控制器方法执行后都会统一返回ModelAndView对象，其中包含了页面view对象信息和向域对象model中共享的数据</p>
</li>
<li><p>通过ServletAPI向request域共享对象</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>thymeleaf/index页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/success&#125;&quot;</span>&gt;</span>request域测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>thymeleaf/success页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-3-使用ModelAndView向request域对象共享数据"><a href="#5-3-使用ModelAndView向request域对象共享数据" class="headerlink" title="5.3 使用ModelAndView向request域对象共享数据"></a>5.3 使用ModelAndView向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回ModelAndView提交前端控制器进行处理</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-4-使用Model向request域对象共享数据"><a href="#5-4-使用Model向request域对象共享数据" class="headerlink" title="5.4 使用Model向request域对象共享数据"></a>5.4 使用Model向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModel</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-5-使用map向request域对象共享数据"><a href="#5-5-使用map向request域对象共享数据" class="headerlink" title="5.5 使用map向request域对象共享数据"></a>5.5 使用map向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-6-使用ModelMap向request域对象共享数据"><a href="#5-6-使用ModelMap向request域对象共享数据" class="headerlink" title="5.6 使用ModelMap向request域对象共享数据"></a>5.6 使用ModelMap向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelMap</span><span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-7-Model、ModelMap、Map的关系"><a href="#5-7-Model、ModelMap、Map的关系" class="headerlink" title="5.7 Model、ModelMap、Map的关系"></a>5.7 Model、ModelMap、Map的关系</h2><ul>
<li>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</li>
<li>BindingAwareModelMap可以实例化Model、ModelMap、Map</li>
</ul>
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/map.png" class="" title="map">
<h2 id="5-8-向session域共享数据"><a href="#5-8-向session域共享数据" class="headerlink" title="5.8 向session域共享数据"></a>5.8 向session域共享数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSession</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>访问session域的共享数据</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-9-向application域共享数据"><a href="#5-9-向application域共享数据" class="headerlink" title="5.9 向application域共享数据"></a>5.9 向application域共享数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testApplication</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">	ServletContext application = session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>访问application域的共享数据</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;application.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="六、SpringMVC视图"><a href="#六、SpringMVC视图" class="headerlink" title="六、SpringMVC视图"></a>六、SpringMVC视图</h1><h2 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6.1 介绍"></a>6.1 介绍</h2><ul>
<li>SpringMVC中的视图是View接口，视图的作用是渲染页面，将模型Model中的数据展示给用户</li>
<li>SpringMVC中的视图种类很多，默认有转发视图InternalResourceView和重定向视图RedirectView</li>
<li>当工程引入jstl的依赖，转发视图会自动转换为jstlView</li>
<li>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后得到的是ThymeleafView</li>
</ul>
<h2 id="6-2-请求转发和重定向"><a href="#6-2-请求转发和重定向" class="headerlink" title="6.2 请求转发和重定向"></a>6.2 请求转发和重定向</h2><ul>
<li>以下示例，客户端登录需要经过后端校验，然后进行页面跳转</li>
</ul>
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/forward.png" class="" title="forward">
<div class="table-container">
<table>
<thead>
<tr>
<th>区别</th>
<th>请求转发</th>
<th>重定向</th>
</tr>
</thead>
<tbody>
<tr>
<td>地址栏是否改变</td>
<td>不变check.jsp</td>
<td>改变success.jsp</td>
</tr>
<tr>
<td>是否保留第一次请求的数据</td>
<td>保留</td>
<td>不保留</td>
</tr>
<tr>
<td>请求次数</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>跳转发生的位置</td>
<td>服务端</td>
<td>客户端发出的第二次跳转</td>
</tr>
</tbody>
</table>
</div>
<h3 id="6-2-1-请求转发和重定向的使用情况"><a href="#6-2-1-请求转发和重定向的使用情况" class="headerlink" title="6.2.1 请求转发和重定向的使用情况"></a>6.2.1 请求转发和重定向的使用情况</h3><ul>
<li>请求转发时，如果是一个表单提交数据（如用户登录），地址栏会保持在check<ul>
<li>这时如果用户刷新页面，就会出现用户需要重新提交表单的情况</li>
</ul>
</li>
<li>对于需要频繁的提交数据的情况，使用请求转发就又可能出现重复提交数据的情况</li>
</ul>
<h3 id="6-2-2-示例"><a href="#6-2-2-示例" class="headerlink" title="6.2.2 示例"></a>6.2.2 示例</h3><h4 id="（1）分析"><a href="#（1）分析" class="headerlink" title="（1）分析"></a>（1）分析</h4><ul>
<li>写了一个index登录表单，success和error页面，比较下请求转发和重定向的区别</li>
<li>index用户登录表单发起/check，地址栏先显示/check，后端处理请求</li>
<li>注：请求转发和重定向都要写出对应的请求方法，比如下面的/success和/error都需要写出来，如下图：<ul>
<li>从图中可以看到，请求转发是在服务器内部发生请求的调用，/check-&gt;/error</li>
<li>重定向方式是浏览器行为，浏览器会重新发起一次请求才能进行页面的跳转</li>
</ul>
</li>
</ul>
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/for.png" class="" title="for">
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/re.png" class="" title="re">
<h4 id="（2）实现"><a href="#（2）实现" class="headerlink" title="（2）实现"></a>（2）实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/check&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">check</span><span class="params">(String username,String pwd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">&quot;zs&quot;</span>) &amp;&amp; pwd.equals(<span class="string">&quot;123123&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">success</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-2-3-小结"><a href="#6-2-3-小结" class="headerlink" title="6.2.3 小结"></a>6.2.3 小结</h3><ul>
<li>如果当前请求依赖其他请求，就需要用到请求转发和重定向的方式</li>
<li>如果只是普通的页面跳转则不需要这些操作</li>
<li>SpringMVC有三个视图解析器：ThymeleafView、InternalResourceView（请求转发解析器）、RedirectView（重定向解析器）<ul>
<li>return返回值中不加任何前缀的字段会交给ThymeleafView解析</li>
<li>return返回值中加前缀forward:的字段会交给InternalResourceView解析</li>
<li>return返回值中加前缀redirect:的字段会交给RedirectView解析</li>
</ul>
</li>
</ul>
<h2 id="6-3-ThymeleafView"><a href="#6-3-ThymeleafView" class="headerlink" title="6.3 ThymeleafView"></a>6.3 ThymeleafView</h2><ul>
<li>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</li>
</ul>
<h2 id="6-4-转发视图"><a href="#6-4-转发视图" class="headerlink" title="6.4 转发视图"></a>6.4 转发视图</h2><ul>
<li>SpringMVC中默认的转发视图是InternalResourceView</li>
<li>SpringMVC中创建转发视图的情况：<ul>
<li>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</li>
</ul>
</li>
<li>示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-5-重定向视图"><a href="#6-5-重定向视图" class="headerlink" title="6.5 重定向视图"></a>6.5 重定向视图</h2><ul>
<li><p>SpringMVC中默认的重定向视图是RedirectView</p>
</li>
<li><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
</li>
<li>示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p>
</blockquote>
<h2 id="6-6-视图控制器view-controller"><a href="#6-6-视图控制器view-controller" class="headerlink" title="6.6 视图控制器view-controller"></a>6.6 视图控制器view-controller</h2><ul>
<li>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</li>
<li>需要在springMVC.xml中添加</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">	view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件（springMVC.xml）中设置开启mvc注解驱动的标签：</p>
<p>​    <mvc:annotation-driven /></p>
</blockquote>
<h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h2 id="7-1-RESTFul简介"><a href="#7-1-RESTFul简介" class="headerlink" title="7.1 RESTFul简介"></a>7.1 RESTFul简介</h2><ul>
<li>全称：Representational State Transfer，表现层状态转移</li>
</ul>
<h2 id="7-2-RESTFul的实现"><a href="#7-2-RESTFul的实现" class="headerlink" title="7.2 RESTFul的实现"></a>7.2 RESTFul的实现</h2><ul>
<li>RESTFul风格的URL请求地址</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询</td>
<td>getUserById?id=1</td>
<td>user/1</td>
</tr>
<tr>
<td>保存</td>
<td>saveUser</td>
<td>user</td>
</tr>
<tr>
<td>删除</td>
<td>deleteUser?id=1</td>
<td>user/1</td>
</tr>
<tr>
<td>更新</td>
<td>updateUser</td>
<td>user</td>
</tr>
</tbody>
</table>
</div>
<h2 id="7-3-PUT和DELETE请求处理"><a href="#7-3-PUT和DELETE请求处理" class="headerlink" title="7.3 PUT和DELETE请求处理"></a>7.3 PUT和DELETE请求处理</h2><h3 id="7-3-1-简介"><a href="#7-3-1-简介" class="headerlink" title="7.3.1 简介"></a>7.3.1 简介</h3><ul>
<li>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</li>
<li>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></li>
</ul>
<h3 id="7-3-2-HiddenHttpMethodFilter配置"><a href="#7-3-2-HiddenHttpMethodFilter配置" class="headerlink" title="7.3.2 HiddenHttpMethodFilter配置"></a>7.3.2 HiddenHttpMethodFilter配置</h3><ul>
<li>在web.xml中过滤器中注册HiddenHttpMethodFilter</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置完HiddenHttpMethodFilter之后，如果是用表单进行修改，需要如下设置</li>
<li><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：<ul>
<li>当前请求的请求方式必须为post</li>
<li>当前请求必须传输请求参数_method</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改用户信息表单，method必须指定为post--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	配置完过滤器后一定要在表单下添加_method字段，交给后端过滤器进行处理</span></span><br><span class="line"><span class="comment">	在value中指定修改操作所确定的PUT请求</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="7-3-3-小结"><a href="#7-3-3-小结" class="headerlink" title="7.3.3 小结"></a>7.3.3 小结</h3><ul>
<li>过滤器的执行顺序：当配置有多个过滤器时，SpringMVC会按照filter-mapping的编写顺序进行配置</li>
<li>对于之前写的CharacterEncodingFilter，如果前面写了处理请求的其他过滤器，那么处理编码的过滤器就会<strong>失效</strong>，所以我们要先配置编码过滤器，再编写请求过滤器</li>
</ul>
<h2 id="7-4-RESTFul案例"><a href="#7-4-RESTFul案例" class="headerlink" title="7.4 RESTFul案例"></a>7.4 RESTFul案例</h2><h3 id="7-4-2-静态资源访问"><a href="#7-4-2-静态资源访问" class="headerlink" title="7.4.2 静态资源访问"></a>7.4.2 静态资源访问</h3><ul>
<li>springMVC.xml中没有配置静态资源时，在static目录中存放的css和js等静态文件就不会被访问到，前端就不会展示静态资源效果</li>
<li>主要原因的SpringMVC的DispatchServlet找不到静态资源文件，所以需要配置springMVC.xml开启默认DefaultServlet来访问静态资源，这样在浏览器的地址栏中就可以访问到静态资源文件了<ul>
<li>tomcat的配置目录conf中也有web.xml，里面就配置了DefaultServlet</li>
</ul>
</li>
<li>必须开启静态资源的访问才能保证静态资源能够被正确访问到，在springMVC.xml中添加如下标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开放对静态资源的访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启mvc注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>同时需要注意的是，<strong>mvc注解驱动</strong>也要同时开启，不然控制器请求会全部被默认的Servlet获取到</li>
<li>配置完两个标签后，前端请求会先被DispatchServlet获取到，DispatchServlet处理不了，就会把请求交给DefaultServlet处理，DefaultServlet再处理不了，浏览器就会报404</li>
</ul>
<h1 id="八、HttpMessageConverter报文信息转换器"><a href="#八、HttpMessageConverter报文信息转换器" class="headerlink" title="八、HttpMessageConverter报文信息转换器"></a>八、HttpMessageConverter报文信息转换器</h1><h2 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h2><ul>
<li>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</li>
<li>HttpMessageConverter提供了两个注解和两个类型<ul>
<li>注解：@RequestBody，@ResponseBody</li>
<li>类型：RequestEntity，ResponseEntity</li>
</ul>
</li>
<li>RequestEntity可以接收整个请求报文</li>
</ul>
<h2 id="8-2-RequestBody"><a href="#8-2-RequestBody" class="headerlink" title="8.2 @RequestBody"></a>8.2 @RequestBody</h2><ul>
<li>@RequestBody可以获取请求体，需要控制器设置一个形参</li>
<li>@RequestBody标识形参后，形参就可以获取到请求体的信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果：requestBody:username=admin&amp;password=123456</span></span><br></pre></td></tr></table></figure>
<h2 id="8-3-RequestEntity"><a href="#8-3-RequestEntity" class="headerlink" title="8.3 RequestEntity"></a>8.3 RequestEntity</h2><ul>
<li>RequestEntity是封装请求报文的一种类型，控制器以RequestEntity对象作为形参接收请求信息</li>
<li>RequestEntity有一些方法可以获取到请求信息<ul>
<li>getHeaders()：获取请求头信息</li>
<li>getBody()：获取请求体信息</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-4-ResponseBody"><a href="#8-4-ResponseBody" class="headerlink" title="8.4 @ResponseBody"></a>8.4 @ResponseBody</h2><ul>
<li>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</li>
<li>以下控制器方法会直接在页面打印出”success”，而不是作为success页面进行显示</li>
<li>综上：@ResponseBody可以直接向浏览器响应数据，如果不使用该注解，则可以使用传统方式HttpServletResponse处理响应</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testResponseBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-5-SpringMVC处理Json"><a href="#8-5-SpringMVC处理Json" class="headerlink" title="8.5 SpringMVC处理Json"></a>8.5 SpringMVC处理Json</h2><ul>
<li>SpringMVC并不能直接使用将ReponseBody注解的控制器方法的返回值直接转换为Json数据，必须依赖其他包完成Java对象到Json数据的转换</li>
</ul>
<h3 id="8-5-1-Jackson包"><a href="#8-5-1-Jackson包" class="headerlink" title="8.5.1 Jackson包"></a>8.5.1 Jackson包</h3><ul>
<li>导入Jackson依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在SpringMVC的核心配置文件中开启mvc注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为<strong>Json格式的字符串</strong>，注意不是Json对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在处理器方法上使用@ResponseBody注解进行标识</li>
<li>将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testResponseUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器响应结果：&#123;&quot;id&quot;:1001,&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;age&quot;:23,&quot;sex&quot;:&quot;男&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="8-6-RestController注解"><a href="#8-6-RestController注解" class="headerlink" title="8.6 @RestController注解"></a>8.6 @RestController注解</h2><ul>
<li>@RestController注解是springMVC提供的一个复合注解，整合了<strong>@Controller和@ResponseBody</strong>两个注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了<strong>@ResponseBody</strong>注解</li>
</ul>
<h2 id="8-7-ResponseEntity"><a href="#8-7-ResponseEntity" class="headerlink" title="8.7 ResponseEntity"></a>8.7 ResponseEntity</h2><ul>
<li>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</li>
<li>可以实现<strong>文件下载</strong></li>
</ul>
<h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h2 id="9-1-文件下载"><a href="#9-1-文件下载" class="headerlink" title="9.1 文件下载"></a>9.1 文件下载</h2><ul>
<li>使用ResponseEntity实现下载文件的功能</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径，即项目resources目录下的文件地址</span></span><br><span class="line">    String realPath = servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    HttpStatus statusCode = HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-2-文件上传"><a href="#9-2-文件上传" class="headerlink" title="9.2 文件上传"></a>9.2 文件上传</h2><ul>
<li>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=”multipart/form-data”</li>
<li>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</li>
</ul>
<h3 id="9-2-1-导入依赖"><a href="#9-2-1-导入依赖" class="headerlink" title="9.2.1 导入依赖"></a>9.2.1 导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="9-2-2-SpringMVC添加配置"><a href="#9-2-2-SpringMVC添加配置" class="headerlink" title="9.2.2 SpringMVC添加配置"></a>9.2.2 SpringMVC添加配置</h3><ul>
<li>必须给这个bean配置id属性”multipartResolver” ，否则这个bean就访问不到</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="9-2-3-控制器方法"><a href="#9-2-3-控制器方法" class="headerlink" title="9.2.3 控制器方法"></a>9.2.3 控制器方法</h3><ul>
<li>如果不处理重名情况，当重新上传时会覆盖掉原来上传的重名的文件，这不是我们想要的情况，所以要通过UUID处理重名的情况，为文件重命名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    String fileName = photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题，获取文件扩展名，包括&quot;.&quot;</span></span><br><span class="line">    String hzName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    String photoPath = servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// File.separator为文件分隔符</span></span><br><span class="line">    String finalPath = photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> File(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h2 id="11-1-过滤器与拦截器"><a href="#11-1-过滤器与拦截器" class="headerlink" title="11.1 过滤器与拦截器"></a>11.1 过滤器与拦截器</h2><img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/Interceptor.png" class="" title="interceptor">
<h2 id="11-2-拦截器配置"><a href="#11-2-拦截器配置" class="headerlink" title="11.2 拦截器配置"></a>11.2 拦截器配置</h2><ul>
<li>创建拦截器类FirstInterceptor，并重写三个方法<ul>
<li>preHandle()</li>
<li>postHandle()</li>
<li>afterCompletion()</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在springMVC配置文件中注入我们创建的拦截器类<ul>
<li>方式一和方式二都可实现拦截器的注入</li>
<li>/**：表示拦截所有请求，包括/user/add、/user</li>
<li>/*：表示拦截所有根请求下的请求，如/user、/add，不包括/user/add</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--方式一，这里的bean名称就是我们配置的拦截器类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>或者直接在springMVC配置文件中配置<strong>拦截和放行的请求</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截的请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--放行的请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--拦截器类还是要配置的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="11-3-拦截器方法"><a href="#11-3-拦截器方法" class="headerlink" title="11.3 拦截器方法"></a>11.3 拦截器方法</h2><ul>
<li><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
</li>
<li><p>postHandle：控制器方法执行之后执行postHandle()</p>
</li>
<li><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
</li>
</ul>
<h2 id="11-4-拦截器执行顺序"><a href="#11-4-拦截器执行顺序" class="headerlink" title="11.4 拦截器执行顺序"></a>11.4 拦截器执行顺序</h2><ul>
<li>当我们创建了多个拦截器类，它们拦截了相同的请求，那么处理的顺序是怎么样的，需要我们了解下</li>
</ul>
<h3 id="11-4-1-每个拦截器的preHandle-都返回true"><a href="#11-4-1-每个拦截器的preHandle-都返回true" class="headerlink" title="11.4.1 每个拦截器的preHandle()都返回true"></a>11.4.1 每个拦截器的preHandle()都返回true</h3><ul>
<li>我们在<strong>springMVC</strong>中配置拦截器的顺序就是多个拦截器执行的顺序</li>
<li>拦截器中的preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行，如下：</li>
</ul>
<img src="/2022/04/03/SpringMVC%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/ic.png" class="" title="ic">
<ul>
<li>原理：在源码中，SpringMVC为每个拦截器提供了一个索引InterceptorIndex<ul>
<li>当拦截器拦截请求时，是顺序遍历拦截器并执行preHandle()方法，InterceptorIndex遍历一遍始终保存上一个拦截器的索引值，本质上是顺序遍历的自增的i值</li>
<li>当执行postHandle()和AfterCompletion()时，则根据InterceptorIndex的值进行反向遍历（从大到小），因此postHandle()和AfterCompletion的执行顺序是反向的</li>
</ul>
</li>
</ul>
<h3 id="11-4-2-某个拦截器的preHandle-返回了false"><a href="#11-4-2-某个拦截器的preHandle-返回了false" class="headerlink" title="11.4.2 某个拦截器的preHandle()返回了false"></a>11.4.2 某个拦截器的preHandle()返回了false</h3><ul>
<li>preHandle()返回false的拦截器<strong>之前的拦截器</strong>的preHandle()和afterComplation()都会执行，但postHandle()不会执行</li>
<li>原理：假设有5个拦截器，第3个拦截器prehandle()返回false对请求进行拦截<ul>
<li>顺序执行到第3个拦截器的preHandle()时返回false，SpringMVC经过判断后，则直接根据InterceptorIndex去处理第3个拦截器<strong>之前的拦截器</strong>的AfterCompletion()方法，而不去执行postHandle()方法，并直接return，并不执行视图渲染</li>
</ul>
</li>
</ul>
<h1 id="十一、异常处理"><a href="#十一、异常处理" class="headerlink" title="十一、异常处理"></a>十一、异常处理</h1><h2 id="11-1-xml配置文件配置"><a href="#11-1-xml配置文件配置" class="headerlink" title="11.1 xml配置文件配置"></a>11.1 xml配置文件配置</h2><ul>
<li>在springMVC配置文件中进行配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        		properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        		properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">				error为指定跳转的视图名称，即出现ArithmeticException异常就会跳转到error页面</span></span><br><span class="line"><span class="comment">        	--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域（默认）中进行共享，在页面输出th:text=&quot;$&#123;ex&#125;&quot;的信息时，就会在页面打印出异常信息</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="11-2-注解配置异常"><a href="#11-2-注解配置异常" class="headerlink" title="11.2 注解配置异常"></a>11.2 注解配置异常</h2><ul>
<li>异常控制器，写在controller层中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">// model中添加错误信息，方便前端显示</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十二、注解配置"><a href="#十二、注解配置" class="headerlink" title="十二、注解配置"></a>十二、注解配置</h1><h2 id="12-1-创建初始化类，代替web-xml"><a href="#12-1-创建初始化类，代替web-xml" class="headerlink" title="12.1 创建初始化类，代替web.xml"></a>12.1 创建初始化类，代替web.xml</h2><ul>
<li>创建两个配置类<ul>
<li>SpringConfig</li>
<li>WebConfig</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebInit</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类，需要创建SpringConfig类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类，需要创建WebConfig类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        CharacterEncodingFilter encodingFilter = <span class="keyword">new</span> CharacterEncodingFilter();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="keyword">true</span>);</span><br><span class="line">        HiddenHttpMethodFilter hiddenHttpMethodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-2-创建SpringConfig配置类，代替Spring配置文件"><a href="#12-2-创建SpringConfig配置类，代替Spring配置文件" class="headerlink" title="12.2 创建SpringConfig配置类，代替Spring配置文件"></a>12.2 创建SpringConfig配置类，代替Spring配置文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">	<span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-3-创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#12-3-创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="12.3 创建WebConfig配置类，代替SpringMVC的配置文件"></a>12.3 创建WebConfig配置类，代替SpringMVC的配置文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        FirstInterceptor firstInterceptor = <span class="keyword">new</span> FirstInterceptor();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ITemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        ServletContextTemplateResolver templateResolver = <span class="keyword">new</span> ServletContextTemplateResolver(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> </span>&#123;</span><br><span class="line">        SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class="line">        ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM项目搭建</title>
    <url>/2022/04/07/SSM%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="一、常用依赖包"><a href="#一、常用依赖包" class="headerlink" title="一、常用依赖包"></a>一、常用依赖包</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-webmvc包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- thymeleaf-spring5视图解析 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mysql连接器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- junit单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- lombok插件快速生成get/set --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h1><h2 id="2-1-创建webapp"><a href="#2-1-创建webapp" class="headerlink" title="2.1 创建webapp"></a>2.1 创建webapp</h2><ul>
<li>在main目录下创建webapp目录<ul>
<li>创建webapp/WEB-INF</li>
<li>创建webapp/WEB-INF/templates</li>
<li>创建webapp/WEB-INF/web.xml</li>
</ul>
</li>
<li>web.xml配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置过滤器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置过滤器，用于将前端表单的get/post请求转换为put/delete请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--  配置SpringMVC前端控制器，对浏览器发送的请求进行统一处理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    配置SpringMVC配置文件的位置和名称，然后在reources中创建xml配置文件    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    将前端控制器DispatcherServlet启动时间提前到服务器启动的时候    --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    提升第一次访问的速度    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            设置SpringMVC核心控制器所能处理的请求路径</span></span><br><span class="line"><span class="comment">            / 所匹配的请求可以是/login或.html/.css/.js等方式的请求路径</span></span><br><span class="line"><span class="comment">            但不匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-1-SpringMVC配置"><a href="#2-1-SpringMVC配置" class="headerlink" title="2.1 SpringMVC配置"></a>2.1 SpringMVC配置</h2><ul>
<li>自动扫描包要改成自己的包环境</li>
<li>配置Thymeleaf视图解析器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，包命改成自己的包环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.personal&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-Mybatis配置"><a href="#2-2-Mybatis配置" class="headerlink" title="2.2 Mybatis配置"></a>2.2 Mybatis配置</h2><ul>
<li>创建resources/db.properties数据库配置文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/personalsystem?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">xxx</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建resources/mybatis.xml<ul>
<li>properties加载数据库配置文件标签不能少</li>
<li>mappers标签配置我们的dao层配置文件路径</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--显示开启全局缓存，默认是开启的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--对应我们的xxxMapper.xml路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/personal/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>开启资源路径访问，请配置到pom.xml文件中，否则xxxMapper.xml无法被访问到而导致程序报错</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置资源导出,防止dao层中的xml无法访问而报错  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-创建实体类和Mapper"><a href="#2-3-创建实体类和Mapper" class="headerlink" title="2.3 创建实体类和Mapper"></a>2.3 创建实体类和Mapper</h2><h3 id="2-3-1-创建实体类"><a href="#2-3-1-创建实体类" class="headerlink" title="2.3.1 创建实体类"></a>2.3.1 创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.personal.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer role;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-创建Mapper"><a href="#2-3-2-创建Mapper" class="headerlink" title="2.3.2 创建Mapper"></a>2.3.2 创建Mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--绑定命名空间,绑定自己的dao层接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.personal.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.personal.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from personalsystem.user;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot基础大全</title>
    <url>/2022/04/17/Springboot%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><ul>
<li><em>Spring Boot</em>是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程</li>
<li>特点：约定大于配置</li>
</ul>
<h1 id="二、快速创建Springboot-web应用"><a href="#二、快速创建Springboot-web应用" class="headerlink" title="二、快速创建Springboot web应用"></a>二、快速创建Springboot web应用</h1><h1 id="三、自动配置原理"><a href="#三、自动配置原理" class="headerlink" title="三、自动配置原理"></a>三、自动配置原理</h1><h2 id="3-1-pom依赖"><a href="#3-1-pom依赖" class="headerlink" title="3.1 pom依赖"></a>3.1 pom依赖</h2><ul>
<li>pom.xml文件的父依赖中有Springboot的所有依赖包</li>
<li>所有我们在导入依赖包时不需要亲自指定包的版本就可以导入包了</li>
</ul>
<h2 id="3-2-启动器"><a href="#3-2-启动器" class="headerlink" title="3.2 启动器"></a>3.2 启动器</h2><ul>
<li>如spring-boot-start-web，他就会帮我们自动导入web环境所有的依赖</li>
<li>springboot会将所有的功能场景都变成一个个的启动器</li>
</ul>
<h1 id="四、yaml配置文件"><a href="#四、yaml配置文件" class="headerlink" title="四、yaml配置文件"></a>四、yaml配置文件</h1><h2 id="4-1-基本配置"><a href="#4-1-基本配置" class="headerlink" title="4.1 基本配置"></a>4.1 基本配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/vue?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># jpa配置</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 配置XML映射文件中指定的实体类别名路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demo3.pojo</span></span><br><span class="line">  <span class="comment"># 配置MyBatis的xml配置文件路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 开启驼峰uName自动映射到u_name</span></span><br><span class="line">  <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印sql</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">ssm.app.mapper :</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-属性注入"><a href="#4-2-属性注入" class="headerlink" title="4.2 属性注入"></a>4.2 属性注入</h2><ul>
<li>使用yaml完成对对象的属性注入</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 与注解@ConfigurationProperties(prefix = &quot;user&quot;)的user对应</span></span><br><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">gaoyue</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span>	<span class="comment"># 使用$&#123;&#125;输入内置表达式</span></span><br><span class="line">  <span class="attr">pets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="attr">friends:</span> &#123;<span class="attr">John:</span> <span class="string">China</span>, <span class="attr">Mary:</span> <span class="string">USA</span>&#125;	<span class="comment"># 注意:后必须有空格</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;user.username&#125;_wancai</span>	<span class="comment">#表达式和字符拼接注入</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意需要导入以下依赖，否则报错：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>pojo类使用注解@ConfigurationProperties绑定配置文件，prefix为配置文件中的根变量名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span>	<span class="comment">//这里的user对应配置文件的user</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; pets;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; friends;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-3-JSR303数据校验"><a href="#4-3-JSR303数据校验" class="headerlink" title="4.3 JSR303数据校验"></a>4.3 JSR303数据校验</h2><ul>
<li><p>数据校验是yaml配置文件才有的，这也是它比properties强大的地方</p>
</li>
<li><p>在对应类上加上注解@Validated，即可以对类中属性添加数据校验对应的注解，如果不满足数据校验的格式就会直接报错，包括以下几个：</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Null</td>
<td>限制对象只能为null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>限制对象必须不为null</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>限制Boolean必须为true</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>限制Boolean必须为false</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>验证Number和String对象是否大于等于指定的值</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>验证Number和String对象是否小于等于指定的值</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>验证Number和String对象是否大于等于指定的值，小数存在精度</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>验证Number和String对象是否小于等于指定的值，小数存在精度</td>
</tr>
<tr>
<td>@Size(max,min)</td>
<td>验证对象（Array,Collection,Map,String）长度是否在给定的范围之内</td>
</tr>
<tr>
<td>@Digits</td>
<td>验证Number和String的构成是否合法</td>
</tr>
<tr>
<td>@Past</td>
<td>验证Date和Calendar对象是否在当前时间之前</td>
</tr>
<tr>
<td>@Future</td>
<td>验证Date和Calendar对象是否在当前时间之后</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>限制String必须符合指定的正则表达式</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td>
</tr>
<tr>
<td>@NotBlank</td>
<td>验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，只应用于字符串且在比较时会去除字符串的空格</td>
</tr>
<tr>
<td>@Email</td>
<td>验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td>
</tr>
</tbody>
</table>
</div>
<h1 id="五、Web开发"><a href="#五、Web开发" class="headerlink" title="五、Web开发"></a>五、Web开发</h1><h2 id="5-1-静态资源分析"><a href="#5-1-静态资源分析" class="headerlink" title="5.1 静态资源分析"></a>5.1 静态资源分析</h2><ul>
<li>静态资源一般保存在以下几个路径，优先级resources&gt;public&gt;static<ul>
<li>webjars</li>
<li>resources/public</li>
<li>resources/resources</li>
<li>resources/static</li>
<li>/**</li>
</ul>
</li>
<li>以上的资源文件都可以通过“localhost:8080/文件名”访问到文件内容</li>
</ul>
<h2 id="5-2-Thymeleaf入门"><a href="#5-2-Thymeleaf入门" class="headerlink" title="5.2 Thymeleaf入门"></a>5.2 Thymeleaf入门</h2><ul>
<li>表达式：<ul>
<li>${expression}：取出后端传递的值</li>
<li>@{link url}：引用外部链接时，需把链接放到@{}中</li>
</ul>
</li>
</ul>
<h2 id="5-3-拦截器"><a href="#5-3-拦截器" class="headerlink" title="5.3 拦截器"></a>5.3 拦截器</h2><h3 id="5-3-1-创建拦截器配置类"><a href="#5-3-1-创建拦截器配置类" class="headerlink" title="5.3.1 创建拦截器配置类"></a>5.3.1 创建拦截器配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-2-注入拦截器"><a href="#5-3-2-注入拦截器" class="headerlink" title="5.3.2 注入拦截器"></a>5.3.2 注入拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 拦截的路径</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/index.html&quot;</span>);    <span class="comment">//放行的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="六、连接数据库"><a href="#六、连接数据库" class="headerlink" title="六、连接数据库"></a>六、连接数据库</h1><h2 id="6-1-yaml配置"><a href="#6-1-yaml配置" class="headerlink" title="6.1 yaml配置"></a>6.1 yaml配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/vue?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<h2 id="6-2、整合Mybatis"><a href="#6-2、整合Mybatis" class="headerlink" title="6.2、整合Mybatis"></a>6.2、整合Mybatis</h2><h3 id="6-2-1-导入依赖包"><a href="#6-2-1-导入依赖包" class="headerlink" title="6.2.1 导入依赖包"></a>6.2.1 导入依赖包</h3><ul>
<li>导入Mybatis Spring Boot Start依赖包</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>版本要求：</li>
</ul>
<img src="/2022/04/17/Springboot%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/mybatis.png" class="" title="mybaits">
<h3 id="6-2-2-环境搭建"><a href="#6-2-2-环境搭建" class="headerlink" title="6.2.2 环境搭建"></a>6.2.2 环境搭建</h3><ul>
<li>@Mapper注解标注Mapper类</li>
<li>@Repository标注Dao层</li>
<li>创建xxxMapper.xml编写sql</li>
<li>yaml配置xxxMapper.xml的文件路径:</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 配置XML映射文件中指定的实体类别名路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.demo3.pojo</span></span><br><span class="line">  <span class="comment"># 配置MyBatis的xml配置文件路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 开启驼峰uName自动映射到u_name</span></span><br><span class="line">  <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="七、认证与授权"><a href="#七、认证与授权" class="headerlink" title="七、认证与授权"></a>七、认证与授权</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>后端框架</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3d脚本大全</title>
    <url>/2022/04/29/Unity3d%E8%84%9A%E6%9C%AC%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、常用对象和方法"><a href="#一、常用对象和方法" class="headerlink" title="一、常用对象和方法"></a>一、常用对象和方法</h1><h1 id="判断键盘按键"><a href="#判断键盘按键" class="headerlink" title="判断键盘按键"></a>判断键盘按键</h1><ul>
<li>为GameObject绑定一个脚本组件</li>
<li>脚本代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class cubetest : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;测试键盘控制&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKeyDown(KeyCode.D))</span><br><span class="line">        &#123;</span><br><span class="line">            this.transform.Translate(Vector3.right * 1);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            this.transform.Translate(Vector3.left * 1);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (Input.GetKeyDown(KeyCode.S))</span><br><span class="line">        &#123;</span><br><span class="line">            this.transform.Translate(Vector3.down * 1);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (Input.GetKeyDown(KeyCode.W))</span><br><span class="line">        &#123;</span><br><span class="line">            this.transform.Translate(Vector3.up * 1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>unity</category>
      </categories>
      <tags>
        <tag>游戏开发</tag>
        <tag>unity3d</tag>
        <tag>C#脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习路线</title>
    <url>/2022/05/14/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<img src="/2022/05/14/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE.jpg" class="" title="img">]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>成神之路</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM基础大全</title>
    <url>/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1-JVM结构"><a href="#1-1-JVM结构" class="headerlink" title="1.1 JVM结构"></a>1.1 JVM结构</h2><ul>
<li>方法区/堆是多线程共享的</li>
<li>虚拟机栈/本地方法栈/程序计数器是每个线程独有一份的，即线程私有</li>
</ul>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/jvm.png" class="" title="jvm">
<h2 id="1-2-虚拟机历史"><a href="#1-2-虚拟机历史" class="headerlink" title="1.2 虚拟机历史"></a>1.2 虚拟机历史</h2><h2 id="1-3-结构分析"><a href="#1-3-结构分析" class="headerlink" title="1.3 结构分析"></a>1.3 结构分析</h2><h3 id="1-3-1-类加载器"><a href="#1-3-1-类加载器" class="headerlink" title="1.3.1 类加载器"></a>1.3.1 类加载器</h3><p>类的生命周期</p>
<p>加载、验证、准备、解析、初始化、使用、卸载</p>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/classload.png" class="" title="classload">
<h3 id="1-3-2-运行时数据区"><a href="#1-3-2-运行时数据区" class="headerlink" title="1.3.2 运行时数据区"></a>1.3.2 运行时数据区</h3><h4 id="（1）程序计数器"><a href="#（1）程序计数器" class="headerlink" title="（1）程序计数器"></a>（1）程序计数器</h4><p>程序计数器Program Counter Register是一小块内存空间，它表示的是执行<strong>字节码指令的行号</strong>，<strong>字节码解释器</strong>工作时就是通过改变程序计数器来选取<strong>下一条需要执行的字节码指令</strong></p>
<p>程序计数器有以下特点：</p>
<ul>
<li>线程私有</li>
<li>线程执行的是Java方法，则程序计数器记录的是字节码指令的地址</li>
<li>线程执行的是本地（Native）方法，那么程序计数器的值为空（Undefined）</li>
</ul>
<h4 id="（2）虚拟机栈"><a href="#（2）虚拟机栈" class="headerlink" title="（2）虚拟机栈"></a>（2）虚拟机栈</h4><p>一个程序的运行都要维护一个堆栈，这里的堆用于存放数据，而栈用于处理数据是如何执行的，JVM也包含这样的设计思想，这里所要介绍的虚拟机栈就是用来存放方法执行的线程内存模型。</p>
<p>它有以下几个特点：</p>
<ul>
<li>每个线程创建时，都会创建一个虚拟机栈</li>
<li>当线程中的方法被调用时，都会将其作为一个<strong>栈帧</strong>压入到虚拟机栈中</li>
<li>虚拟机栈是<strong>线程私有</strong>的</li>
</ul>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/vmstack.png" class="" title="vmstack">
<p>虚拟机栈存在以下异常：</p>
<ul>
<li>StackOverflowError：线程请求的栈的深度大于虚拟机所允许的深度，则抛出此异常</li>
<li>OutOfMemoryError：虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存是，则抛出此异常</li>
</ul>
<h4 id="（3）本地方法栈"><a href="#（3）本地方法栈" class="headerlink" title="（3）本地方法栈"></a>（3）本地方法栈</h4><p>本地方法栈是服务于本地（Native）方法的，虚拟机栈是服务于Java方法的，这两个本质上没什么区别，在HotSpot虚拟机中直接将两者合二为一了</p>
<h4 id="（4）Java堆"><a href="#（4）Java堆" class="headerlink" title="（4）Java堆"></a>（4）Java堆</h4><p>Java堆的作用是存放对象的实例，它有以下特点：</p>
<ul>
<li><strong>线程共享</strong></li>
<li>Java堆是被垃圾收集器管理的内存区域</li>
</ul>
<p>存在的异常：</p>
<ul>
<li>OutOfMemoryError：当Java堆无法再为实例分配足够的内存，且堆无法再扩展时，抛出此异常</li>
</ul>
<h4 id="（5）方法区"><a href="#（5）方法区" class="headerlink" title="（5）方法区"></a>（5）方法区</h4><p>方法区用于存储已被虚拟机加载的<strong>类型信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、即时编译器编译后的代码缓存等数据</p>
<p>方法区还包含一个运行时常量池（Runtime Constant Pool），Java编译为Class文件后，Class文件除了有类的版本、字段、方法、接口等描述信息外，还包含<strong>常量池表（Constant Pool Table）</strong>，用于存放编译期生成的各种字面量与符号引用，这部分内容将在<strong>类加载</strong>后存放到<strong>方法区的运行时常量池</strong>中</p>
<p>存在的异常：</p>
<ul>
<li>OutOfMemoryError：当方法区无法满足新的内存分配需求时，抛出此异常</li>
</ul>
<h3 id="1-3-4-执行引擎"><a href="#1-3-4-执行引擎" class="headerlink" title="1.3.4 执行引擎"></a>1.3.4 执行引擎</h3><p>执行引擎包含三个部分：解释器、JIT即时编译器、垃圾回收器</p>
<p>JVM执行引擎的主要任务就是将字节码指令解释为对应平台上的本地机器指令 </p>
<h1 id="二、类加载器"><a href="#二、类加载器" class="headerlink" title="二、类加载器"></a>二、类加载器</h1><h2 id="2-1-类加载过程"><a href="#2-1-类加载过程" class="headerlink" title="2.1 类加载过程"></a>2.1 类加载过程</h2><img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/cl2.png" class="" title="cl2">
<h2 id="2-2-类加载器分类"><a href="#2-2-类加载器分类" class="headerlink" title="2.2 类加载器分类"></a>2.2 类加载器分类</h2><h3 id="2-2-1-启动（引导）类加载器"><a href="#2-2-1-启动（引导）类加载器" class="headerlink" title="2.2.1 启动（引导）类加载器"></a>2.2.1 启动（引导）类加载器</h3><ul>
<li>这个类加载器使用C/C++实现，嵌套在JVM内部</li>
<li>用来加载Java的核心库（JAVA_HOME/jre/lib/rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类</li>
<li>没有父加载器，并不继承java.lang.ClassLoader</li>
<li>负责加载扩展类加载器和系统类加载器，并指定未他们的父类加载器</li>
<li>出于安全考虑，Bootstrap启动类加载器只加载包名未java、javax、sun等开头的类</li>
</ul>
<h3 id="2-2-2-扩展类加载器"><a href="#2-2-2-扩展类加载器" class="headerlink" title="2.2.2 扩展类加载器"></a>2.2.2 扩展类加载器</h3><ul>
<li>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现</li>
<li>派生于ClassLoader类</li>
<li>父类加载器为启动类加载器</li>
<li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录jre/lib/ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载</li>
</ul>
<h3 id="2-2-3-系统（应用程序）类加载器"><a href="#2-2-3-系统（应用程序）类加载器" class="headerlink" title="2.2.3 系统（应用程序）类加载器"></a>2.2.3 系统（应用程序）类加载器</h3><ul>
<li>Java语言编写，由sun.misc.Launcher$AppClassLoader实现</li>
<li>派生于ClassLoader类</li>
<li>父类加载器为扩展类加载器</li>
<li>负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</li>
<li><strong>该类加载是程序中默认的类加载器</strong>，一般来说，Java应用的类都是由它来完成加载</li>
<li>通过ClassLoader.getSystemClassLoader()方法可以获取到该类加载器</li>
</ul>
<h3 id="2-2-4-用户自定义类加载器"><a href="#2-2-4-用户自定义类加载器" class="headerlink" title="2.2.4 用户自定义类加载器"></a>2.2.4 用户自定义类加载器</h3><ul>
<li>隔离加载类</li>
<li>修改类加载的方式</li>
<li>扩展加载源</li>
<li>防止源码泄漏</li>
</ul>
<h2 id="2-3-双亲委派机制"><a href="#2-3-双亲委派机制" class="headerlink" title="2.3 双亲委派机制"></a>2.3 双亲委派机制</h2><p>双亲委派机制是指子加载器加载时会向上传递依靠父加载器进行加载，如果父加载器无法进行处理才会一步步的交给子加载器进行类的加载操作</p>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/ler.png" class="" title="JVM基础大全">
<h1 id="三、程序寄存器（PC寄存器）"><a href="#三、程序寄存器（PC寄存器）" class="headerlink" title="三、程序寄存器（PC寄存器）"></a>三、程序寄存器（PC寄存器）</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><p>程序计数器（Program Counter Register），寄存器Register的命名来源于CPU的寄存器，寄存器存储指令相关的信息，CPU只有把数据装载到寄存器中才能运行</p>
<p>JVM的PC寄存器的概念跟物理上CPU的寄存器有些区别，<strong>PC寄存器是一种对物理寄存器的抽象模拟</strong></p>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/runtime.png" class="" title="runtime">
<h2 id="3-2-作用"><a href="#3-2-作用" class="headerlink" title="3.2 作用"></a>3.2 作用</h2><p>PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码，由执行引擎读取下一条指令</p>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/cthread.png" class="" title="cthread">
<h2 id="3-3-特点"><a href="#3-3-特点" class="headerlink" title="3.3 特点"></a>3.3 特点</h2><ul>
<li>所占空间内容小</li>
<li>线程私有，生命周期与线程一致</li>
<li>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。程序计数器会存储当前程序正在执行的Java方法的JVM指令地址；如果是在执行native方法，则是未指定值（undefined）</li>
<li>它是<strong>程序控制流的指示器</strong>，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</li>
<li>此区域不会出现<strong>OurOfMemoryError（OOM）</strong></li>
</ul>
<h1 id="四、虚拟机栈"><a href="#四、虚拟机栈" class="headerlink" title="四、虚拟机栈"></a>四、虚拟机栈</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><p>Java虚拟机栈也叫Java栈，每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用</p>
<ul>
<li><p>特点：线程私有</p>
</li>
<li><p>生命周期：与线程一致</p>
</li>
<li><p>作用：主管Java程序的运行，保存方法的局部变量、部分结果，并参与方法的调用和返回</p>
</li>
</ul>
<h2 id="4-2-栈帧的内部结构"><a href="#4-2-栈帧的内部结构" class="headerlink" title="4.2 栈帧的内部结构"></a>4.2 栈帧的内部结构</h2><ul>
<li>局部变量表Local Variables</li>
<li>操作数栈Operate Stack：</li>
<li>动态链接Dynamic Linking：指向运行时常量池的方法引用</li>
<li>方法返回地址Return Address：</li>
<li>一些附加信息</li>
</ul>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/zz.png" class="" title="zz">
<h2 id="4-3-局部变量表"><a href="#4-3-局部变量表" class="headerlink" title="4.3 局部变量表"></a>4.3 局部变量表</h2><p>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据包括各类基本数据类型、对象引用（reference），以及returnAddress类型</p>
<p>局部变量表所需的容量大小是在编译器期确定下来的，并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的</p>
<p>boolean、byte、short、char在存储前会被转换位int</p>
<h2 id="4-4-slot的理解"><a href="#4-4-slot的理解" class="headerlink" title="4.4 slot的理解"></a>4.4 slot的理解</h2><p>Slot（变量槽）是局部变量表的最基础的存储单元</p>
<p>在局部变量表里，32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot</p>
<p>JVM会为局部变量表中的每个Slot都分配一个访问索引，通过这个索即可成功访问到局部变量表中指定的局部变量值</p>
<h2 id="4-5-操作数栈"><a href="#4-5-操作数栈" class="headerlink" title="4.5 操作数栈"></a>4.5 操作数栈</h2><p>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</p>
<p>32位的类型占用一个栈单位深度</p>
<p>64位类型占用两个栈单位深度</p>
<h2 id="4-6-动态链接（方法的调用）"><a href="#4-6-动态链接（方法的调用）" class="headerlink" title="4.6 动态链接（方法的调用）"></a>4.6 动态链接（方法的调用）</h2><p>动态链接：栈帧内部指向<strong>运行时常量池</strong>中<strong>该栈帧所属方法的引用</strong>，包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接，比如invokedynamic指令</p>
<p>动态链接的作用：在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为<strong>符号引用( symbolic Reference）</strong>保存在class文件的<strong>常量池</strong>里。比如:描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用</strong>就是为了将这些<strong>符号引用</strong>转换为调用方法的<strong>直接引用</strong>。</p>
<h3 id="4-6-1-方法的绑定机制"><a href="#4-6-1-方法的绑定机制" class="headerlink" title="4.6.1 方法的绑定机制"></a>4.6.1 方法的绑定机制</h3><p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关。</p>
<p><strong>静态链接：</strong>当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期<strong>可知且运行期保持不变</strong>时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</p>
<p><strong>动态链接：</strong>如果被调用的方法在<strong>编译期无法被确定下来</strong>，也就是说，只能够在程序<strong>运行期</strong>将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。</p>
<p>对应的方法的绑定机制为:<strong>早期绑定（Early Binding）</strong>和<strong>晚期绑定(Late Binding）</strong>。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。</p>
<p><strong>早期绑定：</strong>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</p>
<p><strong>晚期绑定：</strong>如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也就被称之为晚期绑定。这里就体现出了<strong>多态</strong>的特性</p>
<h3 id="4-6-2-虚方法、非虚方法和虚方法表"><a href="#4-6-2-虚方法、非虚方法和虚方法表" class="headerlink" title="4.6.2 虚方法、非虚方法和虚方法表"></a>4.6.2 虚方法、非虚方法和虚方法表</h3><p>非虚方法：如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法。如静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法。其他方法称为虚方法。</p>
<p>子类多态性的前提：1、类的继承关系；2、方法的重写</p>
<p>虚方法表：由于Java中会经常使用到动态分派，如果在每次动态分派过程中都要重新在类的方法元数据中搜索合适的目标就容易影响效率，所以JVM在每个类的方法区中都建立一个虚方法表，使用索引表来查找虚方法</p>
<p>虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕</p>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/virtual.png" class="" title="virtual">
<p>如果Animal中重写了toString()方法，则toString()的就会指向Animal，否则就会指向Object</p>
<h3 id="4-6-3-方法调用指令"><a href="#4-6-3-方法调用指令" class="headerlink" title="4.6.3 方法调用指令"></a>4.6.3 方法调用指令</h3><p>虚拟机中提供了以下几条方法调用指令:·普通调用指令:</p>
<ul>
<li><p>invokestatic:调用静态方法，解析阶段确定唯一方法版本</p>
</li>
<li><p>invokespecial:调用<code>&lt;init&gt;</code>方法、私有及父类方法，解析阶段确定唯一方法版本</p>
</li>
<li><p>invokevirtual：调用所有虚方法</p>
</li>
<li><p>invokeinterface:调用接口方法</p>
</li>
</ul>
<p>动态调用指令:</p>
<ul>
<li>invokedynamic:动态解析出需要调用的方法，然后执行前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本。其中invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法。</li>
</ul>
<h3 id="4-6-4-invokedynamic指令"><a href="#4-6-4-invokedynamic指令" class="headerlink" title="4.6.4 invokedynamic指令"></a>4.6.4 invokedynamic指令</h3><p>动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之是动态类型语言。</p>
<p>说的再直白一点就是，静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息，这是动态语言的一个重要特征，比如js、python。</p>
<p>Java仍然属于静态语言，但拥有动态特性，动态性体现在lambda表达式上</p>
<h3 id="4-6-5-方法重写的本质"><a href="#4-6-5-方法重写的本质" class="headerlink" title="4.6.5 方法重写的本质"></a>4.6.5 方法重写的本质</h3><ol>
<li><p>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作C</p>
</li>
<li><p>先从C开始查找，如果从类型c中找到<strong>与常量池中的描述与名称都相符的方法</strong>则进行访问权限校验（即public/protected/private访问权限的设置或者不同包之间的访问权限），如果通过则返回这个方法的直接引用，如果不通过，则返回java.lang.IllegalAccessError异常。</p>
</li>
<li><p>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。</p>
</li>
<li><p>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。</p>
</li>
</ol>
<h2 id="4-7-方法返回地址return-address"><a href="#4-7-方法返回地址return-address" class="headerlink" title="4.7 方法返回地址return address"></a>4.7 方法返回地址return address</h2><p>方法返回地址存放该方法的PC寄存器的值，即调用该方法的指令的下一条指令的地址</p>
<p>一个方法的结束，有两种方式：</p>
<ul>
<li>正常执行完成，方法退出后返回到该方法被调用的位置</li>
<li>出现未处理的异常，非正常退出，返回地址要通过异常表来确定，栈帧不会保存这部分信息</li>
</ul>
<p>方法正常调用后使用哪一条返回指令需要根据方法返回值的实际数据类型确定，方法返回指令：ireturn（byte、char、short、int、boolearn）、lreturn、freturn、dreturn、areturn（引用类型），最后return指令供void、实例初始化方法、类和接口的初始化方法使用</p>
<p>方法的退出就是当前栈帧出栈的过程，此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器等，让调用者方法继续执行下去</p>
<h2 id="4-8、本地方法接口"><a href="#4-8、本地方法接口" class="headerlink" title="4.8、本地方法接口"></a>4.8、本地方法接口</h2><p>Native Method就是一个Java调用非Java代码的接口，比如C/C++</p>
<p>Java在定义一个native method时，并不提供实现体（有些像定义一个Java接口），因为其实现体是由非java语言在外面实现的</p>
<p>Java中的本地方法用native进行修饰，native可以与所有其它的java标识符连用，但是abstract除外</p>
<h3 id="4-8-1-使用本地方法的原因"><a href="#4-8-1-使用本地方法的原因" class="headerlink" title="4.8.1 使用本地方法的原因"></a>4.8.1 使用本地方法的原因</h3><h3 id="4-8-2-本地方法栈"><a href="#4-8-2-本地方法栈" class="headerlink" title="4.8.2 本地方法栈"></a>4.8.2 本地方法栈</h3><h1 id="五、堆"><a href="#五、堆" class="headerlink" title="五、堆"></a>五、堆</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><ul>
<li><p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域，Java堆区在JVM启动时候即被创建，其空间大小也就确定了。堆是JVM管理的最大一块内存空间，堆的大小是可以调节的</p>
</li>
<li><p>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域</p>
</li>
<li><p>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的</p>
</li>
<li>《Java虚拟机规范》中对Java堆的描述是：<strong>所有的对象实例以及数组都应当在运行时分配在堆上</strong>。<ul>
<li>从实际使用角度看：“几乎”所有的对象实例都在堆分配内存，但并非全部。因为还有一些对象是在栈上分配的（逃逸分析，标量替换）</li>
</ul>
</li>
<li>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除</li>
</ul>
<h2 id="5-2-堆空间结构"><a href="#5-2-堆空间结构" class="headerlink" title="5.2 堆空间结构"></a>5.2 堆空间结构</h2><ul>
<li>JDK7把堆空间分为新生代+老年代+永久代</li>
<li>JDK8把堆空间分为新生代+老年代+元空间</li>
<li>年轻代中的S0和S1分别表示幸存者一区（from区）和幸存者二区（to区），程序运行时只会选择其中一个存放数据</li>
<li>新生代与老年代的比例为1：2</li>
</ul>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/heap.png" class="" title="head">
<h3 id="5-2-1-新生代"><a href="#5-2-1-新生代" class="headerlink" title="5.2.1 新生代"></a>5.2.1 新生代</h3><p>新生成的对象优先存放在新生区中，新生区对象朝生夕死，存活率很低，在新生代中，常规应用进行一次垃圾收集一般可以回收70% ~ 95% 的空间，回收效率很高，<strong>默认的新生代与老年代的比例为1：2</strong></p>
<p>HotSpot将新生区划分为三块，一块较大的Eden（伊甸）空间和两块较小的Survivor（幸存者）空间，分别称为From区和To区，<strong>默认比例为8：1：1</strong></p>
<p>划分的目的是因为HotSpot采用复制算法来回收新生代，设置这个比例是为了充分利用内存空间，减少浪费。新生成的对象在Eden区分配（大对象除外，大对象直接进入老年代），当Eden区没有足够的空间进行分配时，虚拟机将发起一次Minor GC</p>
<h3 id="5-2-2-老年代"><a href="#5-2-2-老年代" class="headerlink" title="5.2.2 老年代"></a>5.2.2 老年代</h3><p>在新生代中经历了多次（具体看虚拟机配置的阀值）GC后仍然存活下来的对象会进入老年代中。老年代中的对象生命周期较长，存活率比较高，在老年代中进行GC的频率相对而言较低，而且回收的速度也比较慢。</p>
<ul>
<li><strong>大对象</strong>直接进入老年代：JVM中有这样一个参数 <strong>-XX: PretenureSizeThreshold</strong> ，指定大于该设置值的对象直接在老年代分配，这样做的目的就是避免在Eden区以及2个Survivor区之间来回复制，产生大量的内存复制操作</li>
<li><strong>对象年龄</strong>：对象通常在Eden区诞生，如果经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，该对象会被移动到Survivor中，并且将其对象设为1岁，对象在Survivor区中每熬过一次Minor GC，年龄就增加一岁，当它的年龄增加到一定程度（默认15），就会被晋升到老年代中，对象晋升老年代的年龄阈值， 可以通过参数-XX:MaxTenuringThreshold设置</li>
</ul>
<h3 id="5-2-3-永久代-元空间"><a href="#5-2-3-永久代-元空间" class="headerlink" title="5.2.3 永久代/元空间"></a>5.2.3 永久代/元空间</h3><p>永久区存储类信息、常量、静态变量、即时编译器编译后的代码等数据，对这一区域而言，Java虚拟机规范指出可以不进行垃圾收集，一般而言不会进行垃圾回收。</p>
<ul>
<li>JDK1.6之前，永久代，常量池在方法区</li>
<li>JDK1.7,永久代，但是慢慢退化了，去永久代，常量池在堆中</li>
<li>JDK1.8之后，无永久代，常量池在元空间</li>
</ul>
<p>这个区域常驻内存的，用来存放JDK自身携带的Class对象，Interface元数据，存储的是Java运行的一些环境或者类信息，这个区域不存在垃圾回收。关闭VM虚拟机就会释放这个区域的内存。</p>
<h2 id="5-3-对象内存分配过程"><a href="#5-3-对象内存分配过程" class="headerlink" title="5.3 对象内存分配过程"></a>5.3 对象内存分配过程</h2><img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/memory.png" class="" title="memory">
<ul>
<li>对象优先在Eden区分配，当进行YGC时，会将存活的对象放到From区，To区空着不用。</li>
<li>当第二次进行YGC时，会将From区和Eden区存活的对象复制到To区，此时Eden区和From区就为空。</li>
<li>当第三次进行YGC时，会将To区和Eden区存活的对象复制到From区，此时Eden区和To就为空。</li>
<li>按照此规律，循环往复下去</li>
</ul>
<h3 id="5-3-1-TLAB"><a href="#5-3-1-TLAB" class="headerlink" title="5.3.1 TLAB"></a>5.3.1 TLAB</h3><p>TLAB全称为Thread Local Allocation Buffer，由于以下原因，从而导致TLAB的产生</p>
<ul>
<li>堆区是<strong>线程共享区域</strong>，任何线程都可以访问到堆区中的共享数据</li>
<li>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内<br>存空间是线程不安全的</li>
<li>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</li>
</ul>
<p>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，<strong>JVM为每个线程分配了一个私有缓存区域</strong>，它包含在Eden空间内。</p>
<p>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为<strong>快速分配策略</strong>。</p>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/tlab.png" class="" title="tlab">
<p>现在new一个对象，然后TLAB分配，如果TLAB空间够用，那么就对象实例化，如果不够用就只能用Eden公共的部分，如果还不够用，那么就触发GC</p>
<h2 id="5-4-GC垃圾回收"><a href="#5-4-GC垃圾回收" class="headerlink" title="5.4 GC垃圾回收"></a>5.4 GC垃圾回收</h2><p>JVM在进行Gc时，并非每次都对新生代、老年代、方法区一起回收的,大部分时候回收的都是指新生代。</p>
<p>针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大种类型:一种是部分收集(Partial GC）,一种是整堆收集（Full GC)</p>
<ul>
<li>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为:<ul>
<li>新生代收集（Minor GC / Young Gc）：只是新生代的垃圾收集</li>
<li>老年代收集（Major Gc / old GC)：只是老年代的垃圾收集。<br>目前,只有CMS GC会有单独收集老年代的行为。注意，很多时候Major Gc会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</li>
<li>混合收集（Mixed Gc):收集整个新生代以及部分老年代的垃圾收集。<br>目前，只有G1 Gc会有这种行为</li>
</ul>
</li>
<li>整堆收集（Full GC)：收集整个java堆和方法区的垃圾收集。</li>
</ul>
<h3 id="5-4-1-触发条件"><a href="#5-4-1-触发条件" class="headerlink" title="5.4.1 触发条件"></a>5.4.1 触发条件</h3><ul>
<li>年轻代Minor GC：当年轻代空间不足时，就会触发Minor Gc，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。(每次 Minor GC会清理年轻代的内存)。<ul>
<li>因为Java对象大多都具备朝生夕灭的特性，所以 Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。Minor GC会引发STW，即暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行。</li>
</ul>
</li>
<li>老年代Major Gc：指发生在老年代的Gc，对象从老年代消失时，我们说“Major GC”或“Full GC”发生了<ul>
<li>在老年代空间不足时，会先尝试触发Minor Gc。如果之后空间还不足，则触发Major GC</li>
<li>Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长</li>
<li>如果Major GC后，内存还不足，就报OOM了</li>
</ul>
</li>
<li>整堆收集（Full GC)<ul>
<li>调用<strong>System.gc()时，系统建议执行Full GC</strong>，但是不必然执行</li>
<li>老年代空间不足</li>
<li>方法区空间不足</li>
<li>通过<strong>Minor GC</strong>后进入老年代的平均大小大于老年代的可用内存</li>
<li>有<strong>Edan</strong>区、<strong>survivor space0（From Space）区向survivor space1（To Space）区复制时，对象大小大于To Space</strong>可用内存，则把对象转存到老年代，且老年代的可用内存小于该对象大小</li>
<li>Full GC是开发或调优中尽量避免的</li>
</ul>
</li>
</ul>
<h2 id="5-5-栈上分配"><a href="#5-5-栈上分配" class="headerlink" title="5.5 栈上分配"></a>5.5 栈上分配</h2><h2 id="5-6-代码优化"><a href="#5-6-代码优化" class="headerlink" title="5.6 代码优化"></a>5.6 代码优化</h2><h1 id="六、方法区"><a href="#六、方法区" class="headerlink" title="六、方法区"></a>六、方法区</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p>《Java虚拟机规范》中明确说明:”尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。”但对于HotSpotJVM而言，方法区还有一个别名叫做Non-Heap(非堆)，目的就是要和堆分开。</p>
<p>方法区具有以下特点：</p>
<ul>
<li>方法区（(Method Area）与Java堆一样，是各个<strong>线程共享</strong>的内存区域。</li>
<li>方法区在JVM启动的时候被创建,并且它的实际的物理内存空间中和Java堆区一样都可以是不连续的。</li>
<li>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</li>
<li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误: java.lang.outOfMemoryError</li>
<li>java.lang. outOfMemoryError: PermGen space或者java.lang. outOfMemoryError: Metaspace<ul>
<li>加载大量的第三方的Jar包</li>
<li>Tomcat部署的工程太多</li>
<li>大量动态的生成反射类</li>
</ul>
</li>
<li>关闭JVM就会释放这个区域的内存。</li>
</ul>
<p>本质上，<strong>永久代、元空间都是对方法区的实现</strong>，不能直接对其画等号，因为还有其他的方法区实现方式，永久代和永久代存在本质区别：</p>
<ul>
<li>元空间不在虚拟机设置的内存中，而是使用本地内存</li>
</ul>
<img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/method.png" class="" title="method">
<h2 id="6-2-方法区大小设置"><a href="#6-2-方法区大小设置" class="headerlink" title="6.2 方法区大小设置"></a>6.2 方法区大小设置</h2><ul>
<li>jdk7及以前：<ul>
<li>通过-XX:PermSize来设置永久代初始分配空间。默认值是20.75M</li>
<li>-XX:MaxPermSize来设定永久代最大可分配空间。32位机器默认是64M，64位机器模式是82M</li>
<li>当JV8M加载的类信息容量超过了这个值，会报异常outOfMemoryError:PermGen space。</li>
</ul>
</li>
<li>jdk8及以后：<ul>
<li>元数据区大小可以使用参数-XX:Metaspacesize和-XX:MaxMetaspaceSize指定，替代上述原有的两个参数。</li>
<li>默认值依赖于平台。windows下，-XX:MetaspaceSize是21M，-XX:MaxMetaspacesize 的值是-1，即没有限制。</li>
<li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常outOfMemoryError: Metaspace</li>
<li>-XX:MetaspaceSize:设置初始的元空间大小。对于一个64位的服务器端JVM来说，其默认的-XX:Metaspacesize值为21MB。这就是初始的<strong>高水位线</strong>，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活）,然后这个高水位线将会重置。新的高水位线的值取决于Gc后释放了多少元空间。如果释放的空间不足，那么在不超过MaxMetaspacesize时，适当提高该值。如果释放空间过多，则适当降低该值。</li>
<li>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频繁地GC ，建议将-XX:Metaspacesize设置为一个相对较高的值。</li>
</ul>
</li>
</ul>
<h2 id="6-3-内部结构"><a href="#6-3-内部结构" class="headerlink" title="6.3 内部结构"></a>6.3 内部结构</h2><img src="/2022/05/16/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/methodinner.png" class="" title="methodinner">
<h3 id="6-3-1-存放内容"><a href="#6-3-1-存放内容" class="headerlink" title="6.3.1 存放内容"></a>6.3.1 存放内容</h3><ul>
<li>类型信息<ul>
<li>这个类型的完整有效名称（全名=包名.类名)</li>
<li>这个类型直接父类的完整有效名(对于interface或是java.lang.0bject，都没有父类)</li>
<li>这个类型的修饰符(public, abstract,final的某个子集)</li>
<li>这个类型直接接口的一个有序列表</li>
</ul>
</li>
<li>域信息（成员变量）<ul>
<li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</li>
<li>域的相关信息包括:域名称、域类型、域修饰符(public, private,protected,static,final, volatile, transient的某个子集)</li>
</ul>
</li>
<li>方法信息<ul>
<li>方法名称</li>
<li>方法的返回类型(或void)·方法参数的数量和类型(按顺序)</li>
<li>方法的修饰符(public, private,protected,static, final,synchronized,native,abstract的一个子集)</li>
<li>方法的字节码(bytecodes)、操作数栈、局部变量表及大小(abstract和native方法除外)</li>
<li>异常表(abstract和native方法除外)<ul>
<li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li>
</ul>
</li>
</ul>
</li>
<li>静态变量、常量、即时编译器编译后的代码缓存</li>
</ul>
<h2 id="6-4-运行时常量池"><a href="#6-4-运行时常量池" class="headerlink" title="6.4 运行时常量池"></a>6.4 运行时常量池</h2><p>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述信息外，还包含一项信息那就是常量池表(constant pool Table)，包括各种字面量和对类型、域和方法的符号引用。</p>
<p>常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。简单来说就是存放字面量和符号引用</p>
<p>常量池是 <code>*.class</code> 文件中的。当类的字节码被加载到内存中后，他的常量池信息就会集中放入到一块内存，这块内存就称为运行时常量池，并且把里面的<code>符号地址</code>变<code>为真实地址</code>。</p>
<p>以下为java代码编译后的<code>*.class</code>文件的常量池内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ===========================================常量池===============================================</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">6.</span>#<span class="number">20</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">21.</span>#<span class="number">22</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">3</span> = String             #<span class="number">23</span>            <span class="comment">// hello world</span></span><br><span class="line">   #<span class="number">4</span> = Methodref          #<span class="number">24.</span>#<span class="number">25</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">26</span>            <span class="comment">// org/memory/jvm/t5/HelloWorld</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">27</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">7</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">8</span> = Utf8               ()V</span><br><span class="line">   #<span class="number">9</span> = Utf8               Code</span><br><span class="line">  #<span class="number">10</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">11</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">12</span> = Utf8               <span class="keyword">this</span></span><br><span class="line">  #<span class="number">13</span> = Utf8               Lorg/memory/jvm/t5/HelloWorld;</span><br><span class="line">  #<span class="number">14</span> = Utf8               main</span><br><span class="line">  #<span class="number">15</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">16</span> = Utf8               args</span><br><span class="line">  #<span class="number">17</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">18</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">19</span> = Utf8               HelloWorld.java</span><br><span class="line">  #<span class="number">20</span> = NameAndType        #<span class="number">7</span>:#<span class="number">8</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">21</span> = Class              #<span class="number">28</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">22</span> = NameAndType        #<span class="number">29</span>:#<span class="number">30</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">23</span> = Utf8               hello world</span><br><span class="line">  #<span class="number">24</span> = Class              #<span class="number">31</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">25</span> = NameAndType        #<span class="number">32</span>:#<span class="number">33</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">26</span> = Utf8               org/memory/jvm/t5/HelloWorld</span><br><span class="line">  #<span class="number">27</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">28</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">29</span> = Utf8               out</span><br><span class="line">  #<span class="number">30</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">31</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">32</span> = Utf8               println</span><br><span class="line">  #<span class="number">33</span> = Utf8               (Ljava/lang/String;)V</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图</title>
    <url>/2022/05/28/UML%E7%B1%BB%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="一、类的表示"><a href="#一、类的表示" class="headerlink" title="一、类的表示"></a>一、类的表示</h1><ol>
<li>类名(上)、属性(中)、方法(下)<ul>
<li>接口(上)需要在接口名上标注<code>&quot;&lt;&lt;interface&gt;&gt;&quot;</code></li>
</ul>
</li>
<li>属性的表示语法：<code>[可见性]属性名[:类型][=初始值]</code></li>
<li>类方法的表示语法：<code>[可见性]操作名[(参数表)][:返回类型]</code><ul>
<li>参数表表示：”名称:类型”，多个参数用逗号隔开，可以有默认值</li>
<li>可见性：”-“表示private；”+”表示public；”#”表示protected</li>
</ul>
</li>
</ol>
<h1 id="二、类间关系"><a href="#二、类间关系" class="headerlink" title="二、类间关系"></a>二、类间关系</h1><h2 id="2-1-泛化关系"><a href="#2-1-泛化关系" class="headerlink" title="2.1 泛化关系"></a>2.1 泛化关系</h2><ul>
<li>表示“一般-具体”关系</li>
<li>高层次的类被称为基类或者超类，具有一般的公共信息</li>
<li>低层次的类被称为派生类或子类，公共信息继承自基类，具体信息可以自定义</li>
<li><p>如：</p>
<ul>
<li>交通工具为基类，定义基本功能</li>
<li>汽车等具体交通工具为派生类，自定义其特性</li>
</ul>
</li>
<li><p>泛化关系的表示：带三角形的实线箭头，箭头指向父类</p>
</li>
</ul>
<img src="/2022/05/28/UML%E7%B1%BB%E5%9B%BE/jc.png" class="" title="jc">
<h2 id="2-2-关联关系"><a href="#2-2-关联关系" class="headerlink" title="2.2 关联关系"></a>2.2 关联关系</h2><h3 id="2-2-1-组合关系"><a href="#2-2-1-组合关系" class="headerlink" title="2.2.1 组合关系"></a>2.2.1 组合关系</h3><ul>
<li>表示“整体-部分”关系</li>
<li>部分==不能==离开整体而单独存在</li>
<li>如：教材 包含 封面、前言、目录等，他们之间是整体与部分的关系</li>
<li>组合关系的表示：实心菱形的实线表示，菱形指向整体</li>
</ul>
<h3 id="2-2-2-聚合关系"><a href="#2-2-2-聚合关系" class="headerlink" title="2.2.2 聚合关系"></a>2.2.2 聚合关系</h3><ul>
<li>表示“整体-部分”关系</li>
<li>部分==可以==离开整体而存在</li>
<li>如：车 包含 轮胎、引擎等<ul>
<li>车胎、引擎等可以不依赖车子而单独存在</li>
</ul>
</li>
<li>聚合关系的表示：空心菱形的实线表示，菱形指向整体</li>
</ul>
<img src="/2022/05/28/UML%E7%B1%BB%E5%9B%BE/zhjh.png" class="" title="ZHJH">
<h3 id="2-2-3-一般关联关系"><a href="#2-2-3-一般关联关系" class="headerlink" title="2.2.3 一般关联关系"></a>2.2.3 一般关联关系</h3><ul>
<li>表示两个类的对象之间可以相互通讯，或者一个对象能够感知另一方</li>
<li>如：朋友关系</li>
<li>一般关联关系的表示：单向或双向，双向关联的箭头可加或不加，线段上的数字表示关联的数量和范围</li>
</ul>
<img src="/2022/05/28/UML%E7%B1%BB%E5%9B%BE/yb.png" class="" title="yb">
<h2 id="2-3-依赖关系"><a href="#2-3-依赖关系" class="headerlink" title="2.3 依赖关系"></a>2.3 依赖关系</h2><ul>
<li>表示元素A的变化会影响到元素B，或一个类的实现需要另一个类的协助</li>
<li>如：打电话需要手机</li>
<li>代码上表现为一个类的使用需要另一个类的对象作为参数</li>
<li>依赖关系的表示：带箭头的虚线，箭头指向被依赖方</li>
</ul>
<img src="/2022/05/28/UML%E7%B1%BB%E5%9B%BE/yl.png" class="" title="yl">
<h2 id="2-4-实现关系"><a href="#2-4-实现关系" class="headerlink" title="2.4 实现关系"></a>2.4 实现关系</h2><ul>
<li>表示类实现接口的功能</li>
<li>实现关系的表示：带空心箭头的虚线，箭头指向接口</li>
</ul>
<img src="/2022/05/28/UML%E7%B1%BB%E5%9B%BE/shixian.png" class="" title="shixian">]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Pr教程（一）</title>
    <url>/2022/06/04/Pr%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>谋生</tag>
        <tag>视频剪辑</tag>
        <tag>Pr</tag>
      </tags>
  </entry>
  <entry>
    <title>吉他和弦大全</title>
    <url>/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、指板音阶"><a href="#一、指板音阶" class="headerlink" title="一、指板音阶"></a>一、指板音阶</h1><img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/yinjie.png" class="" title="yinjie">
<h1 id="二、吉他和弦汇总"><a href="#二、吉他和弦汇总" class="headerlink" title="二、吉他和弦汇总"></a>二、吉他和弦汇总</h1><h2 id="2-1-常用和弦"><a href="#2-1-常用和弦" class="headerlink" title="2.1 常用和弦"></a>2.1 常用和弦</h2><ul>
<li>大三和弦：C（1、3、5），D（2、#4、6），E（3、#5、7），F（4、6、1），G（5、7、2），A（6、#1、3），B（7、#2、#4）</li>
<li>小三和弦：Cm（1、b3、5）、Dm（2、4、6）、Em（3、5、7）、Fm（4、b6、1）、Gm（5、b7、2）、Am（6、1、3）、Bm（7、2、#4）</li>
</ul>
<h2 id="2-1-调式和弦"><a href="#2-1-调式和弦" class="headerlink" title="2.1 调式和弦"></a>2.1 调式和弦</h2><h3 id="2-1-1-三和弦"><a href="#2-1-1-三和弦" class="headerlink" title="2.1.1 三和弦"></a>2.1.1 三和弦</h3><img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/hexian1.png" class="" title="hexian1">
<h3 id="2-1-2-七和弦"><a href="#2-1-2-七和弦" class="headerlink" title="2.1.2 七和弦"></a>2.1.2 七和弦</h3><img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/7hexian.png" class="" title="7hexian">
<h1 id="三、吉他指型"><a href="#三、吉他指型" class="headerlink" title="三、吉他指型"></a>三、吉他指型</h1><img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/zhixing.png" class="" title="zhixing">
<h1 id="四、CAGED系统"><a href="#四、CAGED系统" class="headerlink" title="四、CAGED系统"></a>四、CAGED系统</h1><p><strong>CAGED</strong>是一套快速推测和弦指法的系统，即<strong>任何一个和弦都有五种按法</strong>，它能帮助我们快速记忆指板音阶</p>
<p>以C和弦为例，<strong>和弦音为1-3-5（CEG）</strong>,它在Mi把位上的指法是<strong>典型的C和弦指法</strong>，但如果把C和弦升高一个把位，即<strong>Sol把位</strong>，应该怎么按呢？</p>
<p>按照<strong>CAGED的排列顺序</strong>，C和弦到<strong>Sol把位</strong>应该按照A指型来按和弦，同理如果再升高到<strong>La把位</strong>，C和弦就应该按照<strong>G指型</strong>来按和弦，13品之后就进入下一个循环，即D指型后循环到C指型来按和弦</p>
<img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/caged.png" class="" title="caged">
<p>再以D和弦为例，如果再<strong>Mi把位</strong>上升高一个把位到<strong>Sol把位</strong>，那么D和弦就应该按照<strong>C指型</strong>来按和弦</p>
<p>比较明显的是，在不同把位上的相同和弦弹奏的声音给人的感觉是不同的</p>
<h1 id="五、十二调音阶"><a href="#五、十二调音阶" class="headerlink" title="五、十二调音阶"></a>五、十二调音阶</h1><img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/yinjie1.jpeg" class="" title="yinjie1">
<img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/yinjie2.webp" class="" title="yinjie2">
<img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/yinjie3.webp" class="" title="yinjie3">
<img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/yinjie4.webp" class="" title="yinjie4">
<img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/yinjie5.webp" class="" title="yinjie5">
<img src="/2022/06/17/%E5%90%89%E4%BB%96%E5%92%8C%E5%BC%A6%E5%A4%A7%E5%85%A8/yinjie6.webp" class="" title="yinjie6">
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>乐理</tag>
        <tag>和弦</tag>
        <tag>吉他</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven基础大全</title>
    <url>/2022/07/04/Maven%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><h2 id="SSM项目构建"><a href="#SSM项目构建" class="headerlink" title="SSM项目构建"></a>SSM项目构建</h2><h2 id="Springboot项目构建"><a href="#Springboot项目构建" class="headerlink" title="Springboot项目构建"></a>Springboot项目构建</h2>]]></content>
      <categories>
        <category>后端</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>项目构建</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud基础大全</title>
    <url>/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1-SpringCloud与Springboot版本约束"><a href="#1-1-SpringCloud与Springboot版本约束" class="headerlink" title="1.1 SpringCloud与Springboot版本约束"></a>1.1 SpringCloud与Springboot版本约束</h2><p><a href="https://spring.io/projects/spring-cloud#overview">SpringCloud官网</a></p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/banben.png" class="" title="banben">
<h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><h3 id="1-2-1-创建Maven工程"><a href="#1-2-1-创建Maven工程" class="headerlink" title="1.2.1 创建Maven工程"></a>1.2.1 创建Maven工程</h3><p>先创建一个Maven工程，选择好对应的模板后，修改文件名最后完成工程项目创建</p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/maven1.png" class="" title="maven1">
<p>为简化项目结构，使一些不重要的配置文件不显示出来，可以再setting-&gt;Editor中进行一下配置：</p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/setting1.png" class="" title="setting1">
<h3 id="1-2-2-父工程pom文件"><a href="#1-2-2-父工程pom文件" class="headerlink" title="1.2.2 父工程pom文件"></a>1.2.2 父工程pom文件</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2022<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--统一管理jar包版本--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>12<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>12<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--mysql--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mysql.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- druid--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;druid.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mybatis.spring.boot.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--junit--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;junit.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--log4j--&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;log4j.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;lombok.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;druid.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--bulid是这样的用springboot默认的build方式--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-3-构建子模块"><a href="#1-2-3-构建子模块" class="headerlink" title="1.2.3 构建子模块"></a>1.2.3 构建子模块</h3><p>右击父工程创建一个maven子模块（不需要用maven模板创建）</p>
<p>子模块的pom文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2022<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>pom文件配置好后，再在子模块中创建springboot的配置文件application.yml</p>
<p>yml配置内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/personalsystem?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">FLzxSQC1998.Com</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.company.bufan.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<p>配置文件的问题解决完了，接下来就可以创建Springboot的主启动类了，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-2-4-注意事项"><a href="#1-2-4-注意事项" class="headerlink" title="1.2.4 注意事项"></a>1.2.4 注意事项</h3><p>要注意该maven的Java启动版本，不然会报错，如下：</p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/error1.png" class="" title="error1">
<p>遇到此问题需要进行以下修改：Setting-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler</p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/error2.png" class="" title="error2">
<p>此外，还需要检查下项目的File-&gt;Project Structure，看项目的Java版本是否正确</p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/error3.png" class="" title="error3">
<p>检查完成之后，应该就不会报Java版本的错误了</p>
<h3 id="1-2-5-热部署"><a href="#1-2-5-热部署" class="headerlink" title="1.2.5 热部署"></a>1.2.5 热部署</h3><p>为避免每次修改代码都要手动重启项目，启动热部署可以在修改代码后自动重启项目</p>
<p>在子模块中添加以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加以下配置：</p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/compiler.png" class="" title="compiler">
<p>再ctrl+alt+shift+/，进入Registry，启动项目两个选项</p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/registry.png" class="" title="registry">
<p>最后重启IDEA即可</p>
<h1 id="二、支付模块构建"><a href="#二、支付模块构建" class="headerlink" title="二、支付模块构建"></a>二、支付模块构建</h1><p>此支付模块用于记录消费者的支付记录，模块代码同一般的Springboot项目，即：</p>
<ul>
<li>controller</li>
<li>mapper</li>
<li>pojo</li>
<li>service/service.impl</li>
</ul>
<h2 id="2-1-配置文件"><a href="#2-1-配置文件" class="headerlink" title="2.1 配置文件"></a>2.1 配置文件</h2><h3 id="2-1-1-yml配置"><a href="#2-1-1-yml配置" class="headerlink" title="2.1.1 yml配置"></a>2.1.1 yml配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/learn?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">FLzxSQC1998.Com</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-mapper配置"><a href="#2-1-2-mapper配置" class="headerlink" title="2.1.2 mapper配置"></a>2.1.2 mapper配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--绑定命名空间,绑定自己的dao层接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.springcloud.mapper.PaymentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.springcloud.pojo.Payment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  根据用户名查找用户  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;payment&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM learn.payment WHERE id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  添加一名用户  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addPayment&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO learn.payment(serial) VALUE (#&#123;serial&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-controller"><a href="#2-2-controller" class="headerlink" title="2.2 controller"></a>2.2 controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.pojo.CommentResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.pojo.Payment;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommentResult <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = paymentService.addPayment(payment);</span><br><span class="line">        <span class="keyword">if</span>(res &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommentResult(res,<span class="number">200</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommentResult(<span class="keyword">null</span>,<span class="number">444</span>,<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommentResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPayment(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(payment != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommentResult(payment,<span class="number">200</span>,<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommentResult(<span class="keyword">null</span>,<span class="number">444</span>,<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、消费者订单模块构建"><a href="#三、消费者订单模块构建" class="headerlink" title="三、消费者订单模块构建"></a>三、消费者订单模块构建</h1><p>消费者模块用于调用支付模块服务请求，在spring框架中有<strong>RestTemplate</strong>框架用于调用服务请求</p>
<p>消费者服务架构如下：</p>
<ul>
<li>config</li>
<li>controller</li>
<li>pojo</li>
</ul>
<p><strong>注</strong>：<strong>此模块不需要数据库的依赖包</strong>，需要在pom中去除这些数据库依赖包，否则会报错</p>
<h2 id="3-1-config"><a href="#3-1-config" class="headerlink" title="3.1 config"></a>3.1 config</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注入RestTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-controller"><a href="#3-2-controller" class="headerlink" title="3.2 controller"></a>3.2 controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.pojo.CommentResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.pojo.Payment;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommentResult <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用RestTemplate中的方法进行调用支付模块请求</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">&quot;/payment/create&quot;</span>,payment,CommentResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommentResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommentResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-pojo"><a href="#3-3-pojo" class="headerlink" title="3.3 pojo"></a>3.3 pojo</h2><p>pojo层直接复制支付模块的pojo层即可</p>
<h2 id="3-4-其他配置"><a href="#3-4-其他配置" class="headerlink" title="3.4 其他配置"></a>3.4 其他配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>配置完成后运行即可，在idea下方有Services窗口，可以管理所有的服务模块：</p>
<img src="/2022/07/11/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/service.png" class="" title="serivce">
<h1 id="四、工程重构"><a href="#四、工程重构" class="headerlink" title="四、工程重构"></a>四、工程重构</h1><h2 id="4-1-公共Maven模块"><a href="#4-1-公共Maven模块" class="headerlink" title="4.1 公共Maven模块"></a>4.1 公共Maven模块</h2><p>观察上述项目结构，两个服务在pojo部分存在相同的代码，因此可以提取这些代码，将其放到一个新的公共的maven模块中，其他服务模块可以在pom中引入这个maven项目即可</p>
<p>公共maven模块的依赖包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>复制pojo到公共的Maven模块中，注意包地址要保持一致</p>
<p>复制完成后-&gt;Maven clean/install打包公共模块-&gt;其他模块即可引入此依赖包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个坐标是公共Maven模块的项目坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个是公共Maven模块的项目名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>日语基础大全</title>
    <url>/2022/07/26/%E6%97%A5%E8%AF%AD%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、五十音"><a href="#一、五十音" class="headerlink" title="一、五十音"></a>一、五十音</h1><h2 id="1-1-清音"><a href="#1-1-清音" class="headerlink" title="1.1 清音"></a>1.1 清音</h2><img src="/2022/07/26/%E6%97%A5%E8%AF%AD%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/wushi.png" class="" title="wushi">
<h2 id="1-2-浊音、半浊音"><a href="#1-2-浊音、半浊音" class="headerlink" title="1.2 浊音、半浊音"></a>1.2 浊音、半浊音</h2><img src="/2022/07/26/%E6%97%A5%E8%AF%AD%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/zuoyin.png" class="" title="zuoyin">
<h2 id="1-3-拗音"><a href="#1-3-拗音" class="headerlink" title="1.3 拗音"></a>1.3 拗音</h2><img src="/2022/07/26/%E6%97%A5%E8%AF%AD%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/aoyin.png" class="" title="aoyin">
<h2 id="1-4-拨音、促音和长音"><a href="#1-4-拨音、促音和长音" class="headerlink" title="1.4 拨音、促音和长音"></a>1.4 拨音、促音和长音</h2><p>拨音、促音和长音不做单独音节发音</p>
<p>拨音：用”ん”表示，鼻音，作用如拼音的”ng”</p>
<p>促音：用”つ”表示，某一音节突然停顿后发音</p>
<p>长音：用”あ、い、う、え、お”表示，延长音节</p>
<h1 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h1><h2 id="2-1-判断句"><a href="#2-1-判断句" class="headerlink" title="2.1 判断句"></a>2.1 判断句</h2><p>【名】は　【名】です，表示~是~，类似于古汉语中的~乃~是也，です表示判断、断定的含义，可以翻译成“是…”</p>
<p>【名】は　【名】では　ありません，表示~不是~，ではありません表示否定，或者使用じゃありません也是表示否定，值得注意的是ではありません是一个整体，不能拆开使用</p>
<h2 id="2-2-疑问句"><a href="#2-2-疑问句" class="headerlink" title="2.2 疑问句"></a>2.2 疑问句</h2><p><strong>一般疑问句：</strong>【名】は　【名】ですか，其中“か”为疑问助词，置于句末，表示疑问，对应的回答方式如下：</p>
<ul>
<li>はい，<strong>そえ</strong>です：是的</li>
<li>いいえ，ちがいます或者いいえ，<strong>そう</strong>ではありません：两个都表示否定</li>
<li>分（わ）かりません：不知道</li>
</ul>
<p><strong>特殊疑问句：</strong>对于特殊疑问句，不能用是或者不是来进行回答，特殊疑问词有以下几种：</p>
<ul>
<li>何（なん）：什么</li>
<li>どなた：哪位、谁</li>
<li>だれ：谁</li>
<li>いつ：什么时候</li>
<li>どこ：哪里</li>
<li>どれ：哪个</li>
<li>どう：如何</li>
</ul>
<p>特殊疑问词一般跟在“は”之后，以以下句子为例：</p>
<ul>
<li>日本語の先生は<strong>どなた</strong>ですか（日语老师是哪位）<ul>
<li>日本語の先生は李先生です（日语老师是李先生）</li>
</ul>
</li>
<li>先生のかばんは<strong>どれ</strong>ですか（老师的包是哪个）<ul>
<li>先生のかばんは黒いかばんです（老师的包是黑色的那个）</li>
</ul>
</li>
</ul>
<h2 id="2-3-の"><a href="#2-3-の" class="headerlink" title="2.3 の"></a>2.3 の</h2><p>の用来衔接事物的所属关系，表示“~的~”，参考以下例句：</p>
<ul>
<li>私のカメラは<strong>日本のカメラ</strong>です（我的电脑是日本产的）</li>
<li>この本（ほん）は<strong>日本語の本</strong>です（这本书是日语书）</li>
<li>この本は<strong>何の本</strong>ですか（这本书是什么样的书呢？）</li>
</ul>
<h2 id="2-4-も"><a href="#2-4-も" class="headerlink" title="2.4 も"></a>2.4 も</h2><p>も：提示助词，表示类推，表示主题内容与之前主题内容相同，相当于汉语中的“也”，一般格式如下：</p>
<ul>
<li>Aも　Bです（A也是B）</li>
<li>Aも　Bでは　ありません（A也不是B）</li>
</ul>
<p>用例如下：</p>
<ul>
<li>私は中国人です（我是中国人）<ul>
<li>あの人も　中国人です（那个人也是中国人）</li>
</ul>
</li>
</ul>
<h2 id="2-5-存在句"><a href="#2-5-存在句" class="headerlink" title="2.5 存在句"></a>2.5 存在句</h2><h3 id="2-5-1-A在B处"><a href="#2-5-1-A在B处" class="headerlink" title="2.5.1 A在B处"></a>2.5.1 A在B处</h3><ul>
<li>Aは　Bに　あります（A在B处）<ul>
<li>A为人和动物之外的事物，B为表示地点的名词或代词，“あります”表示“在”</li>
<li>如果表示不在，则“あります”应改为“ありません”</li>
</ul>
</li>
</ul>
<p>用例如下：</p>
<ul>
<li>日本語（ご）科（か）の教室（きょうしつ）<strong>は</strong> 五階（ごかい）<strong>に あります</strong>（日语专业教室在第五层）</li>
<li>先生の本は <strong>どこ</strong>に ありますか（老师的书在哪里呢）</li>
</ul>
<h3 id="2-5-2-在A处-有B"><a href="#2-5-2-在A处-有B" class="headerlink" title="2.5.2 在A处 有B"></a>2.5.2 在A处 有B</h3><ul>
<li>Aに　Ｂがあります<ul>
<li>“が”用于提示主语</li>
<li>如果表示没有，则“あります”应改为“ありません”</li>
</ul>
</li>
</ul>
<p>用例如下：</p>
<ul>
<li>机（つくえ）の上（うえ）<strong>に</strong>　日本語の本<strong>があります</strong>（在桌子上有日语书）</li>
<li>机（つくえ）の上<strong>に</strong>　日本語の本<strong>がありません</strong>（在桌子上没有日语书）</li>
<li>机（つくえ）の上<strong>に</strong>　何（なに）<strong>がありますか</strong>（在桌子上有什么？）</li>
</ul>
<h3 id="2-5-3-在A处-有B和C之类的东西"><a href="#2-5-3-在A处-有B和C之类的东西" class="headerlink" title="2.5.3 在A处 有B和C之类的东西"></a>2.5.3 在A处 有B和C之类的东西</h3><ul>
<li>Aに　ＢやC　などが　あります</li>
</ul>
<p>や：并列助词，前后连接两个有代表性的事物，暗示还有其他。</p>
<p>など：副词，可以解释为等等，之类的</p>
<p>用例如下：</p>
<ul>
<li>机の上<strong>に</strong>　本<strong>や</strong>ノート　<strong>など</strong>が　<strong>あります</strong>（桌子上有书和本子等一些东西）</li>
</ul>
<h3 id="2-5-4-在A处-有（几个）B"><a href="#2-5-4-在A处-有（几个）B" class="headerlink" title="2.5.4 在A处 有（几个）B"></a>2.5.4 在A处 有（几个）B</h3><ul>
<li>Aに　Ｂが　（数量）　あります<ul>
<li>在日语中，句子的补语（数量、状态、方向等）往往出现在谓语动词之前</li>
<li>补语的位置可以使用特殊疑问词来对B的数量进行题问</li>
</ul>
</li>
</ul>
<p>用例如下：</p>
<ul>
<li>机の上に　鍵（かぎ）が　六つ（むっつ）　あります（桌子上有六把钥匙）</li>
<li>机の上に　鍵（かぎ）が　いくつ　あります（桌子上有多少把钥匙？）</li>
</ul>
<p>针对具体量词的疑问词有：何個（なんこ，多少个）、何台（なんだい，多少台）、何本（なんほん，多少本）、何～（なん～）</p>
<h3 id="2-5-5-存在句的强调形式"><a href="#2-5-5-存在句的强调形式" class="headerlink" title="2.5.5 存在句的强调形式"></a>2.5.5 存在句的强调形式</h3><ul>
<li>Aには　Ｂ<strong>が</strong>　あります</li>
<li>Aには　Ｂ<strong>は</strong>　ありません（否定形式）<ul>
<li>は表示对比，或加强否定语气</li>
<li>には为助词に、は的重叠，加强了对前项地点的突出</li>
</ul>
</li>
</ul>
<p>用例如下：</p>
<ul>
<li>寮（りょう）<strong>には</strong>　クーラー<strong>が</strong>　<strong>あります</strong>（宿舍里啊【强调】，有空调的）</li>
<li>いいえ、教室（きょうしつ）には　クーラーは　ありません（不，教室里啊【强调】，没有空调的【否定强调】）</li>
</ul>
<h2 id="2-6-形容词与形容动词"><a href="#2-6-形容词与形容动词" class="headerlink" title="2.6 形容词与形容动词"></a>2.6 形容词与形容动词</h2><h3 id="2-6-1-形容词的构成"><a href="#2-6-1-形容词的构成" class="headerlink" title="2.6.1 形容词的构成"></a>2.6.1 形容词的构成</h3><p>形容词 = 词干 + 词尾（い），比如：寒（さむ，冷）い、暑（あつ，热）い、広（ひろ，宽）い、古（ふる，旧）い</p>
<h3 id="2-6-2-形容词的使用方法"><a href="#2-6-2-形容词的使用方法" class="headerlink" title="2.6.2 形容词的使用方法"></a>2.6.2 形容词的使用方法</h3><ul>
<li>判断句：Aは　【形容词】です（A是~的）<ul>
<li>用于对事物的状态和性质进行肯定描述</li>
</ul>
</li>
<li>定语用法：形容词 + 名词/代词（~的~）<ul>
<li>形容词对后项事物进行修饰</li>
</ul>
</li>
</ul>
<p>用例如下：</p>
<ul>
<li>先生の本は　<strong>古い（ふるい）</strong>です（老师的书是旧的）</li>
<li>毎日（まいにち）は　<strong>忙（いそが）しい</strong>　です（每天都很忙）</li>
<li>これは　<strong>広（ひろ）い</strong>　教室（きょうしつ）です（这是个宽敞的教室）</li>
<li>先生の本は　あの<strong>古い（ふるい）</strong>です（老师的书是旧的那本）</li>
<li>それは　<strong>美味（おい）しい</strong>日本料理（りょうり）です</li>
</ul>
<h3 id="2-6-3-形容动词的构成"><a href="#2-6-3-形容动词的构成" class="headerlink" title="2.6.3 形容动词的构成"></a>2.6.3 形容动词的构成</h3><ul>
<li>形容动词 = 词干 + 词尾（），在课本或辞典中其词尾多省略</li>
<li>比如：便利だ、静か(しずか，安静) だ、立派（りっぱ，漂亮，华丽，优秀，丰盛）だ</li>
</ul>
<h3 id="2-6-4-形容动词的使用方法"><a href="#2-6-4-形容动词的使用方法" class="headerlink" title="2.6.4 形容动词的使用方法"></a>2.6.4 形容动词的使用方法</h3><ul>
<li>作谓语：Aは　（形容动词词干）です</li>
<li>作定语：形容动词词干 +  な + 名词/代词</li>
</ul>
<p>用例如下：</p>
<ul>
<li>あの教室は　<strong>静（しず ）か</strong>です（那个教室是安静的）</li>
<li>日本語の教室は　あの<strong>綺麗（きれい，干净）</strong>な　教室です（日语教室是那间干净的教室）</li>
</ul>
<h2 id="2-7-场所"><a href="#2-7-场所" class="headerlink" title="2.7 场所"></a>2.7 场所</h2><ul>
<li>地点 + へ + 方向<ul>
<li>へ作为助词使用时，读音与え相同，表示移动的方向</li>
</ul>
</li>
<li>行きます（いきます，去，前往）、来ます（きます）、帰ります（かえります）、出かけます（でかけます）、  案内します（あんないします）</li>
</ul>
<p>用例如下：</p>
<ul>
<li>これからは<strong>肇慶（ちょうけい）</strong> へ案内します（我带你去参观下肇庆）</li>
</ul>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>语言</category>
      </categories>
      <tags>
        <tag>五十音图</tag>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式-创建型模式</title>
    <url>/2022/05/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>单例模式就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法，即<strong>一次创建，终生使用</strong></p>
<p>它有四种实现方式：饿汉式（静态常量/静态代码块）、懒汉式（线程不安全/安全）、静态内部类、枚举</p>
<p>饿汉式意思是提前实现对象的实例化</p>
<p>懒汉式的意思是<strong>需要的时候</strong>再进行对象的实例化，即<strong>Lazy Loading（懒加载）</strong></p>
<h2 id="1-1-饿汉式"><a href="#1-1-饿汉式" class="headerlink" title="1.1 饿汉式"></a>1.1 饿汉式</h2><h3 id="1-1-1-静态变量"><a href="#1-1-1-静态变量" class="headerlink" title="1.1.1 静态变量"></a>1.1.1 静态变量</h3><p>优点：</p>
<ul>
<li>实现简单</li>
<li>在类装载时就完成了实例化，避免了线程同步问题</li>
</ul>
<p>缺点：</p>
<ul>
<li>在类装载的时候就完成了实例化，没有达到Lazy Loading（懒加载）的效果，容易造成内存的浪费</li>
</ul>
<p>结论：如果实例经常被调用，则可以使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton instance=<span class="keyword">new</span> HungrySingleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-2-静态代码块"><a href="#1-1-2-静态代码块" class="headerlink" title="1.1.2 静态代码块"></a>1.1.2 静态代码块</h3><p>优缺点和静态变量方式一致，就是将对象的初始化放在了静态代码块中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在静态代码块中，初始化单例对象</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        instance=<span class="keyword">new</span> HungrySingleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-懒汉式"><a href="#1-2-懒汉式" class="headerlink" title="1.2 懒汉式"></a>1.2 懒汉式</h2><h3 id="1-2-1-线程不安全"><a href="#1-2-1-线程不安全" class="headerlink" title="1.2.1 线程不安全"></a>1.2.1 线程不安全</h3><p>这种方式容易造成线程不安全，在多线程的情况下，如线程a、b、c，a线程通过了判断体后进行了线程的切换，切换到了b线程，那么b线程也能通过判断体，这样就不符合单例模式的要求了，等于对instance进行了两次实例化。所以多线程环境下不能使用这种方式。</p>
<p>结论：不推荐使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance;  <span class="comment">//保证instance在所有线程中同步</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span></span>&#123;&#125;   <span class="comment">// private避免类在外部被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  <span class="comment">//getInstance方法前加同步</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</span><br><span class="line">            instance=<span class="keyword">new</span> LazySingleton();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-1-双重校验"><a href="#1-2-1-双重校验" class="headerlink" title="1.2.1 双重校验"></a>1.2.1 双重校验</h3><p>解决了线程不同步的问题，在多个线程执行的时候，会有多个线程同时进入第一个判断体中，而第一个判断体有一个同步代码块。同步代码块是需要线程完全执行完里面的操作才进行线程的切换，那么如果前一个线程实现了对象的实例化，那么后面的线程进入同步代码块进行判断的时候，instance就不为空了，保证了线程安全。</p>
<p>声明的变量前的<strong>volatile</strong>关键字有两个作用：</p>
<ul>
<li>保证变量修改的可见性，如a线程对变量进行修改后，其他线程也能看见修改后的值</li>
<li>禁止指令重排</li>
</ul>
<p>结论：推荐使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton instance=<span class="keyword">null</span>;  <span class="comment">//保证instance在所有线程中同步</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span></span>&#123;&#125;   <span class="comment">// private避免类在外部被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(LazySingleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</span><br><span class="line">                    instance=<span class="keyword">new</span> LazySingleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-3-静态内部类"><a href="#1-3-静态内部类" class="headerlink" title="1.3 静态内部类"></a>1.3 静态内部类</h2><p>静态内部类方式在类被装载时不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化</p>
<p>类的静态属性只会在第一次加载类的时候初始化，</p>
<p>优点：</p>
<ul>
<li>避免了线程不安全</li>
<li>利用静态内部类特点实现延迟加载，效率高</li>
</ul>
<p>结论：推荐使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态内部类SingletonInstance</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-4-枚举"><a href="#1-4-枚举" class="headerlink" title="1.4 枚举"></a>1.4 枚举</h2><p>优点：</p>
<ul>
<li>实现简单</li>
<li>避免了多线程同步问题</li>
</ul>
<p>结论：推荐使用（Effective Java作者推荐）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    INSTANCE,</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h1><h2 id="2-1-简单工厂模式"><a href="#2-1-简单工厂模式" class="headerlink" title="2.1 简单工厂模式"></a>2.1 简单工厂模式</h2><p>简单工厂设计模式类体如下：</p>
<img src="/2022/05/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/spf.png" class="" title="spf">
<p>简单来说就是：工厂类Factory可以createProduct()方法传入的标签选择对应的产品类对象的进行创建，这些具体产品类同属于一个抽象的公共产品类</p>
<p><strong>简单工厂</strong>的设计在于简单，只有一个工厂类和一个抽象产品类</p>
<p>如果存在多个工厂，多种产品类型，这时就需要用到<strong>工厂模式</strong></p>
<h3 id="2-1-1-实现"><a href="#2-1-1-实现" class="headerlink" title="2.1.1 实现"></a>2.1.1 实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">createProduct</span><span class="params">(String tag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;A&quot;</span>.equals(tag))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product a = SimpleFactory.createProduct(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        a.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;抽象产品类&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.use();</span><br><span class="line">        System.out.println(<span class="string">&quot;---&gt;&quot;</span>+<span class="string">&quot;具体产品类A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.use();</span><br><span class="line">        System.out.println(<span class="string">&quot;---&gt;&quot;</span>+<span class="string">&quot;具体产品类B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-工厂模式"><a href="#2-2-工厂模式" class="headerlink" title="2.2 工厂模式"></a>2.2 工厂模式</h2><p>在简单工厂的基础上对工厂类进行抽象，现在可以构建多个具体工厂类了，不同的工厂用于生产不同类的产品</p>
<p>在具体工厂的扩展并不会修改源代码，只需要新建一个工厂类，比如FactoryC用于生产其他产品对象</p>
<p>但如果要新增一个产品类型，并让其中一个工厂进行生产时，这时则需要修改具体工厂类的源代码，不符合开闭原则</p>
<img src="/2022/05/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/pf.png" class="" title="pf">
<h3 id="2-2-1-实现"><a href="#2-2-1-实现" class="headerlink" title="2.2.1 实现"></a>2.2.1 实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Product <span class="title">createProduct</span><span class="params">(String type)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Factory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            String type = getType();</span><br><span class="line">            <span class="comment">// 产品对象的创建推迟到具体工厂类中</span></span><br><span class="line">            product = createProduct(type);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (product == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            product.use();</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法 可以获取客户希望订购的pizza</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">&quot;请在下面输入你要购买产品类型：&quot;</span>);</span><br><span class="line">            String pizza = reader.readLine();</span><br><span class="line">            <span class="keyword">return</span> pizza;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">Product <span class="title">createProduct</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">                Product product = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;A1&quot;</span>.equals(type))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;A2&quot;</span>.equals(type))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">                <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">Product <span class="title">createProduct</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">                Product product = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;B1&quot;</span>.equals(type))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;B2&quot;</span>.equals(type))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">                <span class="keyword">return</span> product;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A工厂生产产品A1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;使用产品A1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A工厂生产产品A2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;使用产品A2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B工厂生产产品B1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;使用产品B1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B工厂生产产品B1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;使用产品B2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 使用A工厂进行产品生产</span></span><br><span class="line">                Factory factoryA = <span class="keyword">new</span> FactoryA();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-3-抽象工厂模式"><a href="#2-3-抽象工厂模式" class="headerlink" title="2.3 抽象工厂模式"></a>2.3 抽象工厂模式</h2><p>抽象工厂模式与工厂模式的区别在于将抽象工厂类改成了接口，接口的抽象层次更高，因此称为抽象工厂模式</p>
<img src="/2022/05/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/apf.png" class="" title="apf">
<h2 id="2-4-应用"><a href="#2-4-应用" class="headerlink" title="2.4 应用"></a>2.4 应用</h2><h1 id="三、原型模式"><a href="#三、原型模式" class="headerlink" title="三、原型模式"></a>三、原型模式</h1><p>原型模式提供对象复制的一种方式，即对象的克隆，克隆又分为深克隆和浅克隆</p>
<p>浅克隆：复制某一对象时，只复制其<strong>本身</strong>和<strong>值类型的成员变量</strong>，不复制引用变量</p>
<p>深克隆：复制某一对象时，不仅复制其<strong>本身</strong>和<strong>值类型的成员变量</strong>，还复制引用变量</p>
<p>原型模式结构：</p>
<ul>
<li>抽象原型类</li>
<li>具体原型类</li>
<li>访问类</li>
</ul>
<h2 id="3-1-实现"><a href="#3-1-实现" class="headerlink" title="3.1 实现"></a>3.1 实现</h2><p>可以按照原型模式的结构来创建对应的类，但是Java中的Object类提供了一个clone()方法，可以将一个Java对象复制一份。因此在Java中可以直接使用Object提供clone()方法来实现对象的浅克隆</p>
<p>此时Object类相当于抽象原型类，所有实现了Cloneable接口的类相当于具体原型类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体原型类（浅克隆）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;	<span class="comment">// 值类型</span></span><br><span class="line">    <span class="keyword">private</span> Product product; <span class="comment">// 应用类型，深克隆需要调用product.clone()进行引用类型的复制</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = <span class="keyword">super</span>.clone(); <span class="comment">// 浅克隆</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException exception) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Not support Cloneable&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Prototype)object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-应用"><a href="#3-2-应用" class="headerlink" title="3.2 应用"></a>3.2 应用</h2><h1 id="四、建造者模式"><a href="#四、建造者模式" class="headerlink" title="四、建造者模式"></a>四、建造者模式</h1><p>建造者模式结构：</p>
<ul>
<li>抽象建造者：规范产品对象的各个组成部分的建造</li>
<li>具体建造者：具体化对象的各个组成部分的创建</li>
<li>复杂产品类：需要被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程</li>
<li>指挥者类：指挥建造者创建产品的各个部分，并返回产品对象</li>
</ul>
<img src="/2022/05/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/builder.png" class="" title="builder">
<h2 id="4-1-实现"><a href="#4-1-实现" class="headerlink" title="4.1 实现"></a>4.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复杂产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String partA; <span class="comment">// 定义部件，部件可以是任意类型，包括值类型和引用类型</span></span><br><span class="line">    <span class="keyword">private</span> String partB;</span><br><span class="line">    <span class="keyword">private</span> String partC;</span><br><span class="line">    <span class="comment">// 属性的Getter和Setter方法省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象建造者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建产品对象</span></span><br><span class="line">    <span class="keyword">protected</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回产品对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体建造者1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder1</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setPartA(<span class="string">&quot;A1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setPartA(<span class="string">&quot;B1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setPartA(<span class="string">&quot;C1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指挥者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuilder</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 产品的构建与组装方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">        builder.buildPartC();</span><br><span class="line">        <span class="keyword">return</span> builder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-应用"><a href="#4-2-应用" class="headerlink" title="4.2 应用"></a>4.2 应用</h2>]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>创建型模式</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式-结构型模式</title>
    <url>/2022/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、适配器模式"><a href="#一、适配器模式" class="headerlink" title="一、适配器模式"></a>一、适配器模式</h1><p>适配器模式（Adapter Pattern）：结构型模式之一，<strong>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的哪些类可以一起工作</strong>。</p>
<p>适配器模式结构</p>
<ul>
<li>目标抽象类：该角色把其他类转换为我们期望的接口，可以是一个抽象类或接口，也可以是具体类。</li>
<li>被适配者：原有的接口，也是希望被适配的接口。</li>
<li>适配者：将被适配者和目标抽象类组合到一起的类。</li>
</ul>
<img src="/2022/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/adapter.png" class="" title="adapter">
<p>适配器的实现又分为：类适配器、对象适配器、接口适配器</p>
<h2 id="1-1-实现"><a href="#1-1-实现" class="headerlink" title="1.1 实现"></a>1.1 实现</h2><h3 id="1-1-1-类适配器"><a href="#1-1-1-类适配器" class="headerlink" title="1.1.1 类适配器"></a>1.1.1 类适配器</h3><p>通过类来实现适配器，以类来继承和实现接口的方式，来获取被适配类的信息并转换输出重写到适配接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 被适配者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adapterRequest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;被适配者的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.adapterRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target adapterTarget = <span class="keyword">new</span> Adapter();</span><br><span class="line">        adapterTarget.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-2-对象适配器"><a href="#1-1-2-对象适配器" class="headerlink" title="1.1.2 对象适配器"></a>1.1.2 对象适配器</h3><p>调整适配器的实现方式，不再以继承的方式调用被适配者的信息，而是通过对象的方式获取信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取被适配者对象</span></span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adaptee.adapterRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-3-接口适配器"><a href="#1-1-3-接口适配器" class="headerlink" title="1.1.3 接口适配器"></a>1.1.3 接口适配器</h3><p>因为类继承接口需要实现全部接口中的方法，有时我们只需要实现部分的接口方法，所以这里就需要使用抽象类来继承接口并实现接口全部方法，生成对象时，需要用到哪个方法就重写哪个方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getTypeA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getTypeB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTypeA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTypeB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target adapterTarget= <span class="keyword">new</span> Adapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.adapterRequest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        adapterTarget.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、代理模式"><a href="#二、代理模式" class="headerlink" title="二、代理模式"></a>二、代理模式</h1><p>代理模式的角色：</p>
<ul>
<li><p>抽象主题（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的<strong>业务方法</strong>。</p>
</li>
<li><p>真实主题（Real Subject）类：<strong>实现了抽象主题中的具体业务</strong>，是代理对象所代表的真实对象，是最终要引用的对象。</p>
</li>
<li><p>代理（Proxy）类：提供了与真实主题相同的接口，其内部含有对<strong>真实主题的引用</strong>，它可以访问、控制或扩展真实主题的功能。</p>
</li>
</ul>
<img src="/2022/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/proxy.png" class="" title="proxy">
<p>代理一般理解为<strong>代码增强</strong>，即在不修改源代码的逻辑上增加一些逻辑代码</p>
<p>代理模式分为静态代理和动态代理：</p>
<ul>
<li>静态：由程序员创建<strong>代理类</strong>或特定工具自动生成源代码再对其编译，在程序运行前代理类的 .class 文件就已经存在了。</li>
<li>动态：在程序运行时，运用<strong>反射机制</strong>动态创建而成</li>
</ul>
<h2 id="2-1-实现"><a href="#2-1-实现" class="headerlink" title="2.1 实现"></a>2.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.Request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//抽象主题</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//真实主题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问真实主题方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        &#125;</span><br><span class="line">        preRequest();</span><br><span class="line">        realSubject.Request();</span><br><span class="line">        postRequest();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问真实主题之前的预处理。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问真实主题之后的后续处理。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-应用"><a href="#2-2-应用" class="headerlink" title="2.2 应用"></a>2.2 应用</h2><ul>
<li>Spring框架的的AOP（面向切面编程）概念</li>
</ul>
<h1 id="三、桥接模式"><a href="#三、桥接模式" class="headerlink" title="三、桥接模式"></a>三、桥接模式</h1><p>桥接模式的角色：</p>
<ul>
<li>抽象化角色Abstraction：定义抽象类，并包含一个对<strong>实现化对象</strong>的引用</li>
<li>扩展抽象化角色Refined Abstraction：<strong>抽象化角色</strong>的子类，实现父类中的业务方法</li>
<li>实现化角色Implementor：<strong>实现化角色的接口</strong>，供扩展抽象化角色调用</li>
<li>具体实现化角色Concrete Implementor：给出<strong>实现化角色接口</strong>的具体实现</li>
</ul>
<p>简单来说就是通过抽象化角色完成对实现化角色方法的调用</p>
<p>桥接模式是将抽象与实现分离，这里的抽象是<strong>抽象化角色</strong>，实现是<strong>实现化角色</strong>，两者以<strong>组合关系</strong>完成<strong>抽象化角色</strong>对<strong>实现化角色</strong>方法的调用</p>
<img src="/2022/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/bridge.png" class="" title="bridge">
<h2 id="3-1-实现"><a href="#3-1-实现" class="headerlink" title="3.1 实现"></a>3.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Implementor imple = <span class="keyword">new</span> ConcreteImplementorA();</span><br><span class="line">        Abstraction abs = <span class="keyword">new</span> RefinedAbstraction(imple);</span><br><span class="line">        abs.Operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现化角色</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OperationImpl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体实现化角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OperationImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体实现化(Concrete Implementor)角色被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象化角色</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Implementor imple;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Abstraction</span><span class="params">(Implementor imple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imple = imple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扩展抽象化角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RefinedAbstraction</span><span class="params">(Implementor imple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(imple);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展抽象化(Refined Abstraction)角色被访问&quot;</span>);</span><br><span class="line">        imple.OperationImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-应用"><a href="#3-2-应用" class="headerlink" title="3.2 应用"></a>3.2 应用</h2><h1 id="四、装饰模式"><a href="#四、装饰模式" class="headerlink" title="四、装饰模式"></a>四、装饰模式</h1><p>装饰模式角色：</p>
<ul>
<li><strong>Component（抽象构件类）</strong>：是<strong>具体构件以及抽象装饰类的父类</strong>，声明了在具体构件中实现的业务方法，它的引入可以使客户端以一致的方式处理未被装饰之后的对象，以实现客户端的透明操作</li>
<li><strong>ConcreteComponent（具体构件类）</strong>：是<strong>抽象构件类的子类</strong>，用于定义具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责</li>
<li><strong>Decorator（抽象装饰类）</strong>：<strong>用于给具体构件类增加职责</strong>，但是具体职责在子类实现。抽象装饰类维护一个<strong>指向抽象构件的引用</strong>，通过该引用可以调用装饰之前构件对象的方法，并通过子类扩展该方法以达到装饰的目的</li>
<li><strong>ConcreteDecorator（具体装饰类）</strong>：<strong>负责向构件中添加新的职责</strong>，每一个具体装饰类都定义了一些新的行为，可以调用抽象装饰类中定义的方法，并可以增加新的职责用以<strong>扩充对象的行为</strong></li>
</ul>
<img src="/2022/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/decorator.jpg" class="" title="decorator">
<h2 id="4-1-实现"><a href="#4-1-实现" class="headerlink" title="4.1 实现"></a>4.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象构建类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体构建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体构件方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象构建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator</span><span class="params">(Component component)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        newBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newBehavior</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;装饰方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Component component = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line">    Component decorator = <span class="keyword">new</span> ConcreteDecorator(component);</span><br><span class="line">    decorator.operation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、外观模式"><a href="#五、外观模式" class="headerlink" title="五、外观模式"></a>五、外观模式</h1><p>外观模式：为多个复杂子系统提供一个一致的接口，而使这些子系统更加容易被访问</p>
<p>外观模式角色：</p>
<ul>
<li>外观角色Facade：为多个子系统对外提供一个共同的接口</li>
<li>子系统角色SubSystem：实现系统的部分功能，客户可以通过外观角色访问它</li>
<li>客户角色Client：通过一个外观角色访问各个子系统的功能</li>
</ul>
<img src="/2022/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/facade.png" class="" title="facade">
<h2 id="5-1-实现"><a href="#5-1-实现" class="headerlink" title="5.1 实现"></a>5.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadePattern</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Facade f = <span class="keyword">new</span> Facade();</span><br><span class="line">        f.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外观类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSystemA obj1 = <span class="keyword">new</span> SubSystemA();</span><br><span class="line">    <span class="keyword">private</span> SubSystemB obj2 = <span class="keyword">new</span> SubSystemB();</span><br><span class="line">    <span class="keyword">private</span> SubSystemC obj3 = <span class="keyword">new</span> SubSystemC();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        obj1.method1();</span><br><span class="line">        obj2.method2();</span><br><span class="line">        obj3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子系统A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemA</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统A的method1()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子系统B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统B的method2()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子系统C</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemC</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统C的method3()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-2-应用"><a href="#5-2-应用" class="headerlink" title="5.2 应用"></a>5.2 应用</h2><h1 id="六、享元模式"><a href="#六、享元模式" class="headerlink" title="六、享元模式"></a>六、享元模式</h1><p><strong>意图：</strong>运用共享技术有效地支持大量细粒度的对象。</p>
<p><strong>主要解决：</strong>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p>
<p><strong>何时使用：</strong> 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。</p>
<p><strong>主要角色</strong>：</p>
<ul>
<li><strong>抽象享元角色Flyweight</strong>：是所有的具体享元类的基类，为具体享元规范需要实现的<strong>公共接口</strong>，非享元的外部状态<strong>以参数的形式</strong>通过方法传入。</li>
<li><strong>具体享元角色ConcreteFlyweight</strong>：实现抽象享元角色中所规定的接口</li>
<li><strong>非享元角色UnsharedConcreteFlyweight</strong>：是<strong>不可以共享</strong>的外部状态 ，它以参数的形式注入具体享元的相关方法中</li>
<li><strong>享元工厂角色FlyweightFactory</strong>：<strong>负责创建和管理享元角色</strong>。当客户对象请求<strong>享元对象</strong>时享元工厂检查系统中是否存在符合要求的享元对象如果存在提供给客户；如果不存在的话，则建一个新的享元对象。</li>
</ul>
<img src="/2022/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/flyweight.png" class="" title="flyweight">
<h2 id="6-1-实现"><a href="#6-1-实现" class="headerlink" title="6.1 实现"></a>6.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FlyweightFactory factory = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line">        Flyweight f01 = factory.getFlyweight(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Flyweight f02 = factory.getFlyweight(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Flyweight f03 = factory.getFlyweight(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Flyweight f11 = factory.getFlyweight(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        Flyweight f12 = factory.getFlyweight(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        f01.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第1次调用a&quot;</span>));</span><br><span class="line">        f02.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第2次调用a&quot;</span>));</span><br><span class="line">        f03.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第3次调用a&quot;</span>));</span><br><span class="line">        f11.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第1次调用b&quot;</span>));</span><br><span class="line">        f12.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第2次调用b&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象享元角色</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight state)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非享元角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> <span class="title">state</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    UnsharedConcreteFlyweight(String info)&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体享元角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="title">implement</span> <span class="title">Flyweight</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String key;</span><br><span class="line">    ConcreteFlyweight(String key)&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体享元&quot;</span>+key+<span class="string">&quot;被创建！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight outState)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体享元&quot;</span>+key+<span class="string">&quot;被调用！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;非享元信息是：&quot;</span>+outState.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 享元工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Flyweight&gt; flyweights = <span class="keyword">new</span> HashMap&lt;String,Flyweight&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        Flyweight flyweight = (Flyweight)flyweights.get(key);</span><br><span class="line">        <span class="keyword">if</span>(flyweight != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;具体享元&quot;</span>+key+<span class="string">&quot;已经存在，被成功获取&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            flyweights.put(key,flyweight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-2-应用"><a href="#6-2-应用" class="headerlink" title="6.2 应用"></a>6.2 应用</h2><h1 id="七、组合模式"><a href="#七、组合模式" class="headerlink" title="七、组合模式"></a>七、组合模式</h1><p>组合模式角色：有时又叫作部分整体模式它是一种将对象组合成树状的层次结构的模式 用来表示部分整体”的关系，使用户对单个对象和组合对象具有一致的访问性。</p>
<p>组合模式的角色：</p>
<ul>
<li><strong>抽象构建角色Component</strong>：它的主要作用是为树叶构件和树枝构件声明公共接口</li>
<li><strong>树叶构建角色Leaf</strong>：：是组合中的叶节点对象，它没有子节点，用于实现抽象构件角色中声明的公共接口。</li>
<li><strong>树枝构件角色Composite</strong>：是组合中的分支节点对象，它有子节点。，它的主要作用是存储和管理子部件</li>
</ul>
<p>组合模式分为<strong>透明式的组合模式</strong>和<strong>安全式的组合模式</strong>。</p>
<ul>
<li>透明方式：抽象构件声明了所有子类中的全部方法，所以客户端无须区别树叶对象和树枝对象</li>
<li>安全方式：将管理子构件的方法移到树枝构件中</li>
</ul>
<img src="/2022/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/zuhe.png" class="" title="zuhe">
<h2 id="7-1-实现"><a href="#7-1-实现" class="headerlink" title="7.1 实现"></a>7.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Component c0 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component c1 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component leaf1 = <span class="keyword">new</span> Leaf(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Component leaf2 = <span class="keyword">new</span> Leaf(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        Component leaf3 = <span class="keyword">new</span> Leaf(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        c0.add(leaf1);</span><br><span class="line">        c0.add(c1);</span><br><span class="line">        c1.add(leaf2);</span><br><span class="line">        c1.add(leaf3);</span><br><span class="line">        c0.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象构件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 树叶构建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">implements</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;树叶&quot;</span>+name+<span class="string">&quot;：被访问！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树枝构件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">implements</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Component&gt; children = <span class="keyword">new</span> ArrayList&lt;Component&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>&#123;</span><br><span class="line">        children.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>&#123;</span><br><span class="line">        children.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Object obj:children)&#123;</span><br><span class="line">            ((Component)obj).operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行结果：</span></span><br><span class="line"><span class="comment">树叶1：被访问！</span></span><br><span class="line"><span class="comment">树叶2：被访问！</span></span><br><span class="line"><span class="comment">树叶3：被访问！</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="7-2-应用"><a href="#7-2-应用" class="headerlink" title="7.2 应用"></a>7.2 应用</h2>]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>乐理进阶大全-和声</title>
    <url>/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/</url>
    <content><![CDATA[<h1 id="一、循环与网格图"><a href="#一、循环与网格图" class="headerlink" title="一、循环与网格图"></a>一、循环与网格图</h1><h2 id="1-1-音的循环"><a href="#1-1-音的循环" class="headerlink" title="1.1 音的循环"></a>1.1 音的循环</h2><p>在物理上声音是通过震动产生的，而振动必然存在频率，频率越高，振动越快，声音听起来越高，相反声音听起来就越低</p>
<p>往往一个纯八度关系，比如$1$到$\dot{1}$，它们的频率关系为两倍关系，听感上两个音会完全融合</p>
<p>有了频率的概念，人们就逐渐发现了声音的规律，即十二平均律。十二平均律将一个八度分成十二份，一共有十二个音。在频率上，相邻两个音的频率之比为$\sqrt[12]{2}$，相邻两个音之间的距离称为半音，即半音阶。</p>
<img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/yj.png" class="" title="yj">
<p>从此，人们开始对音进行形式化表示，即C/D/E/F/G/A/B系统，音名循环图如下：</p>
<img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/ym.png" class="" title="ym">
<h2 id="1-2-音程"><a href="#1-2-音程" class="headerlink" title="1.2 音程"></a>1.2 音程</h2><ul>
<li>根音：和弦的主音，不一定是最低音</li>
<li>冠音：和弦中的最高音</li>
<li>度数：衡量音程的单位</li>
<li>复音程：超过八度的音程关系</li>
</ul>
<img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/dushu.png" class="" title="dushu">
<h2 id="1-3-和声学"><a href="#1-3-和声学" class="headerlink" title="1.3 和声学"></a>1.3 和声学</h2><p>和声学解决的问题是</p>
<ul>
<li>用什么和弦</li>
<li>怎么用和弦</li>
</ul>
<h2 id="1-4-五度圈"><a href="#1-4-五度圈" class="headerlink" title="1.4 五度圈"></a>1.4 五度圈</h2><p>从C音后每隔纯五度取一个音，就会得到一个音阶的循环</p>
<p>观察1.1部分的音阶图可以发现，G-&gt;C-&gt;G，顺时针C到G是纯五度关系，逆时针C到G是纯四度关系</p>
<img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/wuduquan.png" class="" title="wuduquan">
<h2 id="1-5-三和弦标记法"><a href="#1-5-三和弦标记法" class="headerlink" title="1.5 三和弦标记法"></a>1.5 三和弦标记法</h2><p>在五度圈的基础上，使用平面图来快速进行三和弦推导</p>
<img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/sanhexian.png" class="" title="sanhexian">
<p>观察上图，上三角均为大三和弦，下三角均为小三和弦</p>
<p>将上图进行一下扩展，如下图，根据平面图可以快速得到五度圈、大三度循环和小三度循环</p>
<img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/pingmianhexian.png" class="" title="pingmianhexian">
<h1 id="二、大调和声"><a href="#二、大调和声" class="headerlink" title="二、大调和声"></a>二、大调和声</h1><h2 id="2-1-大调的三和弦"><a href="#2-1-大调的三和弦" class="headerlink" title="2.1 大调的三和弦"></a>2.1 大调的三和弦</h2><p>调内三和弦：使用调内音组成的和弦</p>
<p>调外和弦：包含调外音的和弦</p>
<h2 id="2-2-和弦功能属性"><a href="#2-2-和弦功能属性" class="headerlink" title="2.2 和弦功能属性"></a>2.2 和弦功能属性</h2><p>以自然大调为例，每个大调的$I$级和弦都是<strong>主和弦T（Tonic chord）</strong>，是和声的中心，其作用叫做<strong>主功能</strong>。</p>
<p>在调性体系下，主和弦的组成音也是所有音中最稳定的，而其他和弦根据组成音的具体情况，产生各自不同的趋向性，这便是和声功能的根源所在。</p>
<p>大调的V级和弦，称为<strong>属和弦D（Dominant chord）</strong>，代表属功能（Dominant chord），大调五级音又称<strong>属音</strong>，位于主音上方纯五度（下方纯四度），属和弦三个音都有朝向主音的倾向，地位仅次于主和弦。</p>
<p>大调的IV级和弦，称为<strong>下属和弦S（Subdominant chord）</strong>，IV级音在主音下纯五度（上纯四度），所以叫下属音（Subdominant）。下属和弦具有下属功能。与属和弦相比，下属和弦的趋向性较弱，稳定性略高。</p>
<p>主和弦T、属和弦D、下属和弦S合称为<strong>正三和弦</strong></p>
<p>正三和弦以外的和弦称为<strong>副三和弦</strong>，即ii、iii、vi、vii四个和弦，在C大调中就是Dm、Em、Am、B</p>
<ul>
<li>注：和弦是如何分功能组的？考虑主功能组的一级和弦135，其中三级和弦357包含了<strong>两个一级和弦的构成音35</strong>，六级和弦包含了<strong>两个一级和弦的构成音61</strong>，所以在和弦色彩上是比较接近的，因此可以分为相同的功能组中</li>
</ul>
<img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/shuyin.png" class="" title="shuyin">
<h2 id="2-3-和声进行的基本规律"><a href="#2-3-和声进行的基本规律" class="headerlink" title="2.3 和声进行的基本规律"></a>2.3 和声进行的基本规律</h2><p>大调进行一般会从I级开始，经过下属和弦、属和弦之后再回归到主和弦</p>
<img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/jinxing.png" class="" title="jinxing">
<ul>
<li>主和弦I所代表的主功能，关键词是“稳定”。它作为调的核心，产生一种基础的安稳、静止感。如果音乐没有结束在主和弦，通常会给人没有结束的感觉。</li>
<li>下属和弦IV代表下属功能，关键词是“运动”。它的稳定性介于主、属之间，通常充当二者的中间环节，使音乐的张力逐渐积累。I—IV的进行常有一种启动、上升感</li>
<li>以属和弦V为代表的属功能，关键词是“紧张”，在三个功能组中最不稳定，音乐的张力达到最大，制造迫切进行到主功能的感觉。V—I常被形容为有制动、下降感，最后到达主和弦，张力得到释放，产生音乐独有的美感。</li>
</ul>
<p><strong>和声第一定律</strong>：和声的变化是起承转合的，即稳定-&gt;不稳定-&gt;稳定</p>
<h2 id="2-4-和声进行格式"><a href="#2-4-和声进行格式" class="headerlink" title="2.4 和声进行格式"></a>2.4 和声进行格式</h2><img src="/2022/06/19/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%92%8C%E5%A3%B0/geshi.png" class="" title="geshi">
<h2 id="2-5-和弦编配"><a href="#2-5-和弦编配" class="headerlink" title="2.5 和弦编配"></a>2.5 和弦编配</h2><p> <strong>和声第二定律</strong>：在为旋律编配和弦时，和弦要包含旋律中的一部分或全部的音，不能完全包含时，和声一般也要照顾到尽量多的旋律音，优先考虑强拍与长音</p>
<p><strong>和弦外音（外音）</strong>：不包含在和弦音中的旋律音</p>
<h3 id="2-5-1-和弦转换时机"><a href="#2-5-1-和弦转换时机" class="headerlink" title="2.5.1 和弦转换时机"></a>2.5.1 和弦转换时机</h3><p>在流行歌曲中，和弦发生转换的时机一般有以下几种情况</p>
<ul>
<li>重音</li>
<li>乐句的结尾</li>
<li>前后音程对比强烈的地方</li>
<li>一个乐句到另一个乐句之间</li>
</ul>
<p>一般的流行歌曲，一个乐句中最多会进行一次和弦转换，换言之就是一个乐句一般包含一到两个和弦</p>
<h3 id="2-5-2-判断节奏、调式调性"><a href="#2-5-2-判断节奏、调式调性" class="headerlink" title="2.5.2 判断节奏、调式调性"></a>2.5.2 判断节奏、调式调性</h3><h3 id="2-5-3-确定开头、解位和断句"><a href="#2-5-3-确定开头、解位和断句" class="headerlink" title="2.5.3 确定开头、解位和断句"></a>2.5.3 确定开头、解位和断句</h3><ul>
<li>半终止</li>
<li>终止式</li>
</ul>
<h3 id="2-5-4-填充乐句"><a href="#2-5-4-填充乐句" class="headerlink" title="2.5.4 填充乐句"></a>2.5.4 填充乐句</h3><h2 id="2-6-常用和声套路"><a href="#2-6-常用和声套路" class="headerlink" title="2.6 常用和声套路"></a>2.6 常用和声套路</h2><ul>
<li><p>15634125：忽然之间</p>
</li>
<li><p>4536251：可惜不是你</p>
</li>
<li>4536</li>
<li>1625</li>
<li>162536251：突然的自我</li>
<li>1645：花</li>
<li>1564</li>
</ul>
<h2 id="2-7-终止式的种类"><a href="#2-7-终止式的种类" class="headerlink" title="2.7 终止式的种类"></a>2.7 终止式的种类</h2><h3 id="2-7-1-收拢性终止"><a href="#2-7-1-收拢性终止" class="headerlink" title="2.7.1 收拢性终止"></a>2.7.1 收拢性终止</h3><p>收拢性终止：<strong>落在主和弦</strong>的终止式</p>
<ul>
<li><p>正格终止：“<strong>属-&gt;主</strong>”的进行格式，典型的如$V-I$，V可以换成导三和弦、导七和弦等其他属功能和弦，这种终止式的结束感比较强烈。</p>
<ul>
<li>前面再加上<strong>下属功能组</strong>和弦，如$IV-V-I、II-V-I$，这种结构用到了调内所有的音和所有功能组和弦，称为<strong>完全正格终止</strong>或<strong>复式正格终止</strong></li>
</ul>
</li>
<li><p>变格终止：从<strong>下属功能组</strong>进行<strong>主和弦</strong>的终止式，即$IV-I$，使用不如正格终止频繁，教会中唱诗班较多使用，变格终止有一种平静、安详、甜美的感觉</p>
</li>
<li><p>补充终止/扩充终止：在乐句、乐段或全曲末尾，于明确终止之后，再额外添加一段短小的终止作为“尾巴”。补充的终止可以是$VI-I、VII-I、IV-V-I、II-V-I$</p>
</li>
</ul>
<h3 id="2-7-2-开放性终止"><a href="#2-7-2-开放性终止" class="headerlink" title="2.7.2 开放性终止"></a>2.7.2 开放性终止</h3><p>开放性终止：不落在主和弦上的终止式，或称为半终止</p>
<ul>
<li>半终止：不稳定音级收束，如$V-IV$，音响效果上给人一种戛然而止、意犹未尽的感觉，经常用在上半句或开放性乐段的末尾</li>
<li>阻碍终止/伪终止：以不稳定和弦代替主和弦，典型的有$V-VI$，它是把预期的“终止”打断，然音乐延续下去。作用是推迟终止、扩展乐段</li>
</ul>
<h3 id="2-7-3-其他"><a href="#2-7-3-其他" class="headerlink" title="2.7.3 其他"></a>2.7.3 其他</h3><ul>
<li>PAC：完全正格终止，V-&gt;I，和弦都是原位和弦，且旋律结束在主音上</li>
<li>IAC：不完满正格终止，可以是VII-&gt;I，或者使用转位和弦、或者旋律音没有结束在主音上，通过这些可以降低终止感</li>
<li>HC：半终止，停止在V级和弦上音乐不再发展</li>
<li>终止感：PAC&gt;IAC&gt;HC</li>
</ul>
<h2 id="2-8-大调七和弦"><a href="#2-8-大调七和弦" class="headerlink" title="2.8 大调七和弦"></a>2.8 大调七和弦</h2><h3 id="2-8-1-大七和弦"><a href="#2-8-1-大七和弦" class="headerlink" title="2.8.1 大七和弦"></a>2.8.1 大七和弦</h3><h3 id="2-8-2-属七和弦（大小七和弦）"><a href="#2-8-2-属七和弦（大小七和弦）" class="headerlink" title="2.8.2 属七和弦（大小七和弦）"></a>2.8.2 属七和弦（大小七和弦）</h3><h3 id="2-8-3-四度圈"><a href="#2-8-3-四度圈" class="headerlink" title="2.8.3 四度圈"></a>2.8.3 四度圈</h3><h1 id="三、离调与转调"><a href="#三、离调与转调" class="headerlink" title="三、离调与转调"></a>三、离调与转调</h1><h2 id="3-1-转调"><a href="#3-1-转调" class="headerlink" title="3.1 转调"></a>3.1 转调</h2><h2 id="3-2-离调"><a href="#3-2-离调" class="headerlink" title="3.2 离调"></a>3.2 离调</h2><p>离调可以理解为<strong>转调</strong>的一种特殊形式，但要注意区分它和转调的关系。离调具体是指音乐作品中出现了某一临时变化音或临时带变音的和弦而引起了调性色彩的改变，而且这种改变只作了短暂停留之后又回到了原来的调性上，这样的调性变化就称作离调。</p>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>乐理</tag>
        <tag>和弦</tag>
        <tag>编曲</tag>
      </tags>
  </entry>
  <entry>
    <title>乐理进阶大全-曲式结构</title>
    <url>/2022/08/10/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E6%9B%B2%E5%BC%8F%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-1-基本术语"><a href="#1-1-基本术语" class="headerlink" title="1.1 基本术语"></a>1.1 基本术语</h2><p>莫扎特《A大调奏鸣曲》的每小节就是一个乐汇，两个乐汇组成一个乐节，两个乐节构成一个句，两个乐句构成一个乐段</p>
<ul>
<li>音乐材料：不同的乐器音响效果</li>
<li>乐汇：是音乐语言的基本结构单位，至少需要一个逻辑强拍和一个逻辑弱拍，因此最少需要两个音，可以理解为语言中的词汇</li>
<li>乐节：是音乐语言的基本组织单位。一般由两个乐汇构成，是乐段内部介于乐句与乐汇之间的结构段落。</li>
<li>乐句：是音乐语言的基本表达单位，是构成一首乐曲的一个具有特性的基本结构单位</li>
<li>乐段：是音乐形象的具体表现单位</li>
<li>乐思：乐思就是在音乐曲式分析中整体表达内容的最小单位</li>
<li>主题：音乐主题是一首（部）音乐作品（段落）中的最主要的乐思，即音乐的核心部分。它是音乐思维的“种子”</li>
<li>动机：是音乐主题最具代表性的小单位，是主题或乐曲发展的胚芽，具有一定的独立表现意义，可能是一个节奏型，一个旋律走向，肯定很短，可以衔接不同的乐段作为同一个曲子</li>
<li>发展：音乐律动的进行过程</li>
</ul>
<p>现在着重讲下乐句和乐段，乐段是由乐句构成，一般为8小节，前4节为先行部，后4节为后续部</p>
<p>先行部和后续部的前半段都是相同的，只是后半段的发展是不同的，先行部的后半段为一个终止，但终止感相对与后续部的后半段的终止感要弱</p>
<h2 id="1-2-音乐材料与发展手法"><a href="#1-2-音乐材料与发展手法" class="headerlink" title="1.2 音乐材料与发展手法"></a>1.2 音乐材料与发展手法</h2><ul>
<li>重复：对前一小节的重复演奏</li>
<li>变奏</li>
<li>展开</li>
<li>派生对比</li>
<li>并置对比</li>
<li>模仿</li>
<li>摸进：模仿进行，将前一小节的音符移高或者移低</li>
<li>分裂</li>
<li>平行乐句：两个乐句开始部分是相同的，只有结尾不同，形成一种呼应，比如《欢乐颂》</li>
<li>时值的压缩与扩大</li>
</ul>
<h1 id="二、曲式"><a href="#二、曲式" class="headerlink" title="二、曲式"></a>二、曲式</h1><img src="/2022/08/10/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E6%9B%B2%E5%BC%8F%E7%BB%93%E6%9E%84/jiegou.png" class="" title="jiegou">
<h2 id="2-1-一部曲式"><a href="#2-1-一部曲式" class="headerlink" title="2.1 一部曲式"></a>2.1 一部曲式</h2><p>一部曲式：一部曲式是完整的曲式中规模最小的结构，结构为A。可以由一个乐句、两个乐句、三个及三个以上的乐句组成。一般有比较明显的终止式，能够表达一个完整或相对完整的乐思。</p>
<ul>
<li>这种曲式结构最简单，没有明显的重复段落，没有第二主题，也没有副歌。</li>
<li>用这种结构写出来的乐曲通常较短</li>
</ul>
<h2 id="2-2-单二部曲式"><a href="#2-2-单二部曲式" class="headerlink" title="2.2 单二部曲式"></a>2.2 单二部曲式</h2><p>单二部曲式：由两个乐段构成的曲式，叫做单二部曲式，结构为A+B，通常情况下A段和B段会形成鲜明对比</p>
<p>再继续细分的话又分为两种情况：</p>
<ul>
<li>带再现的单二部曲式，这种曲式里通常B段的前一半为对比部分，后一半为再现部分</li>
<li>不带再现的单二部曲式，这种曲式A段和B段由完全不同的材料构成，形成鲜明对比</li>
</ul>
<h2 id="2-3-单三部曲式"><a href="#2-3-单三部曲式" class="headerlink" title="2.3 单三部曲式"></a>2.3 单三部曲式</h2><p>由三个乐段构成，其中第一段和第三段是一样的材料，结构为A+B+A。这种曲式的中段B会与前后两段A形成鲜明对比，通常在速度、力度、感情变化方面都完全不一样。有些作品的B段主题也可能由A段的主题变化而来。</p>
<p>第三段为第一段的再现，有些作品完全一样，有些作品可能会产生一些微小的变化。</p>
<h2 id="2-4-复三部曲式"><a href="#2-4-复三部曲式" class="headerlink" title="2.4 复三部曲式"></a>2.4 复三部曲式</h2><p>这种曲式的大结构与单三部曲式完全一样，只是这里的三个段落中，每个段落还包含一个独立的曲式结构，可能为单二部曲式。可能为单三部曲式</p>
<p>在古典作品中，中间的段落叫做“三声中部”</p>
<h2 id="2-5-变奏曲式"><a href="#2-5-变奏曲式" class="headerlink" title="2.5 变奏曲式"></a>2.5 变奏曲式</h2><p>变奏曲一开始会有一个完整的主题段落，在后面的段落中，都是这个主题的发展变化。这个发展变化会改变其中的音型、节奏、调性、速度、音区等等，但是主题中的某些材料会保留下来，例如和声、旋律走向、句子逻辑关系等等。变奏曲式的变奏部分数量可以有很多，例如拉赫玛尼诺夫的《帕格尼尼主题狂想曲》有24个变奏，巴赫的《哥德堡变奏曲》有30个变奏。</p>
<h2 id="2-6-回旋曲式"><a href="#2-6-回旋曲式" class="headerlink" title="2.6 回旋曲式"></a>2.6 回旋曲式</h2><p>这种曲式由两种部分构成，为主部与副部。在段落中，第1、3、5…奇数段落为主部，第2、4、6…偶数段落为副部。主部的段落主题是一致的，而副部的主题一直在不断变化。回旋曲式主部和副部的数量可以很多</p>
<p>这样的曲式听起来会感觉到不断有新主题出现，然后回到原来的主题</p>
<p>回旋曲式的产生源于声乐性的轮舞曲，在轮舞曲中有分节歌与副歌，分节歌通常是独唱，副歌是合唱，每次独唱完成后都会回到合唱，每次合唱部分都是相同的。</p>
<h2 id="2-7-奏鸣曲式"><a href="#2-7-奏鸣曲式" class="headerlink" title="2.7 奏鸣曲式"></a>2.7 奏鸣曲式</h2><p>奏鸣曲式在大结构上和三部曲式一样，但是其内部结构更为复杂。第一段的呈示部和第三段的再现部用相同的主题，而中间的展开部会把这个主题发展变化。</p>
<p>呈示部中往往还包含第一主题、第二主题、第一结尾、第二结尾，这些片段之间还有一些连接段，在调性安排上，第一主题为主调，第二主题转到属调。</p>
<p>呈示部中往往还包含第一主题、第二主题、第一结尾、第二结尾，这些片段之间还有一些连接段，在调性安排上，第一主题为主调，第二主题转到属调。</p>
<p>再现部包含了呈示部中的所有部分，区别在于这里第一主题和第二主题都为主调。</p>
<p>有很多的奏鸣曲、协奏曲、交响乐、室内乐的乐章都用到了奏鸣曲式，尤其是第一乐章用得最多，但不是所有的作品都是用奏鸣曲式来写的，也可以用其他的结构来写</p>
<h1 id="三、旋律"><a href="#三、旋律" class="headerlink" title="三、旋律"></a>三、旋律</h1><h2 id="3-1-音程旋律"><a href="#3-1-音程旋律" class="headerlink" title="3.1 音程旋律"></a>3.1 音程旋律</h2><p>音高进行方式：</p>
<ul>
<li>同音重复：相同音重复进行</li>
<li>极进进行：两个音的进行相差二度关系</li>
<li>小跳跳进：两个音的进行相差三度关系</li>
<li>大跳进行：两个音的进行相差三度以上关系</li>
</ul>
<p>对于大跳进行，四度以上的进行不能太频繁，六度及以上的跳进必须在之后要反向进行</p>
<p>规范：</p>
<ul>
<li>音域在12度以内：音域太广就容易不好演奏、演唱困难、音乐缺少连贯性</li>
<li>极进跳进交错：连续的级进音乐容易单调，连续的跳进音乐容易不稳定，所以交错进行可以保持音乐的活力和稳定</li>
</ul>
<p>音程旋律的优缺点：</p>
<ul>
<li>无需灵感、无需创意</li>
<li>旋律随机，重复概率小</li>
<li>旋律要进行多次调整，否则可能很难听</li>
</ul>
<h2 id="3-2-旋律发展"><a href="#3-2-旋律发展" class="headerlink" title="3.2 旋律发展"></a>3.2 旋律发展</h2><p>音乐的张力可以推动音乐的发展</p>
<ul>
<li>上升进行：音高向上的进行</li>
<li>下降进行：音高向下的进行</li>
<li>交错进行：上升和下降交错</li>
<li>静止进行：音高不发生变化</li>
</ul>
<p>通过音高控制张力：</p>
<ul>
<li>音高上升：积累张力</li>
<li>音高下降：释放张力</li>
</ul>
<p>通过音长控制张力：</p>
<ul>
<li><p>短促音符：积累张力</p>
</li>
<li><p>悠长音符：释放张力</p>
</li>
</ul>
<h1 id="四、流行音乐曲式"><a href="#四、流行音乐曲式" class="headerlink" title="四、流行音乐曲式"></a>四、流行音乐曲式</h1><h2 id="4-1-结构"><a href="#4-1-结构" class="headerlink" title="4.1 结构"></a>4.1 结构</h2><p>一般来说副歌的和声要比正歌、前奏要丰富许多，是整首歌感情最饱满的部分，如果正歌后直接接副歌，就会感觉很突兀，所以流行歌曲的正歌和副歌之间会有一个预副歌的部分，这一部分的乐器会比正歌丰富一些</p>
<img src="/2022/08/10/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E6%9B%B2%E5%BC%8F%E7%BB%93%E6%9E%84/liuxin.png" class="" title="liuxin">
<ul>
<li>Intro：前奏、间奏</li>
<li>Verse：正歌</li>
<li>Pre-Chorus：预副歌</li>
<li>Chorus：副歌</li>
<li>Bridge：桥段</li>
<li>Outro：尾奏</li>
</ul>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>乐理</tag>
        <tag>曲式结构</tag>
        <tag>音乐作品</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式-行为型模式</title>
    <url>/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h1 id="二、模板方法模式"><a href="#二、模板方法模式" class="headerlink" title="二、模板方法模式"></a>二、模板方法模式</h1><p>模板方法角色：</p>
<ul>
<li>抽象类：负责给出一个算法的轮廓和骨架，它由一个模板方法的若干个基本方法构成</li>
<li>具体子类：实现抽象类中所定义的抽象方法和钩子方法</li>
</ul>
<p>抽象类中的方法有以下几类：</p>
<ul>
<li>模板方法：定义算法的股价，按照某种顺序调用其包含的基本方法</li>
<li>基本方法：整个算法中的一个步骤，由具体子类实现<ul>
<li>抽象方法：在抽象类中声明，由具体子类实现</li>
<li>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写</li>
<li>钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种</li>
</ul>
</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/muban.png" class="" title="muban">
<h2 id="2-1-实现"><a href="#2-1-实现" class="headerlink" title="2.1 实现"></a>2.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Clent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        AbstractClass tm = <span class="keyword">new</span> ConcreteClass();</span><br><span class="line">        tm.templateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        specificMethod();</span><br><span class="line">        abstractMehtod1();</span><br><span class="line">        abstractMehtod2();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类中的具体方法被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法1的实现被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象方法2的实现被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象类中的具体方法被调用...</span></span><br><span class="line"><span class="comment">抽象方法1的实现被调用...</span></span><br><span class="line"><span class="comment">抽象方法1的实现被调用...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-应用"><a href="#2-2-应用" class="headerlink" title="2.2 应用"></a>2.2 应用</h2><h1 id="三、策略模式"><a href="#三、策略模式" class="headerlink" title="三、策略模式"></a>三、策略模式</h1><p>该模式定义了一系列算法并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。</p>
<p>策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p>
<p>策略模式的主要角色：</p>
<p>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现</p>
<p>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</p>
<p>环境（Context）类：持有一个策略类的引用，最终给客户端调用</p>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/celue.png" class="" title="celue">
<h2 id="3-1-实现"><a href="#3-1-实现" class="headerlink" title="3.1 实现"></a>3.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context c = <span class="keyword">new</span> Context();</span><br><span class="line">        Strategy s = <span class="keyword">new</span> ConcreteStrategyA();</span><br><span class="line">        c.setStrategy(s);</span><br><span class="line">        c.strategyMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        s = <span class="keyword">new</span> ConcreteStrategyB();</span><br><span class="line">        c.setStrategy(s);</span><br><span class="line">        c.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体策略A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体策略A的策略方法被访问！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体策略B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体策略B的策略方法被访问！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Strategy <span class="title">getStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        strategy.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-应用"><a href="#3-2-应用" class="headerlink" title="3.2 应用"></a>3.2 应用</h2><h1 id="四、命令模式"><a href="#四、命令模式" class="headerlink" title="四、命令模式"></a>四、命令模式</h1><p>命令（ ommand ）模式的定义如下：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。</p>
<p>命令模式的主要角色：</p>
<ul>
<li>抽象命令类（Command）角色：声明执行命令的接口，拥有执行命令的抽象方法execute()</li>
<li>具体命令角色（Concrete Command）角色：是抽象命令的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令执行的操作</li>
<li>实现者/接收者（Receiver）角色：执行命令功能的相关操作，是具体命令对象业务的真正实现者</li>
<li>调用者/请求者（Invoker）角色：是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/mingling.png" class="" title="mingling">
<h2 id="4-1-实现"><a href="#4-1-实现" class="headerlink" title="4.1 实现"></a>4.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Command cmd = <span class="keyword">new</span> ConcreteCommand();</span><br><span class="line">        Invoker ir = <span class="keyword">new</span> Invoker(cmd);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户访问调用者的call()方法...&quot;</span>);</span><br><span class="line">        ir.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用者执行命令command...&quot;</span>);</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    </span><br><span class="line">    ConcreteCommand()&#123;</span><br><span class="line">        receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收者的action()方法被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户访问调用者的call()方法...</span></span><br><span class="line"><span class="comment">调用者执行命令command...</span></span><br><span class="line"><span class="comment">接收者的action()方法被调用...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="4-2-应用"><a href="#4-2-应用" class="headerlink" title="4.2 应用"></a>4.2 应用</h2><h1 id="五、职责链模式"><a href="#五、职责链模式" class="headerlink" title="五、职责链模式"></a>五、职责链模式</h1><p>为了避免请求发送者与多个请求处理者糯合在 起，将所有请求的处理者通过前一对象记住其下个对象的引用而连成一条链当有求发生时，可将请求沿着这条链传递，直到有对象处理它为止</p>
<p>职责链的主要角色：</p>
<ul>
<li>抽象处理者角色（Handler）：定义一个处理请求的接口，包含抽象处理方法和一个后继连接</li>
<li>具体处理者角色（ConcreteHandler）：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者</li>
<li>客户类角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/chain.png" class="" title="chain">
<h2 id="5-1-实现"><a href="#5-1-实现" class="headerlink" title="5.1 实现"></a>5.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainOfResponsibilityPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line">        handler1.setNext(handler2);</span><br><span class="line">        handler1.handleRequest(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象处理者角色</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Handler next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handler next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.equals(<span class="string">&quot;one&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;具体处理1负责处理该请求！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (getNext() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                getNext().handleRequest(request);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有人处理该请求！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.equals(<span class="string">&quot;two&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;具体处理2负责处理该请求！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (getNext() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                getNext().handleRequest(request);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有人处理该请求！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-2-应用"><a href="#5-2-应用" class="headerlink" title="5.2 应用"></a>5.2 应用</h2><h1 id="六、状态模式"><a href="#六、状态模式" class="headerlink" title="六、状态模式"></a>六、状态模式</h1><p>状态模式：对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中， 允许状态对象在其内部状态发生改变时改变其行为。</p>
<p>状态模式的主要角色：</p>
<ul>
<li>环境角色（Context）：也称为上下文，它定义了客户感兴趣的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理</li>
<li>抽象状态角色（State）：定义一个接口，用以封装环境对象中的特定状态所对应的行为</li>
<li>具体状态角色（Concrete State）：实现抽象状态所对应的行为</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/state.png" class="" title="state">
<h2 id="6-1-实现"><a href="#6-1-实现" class="headerlink" title="6.1 实现"></a>6.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatePatternClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();	<span class="comment">// 创建环境</span></span><br><span class="line">        context.Handle();	<span class="comment">// 处理请求</span></span><br><span class="line">        context.Handle();</span><br><span class="line">        context.Handle();</span><br><span class="line">        context.Handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = ConcreteStateA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state.Handle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象状态类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Handle</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态是A.&quot;</span>)</span><br><span class="line">            context.setState(<span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Handle</span><span class="params">(Context context)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态是B.&quot;</span>)</span><br><span class="line">            context.setState(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当前状态是A.</span></span><br><span class="line"><span class="comment">当前状态是B.</span></span><br><span class="line"><span class="comment">当前状态是A.</span></span><br><span class="line"><span class="comment">当前状态是B.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="6-2-应用"><a href="#6-2-应用" class="headerlink" title="6.2 应用"></a>6.2 应用</h2><h1 id="七、观察者模式"><a href="#七、观察者模式" class="headerlink" title="七、观察者模式"></a>七、观察者模式</h1><p>观察者模式：指多个对象存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式 它是对象行为型模式。</p>
<p>观察者模式的主要角色：</p>
<ul>
<li>抽象主题Subject：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法</li>
<li>具体主题Concrete Subject：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象</li>
<li>抽象观察者Observer：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用</li>
<li>具体观察者Concrete Observer：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/observer.png" class="" title="observer">
<h2 id="7-1-实现"><a href="#7-1-实现" class="headerlink" title="7.1 实现"></a>7.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverPattern</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        Observer obs1 = <span class="keyword">new</span> ConcreteObserver1();</span><br><span class="line">        Observer obs2 = <span class="keyword">new</span> ConcreteObserver2();</span><br><span class="line">        subject.add(obs1);</span><br><span class="line">        subject.add(obs2);</span><br><span class="line">        subject.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;Object&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="comment">// 添加观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;	<span class="comment">// 通知观察者方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体目标发生改变...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Object obs:observers)&#123;</span><br><span class="line">            ((Observer)obs).response();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">response</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver1</span> <span class="title">implement</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体观察者1做出反应...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver2</span> <span class="title">implement</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体观察者2做出反应...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">具体目标发生改变...</span></span><br><span class="line"><span class="comment">----------------</span></span><br><span class="line"><span class="comment">具体观察者1做出反应...</span></span><br><span class="line"><span class="comment">具体观察者2做出反应...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="7-2-应用"><a href="#7-2-应用" class="headerlink" title="7.2 应用"></a>7.2 应用</h2><h1 id="八、中介者模式"><a href="#八、中介者模式" class="headerlink" title="八、中介者模式"></a>八、中介者模式</h1><p>中介模式：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的精合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p>
<p>中介模式的主要角色：</p>
<ul>
<li>抽象中介者Mediator：中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法</li>
<li>具体中介者Concrete Mediator：实现中介者接口，定义一个List来管理同事对象，协调各个同事角色的交互关系，因此它们依赖于同事角色</li>
<li>抽象同事类Colleague：定义同时类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能</li>
<li>具体同事类Concrete Colleague：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/mediator.png" class="" title="mediator">
<h2 id="8-1-实现"><a href="#8-1-实现" class="headerlink" title="8.1 实现"></a>8.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediatorPattern</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Mediator md = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">        Colleague c1,c2;</span><br><span class="line">        c1 = <span class="keyword">new</span> ConcreteColleague1();</span><br><span class="line">        c2 = <span class="keyword">new</span> ConcreteColleague2();</span><br><span class="line">        md.register(c1);</span><br><span class="line">        md.register(c2);</span><br><span class="line">        c1.send();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">        c2.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Colleague colleague)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">relay</span><span class="params">(Colleague cl)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Colleague&gt; colleagues = <span class="keyword">new</span> ArrayList&lt;Colleague&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Colleague colleague)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!colleagues.contains(colleague))&#123;</span><br><span class="line">            colleague.add(colleague);</span><br><span class="line">            colleague.setMedium(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relay</span><span class="params">(Colleague cl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Colleague ob:colleagues)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!ob.equals(cl))&#123;		<span class="comment">// 传递请求给非cl的对象</span></span><br><span class="line">                ((Colleague)ob).receive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMedium</span><span class="params">(Mediator mediator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体同事类1收到请求！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体同事类1发出请求！&quot;</span>);</span><br><span class="line">        mediator.relay(<span class="keyword">this</span>)	<span class="comment">// 请中介者转发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体同事类2收到请求！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体同事类2发出请求！&quot;</span>);</span><br><span class="line">        mediator.relay(<span class="keyword">this</span>)	<span class="comment">// 请中介者转发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">具体同事类1发出请求！</span></span><br><span class="line"><span class="comment">具体同事类2收到请求！</span></span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"><span class="comment">具体同事类2发出请求！</span></span><br><span class="line"><span class="comment">具体同事类1收到请求！</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="8-2-应用"><a href="#8-2-应用" class="headerlink" title="8.2 应用"></a>8.2 应用</h2><h1 id="九、迭代器模式"><a href="#九、迭代器模式" class="headerlink" title="九、迭代器模式"></a>九、迭代器模式</h1><p>迭代器Iterator模式：提供一个对象来 序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。 </p>
<p>迭代器模式的主要角色：</p>
<ul>
<li>抽象聚合Aggregate角色：定义存储、添加、删除聚合对象以及创建迭代器对象的接口</li>
<li>具体聚合Concrete Aggregate角色：实现抽象聚合类，返回一个具体迭代器的实例</li>
<li>抽象迭代器Iterator角色：定义访问和遍历聚合元素的接口，通常包含hasNext()、first()、next()等方法</li>
<li>具体迭代器Concrete  Iterator角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/iterator.png" class="" title="iterator">
<h2 id="9-1-实现"><a href="#9-1-实现" class="headerlink" title="9.1 实现"></a>9.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorPattern</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Aggregate ag = <span class="keyword">new</span> ConcreteAggregate();</span><br><span class="line">        ag.add(<span class="string">&quot;中山大学&quot;</span>);</span><br><span class="line">        ag.add(<span class="string">&quot;华南理工&quot;</span>);</span><br><span class="line">        ag.add(<span class="string">&quot;韶关学院&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;聚合的内容有：&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Iterator it = ag.getIterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Object ob = it.next();</span><br><span class="line">            System.out.println(ob.toString()+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Object ob = it.first();</span><br><span class="line">        System.out.println(<span class="string">&quot;\nFirst：&quot;</span>+ob.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        list.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        list.remove(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(List&lt;Object&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= list.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        Object obj = list.get(index);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.hasNext())&#123;</span><br><span class="line">            obj = list.get(index++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">聚合的内容有：中山大学	华南理工 韶关学院</span></span><br><span class="line"><span class="comment">First：中山大学</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="9-2-应用"><a href="#9-2-应用" class="headerlink" title="9.2 应用"></a>9.2 应用</h2><h1 id="十、访问者模式"><a href="#十、访问者模式" class="headerlink" title="十、访问者模式"></a>十、访问者模式</h1><p>访问者模式：将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。</p>
<p>访问者模式的主要角色：</p>
<ul>
<li>抽象访问者Visitor：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作visit()，该操作中的参数类型标识了被访问的具体元素</li>
<li>具体访问者Concrete Vistor：实现抽象访问者角色中声明的各个访问操作</li>
<li>抽象元素角色Element：声明一个包含接受操作accept()的接口，被接受的访问者对象作为accept()方法的参数</li>
<li>具体元素角色Concrete Element：实现抽象元素角色提供的accept()操作，其方法体通常都是visitor.visit(this)，另外具体元素中可能还包含本身业务逻辑的相关操作</li>
<li>对象结构角色Object Structure：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由List、Set、Map等聚合类实现</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/visitor.png" class="" title="visitor">
<h2 id="10-1-实现"><a href="#10-1-实现" class="headerlink" title="10.1 实现"></a>10.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectStructure os = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line">        os.add(<span class="keyword">new</span> ConcreteElementA());</span><br><span class="line">        os.add(<span class="keyword">new</span> ConcreteElementB());</span><br><span class="line">        </span><br><span class="line">        Visitor visitor = <span class="keyword">new</span> ConcreteVisitorA();</span><br><span class="line">        os.accept(visitor);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">        visitor = <span class="keyword">new</span> ConcreteVisitorB();</span><br><span class="line">        os.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA element)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB element)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorA</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA element)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体访问者A访问--&gt;&quot;</span>+element.operationA());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB element)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体访问者A访问--&gt;&quot;</span>+element.operationB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorB</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA element)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体访问者B访问--&gt;&quot;</span>+element.operationA());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB element)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体访问者B访问--&gt;&quot;</span>+element.operationB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Element</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">implements</span> <span class="title">Element</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">operationA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;具体元素A的操作。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">implements</span> <span class="title">Element</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">operationB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;具体元素B的操作。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Element&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>&#123;</span><br><span class="line">        Iterator&lt;Element&gt; i = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext())&#123;</span><br><span class="line">            ((Element) i.next()).accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Element element)</span></span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Element element)</span></span>&#123;</span><br><span class="line">        list.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">具体访问者A访问--&gt;具体元素A的操作</span></span><br><span class="line"><span class="comment">具体访问者A访问--&gt;具体元素B的操作</span></span><br><span class="line"><span class="comment">---------------------</span></span><br><span class="line"><span class="comment">具体访问者B访问--&gt;具体元素A的操作</span></span><br><span class="line"><span class="comment">具体访问者B访问--&gt;具体元素B的操作</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="10-2-应用"><a href="#10-2-应用" class="headerlink" title="10.2 应用"></a>10.2 应用</h2><h1 id="十一、备忘录模式"><a href="#十一、备忘录模式" class="headerlink" title="十一、备忘录模式"></a>十一、备忘录模式</h1><p>备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p>
<p>备忘录模式的主要角色：</p>
<ul>
<li>发起人Originator角色：记录当前时刻的内部状态信息，提供创建备忘录和回复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息</li>
<li>备忘录Memento角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人</li>
<li>管理者Caretaker角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问和修改</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/memento.png" class="" title="memento">
<h2 id="11-1-实现"><a href="#11-1-实现" class="headerlink" title="11.1 实现"></a>11.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MementoPattern</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator or = <span class="keyword">new</span> Originator();</span><br><span class="line">        Caretaker cr = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        or.setState(<span class="string">&quot;S0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始状态：&quot;</span>+or.getState());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 保存状态</span></span><br><span class="line">        cr.setMemento(or.createMemento());</span><br><span class="line">        </span><br><span class="line">        or.setState(<span class="string">&quot;S1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;新的状态：&quot;</span>+or.getState());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 恢复状态</span></span><br><span class="line">        or.restoreMemento(cr.getMemento());</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复状态：&quot;</span>+or.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento m)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(m.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento m)</span></span>&#123;</span><br><span class="line">        memento = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始状态：S0</span></span><br><span class="line"><span class="comment">新的状态：S1</span></span><br><span class="line"><span class="comment">恢复状态：S0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="11-2-应用"><a href="#11-2-应用" class="headerlink" title="11.2 应用"></a>11.2 应用</h2><h1 id="十二、解释器模式"><a href="#十二、解释器模式" class="headerlink" title="十二、解释器模式"></a>十二、解释器模式</h1><p>解释器Interpreter模式的定义：给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释语言中的句子。也就是说，用编译语言的方式来分析应用中的实例。这种模式实现了文法表达式处理的接口。</p>
<p>解释器模式的主要角色：</p>
<ul>
<li>抽象表达式Abstract Expression：定义解释器的接口，约定解释器的解释操作，主要包含解释方法interpret()</li>
<li>终结符表达式Terminal Expression：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应</li>
<li>非终结符表达式Nonterminal Expression：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式</li>
<li>环境角色Context：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值</li>
<li>客户端Client：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法</li>
</ul>
<img src="/2022/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/interpret.png" class="" title="interpret">
<h2 id="12-1-实现"><a href="#12-1-实现" class="headerlink" title="12.1 实现"></a>12.1 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*文法规则</span></span><br><span class="line"><span class="comment">&lt;expression&gt;::=&lt;city&gt;的&lt;person&gt;</span></span><br><span class="line"><span class="comment">&lt;city&gt; ::= 韶关 | 广州</span></span><br><span class="line"><span class="comment">&lt;person&gt; ::= 老人 | 妇女 | 儿童</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterPatternDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context bus = <span class="keyword">new</span> Context();</span><br><span class="line">        bus.freeRide(<span class="string">&quot;韶关的老人&quot;</span>);</span><br><span class="line">        bus.freeRide(<span class="string">&quot;韶关的年轻人&quot;</span>);</span><br><span class="line">        bus.freeRide(<span class="string">&quot;广州的妇女&quot;</span>);</span><br><span class="line">        bus.freeRide(<span class="string">&quot;广州的儿童&quot;</span>);</span><br><span class="line">        bus.freeRide(<span class="string">&quot;山东的儿童&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象表达类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String info)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终结符表达式类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TerminalExpression</span><span class="params">(String[] data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;data.length;i++)</span><br><span class="line">            set.add(data[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (set.contains(info))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非终结表达式类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonTerminalExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Expression city = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Expression person = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonTerminalExpression</span><span class="params">(Expression city,Expression person)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        String s[] = info.split(<span class="string">&quot;的&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> city.interpret(s[<span class="number">0</span>])&amp;&amp;person.interpret(s[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] citys = &#123;<span class="string">&quot;韶关&quot;</span>, <span class="string">&quot;广州&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] persons = &#123;<span class="string">&quot;老人&quot;</span>, <span class="string">&quot;妇女&quot;</span>, <span class="string">&quot;儿童&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> Expression cityPerson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Expression city = <span class="keyword">new</span> TerminalExpression(citys);</span><br><span class="line">        Expression person = <span class="keyword">new</span> TerminalExpression(persons);</span><br><span class="line">        cityPerson = <span class="keyword">new</span> NonTerminalExpression(city,person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">freeRide</span><span class="params">(String info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> ok = cityPerson.interpret(info);</span><br><span class="line">        <span class="keyword">if</span> (ok) System.out.println(<span class="string">&quot;您是&quot;</span>+info+<span class="string">&quot;，您本次乘车免费！&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> System.out.println(info+<span class="string">&quot;，您不是免费人员，本次乘车扣费20元！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-2-应用"><a href="#12-2-应用" class="headerlink" title="12.2 应用"></a>12.2 应用</h2>]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>行为型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>企业常识</title>
    <url>/2022/08/30/%E4%BC%81%E4%B8%9A%E5%B8%B8%E8%AF%86/</url>
    <content><![CDATA[<h1 id="一、To-B和To-C的区别"><a href="#一、To-B和To-C的区别" class="headerlink" title="一、To B和To C的区别"></a>一、To B和To C的区别</h1><p>To B 英文为To Business，指面向企业或特定用户群体，通常为面向企业，为企业提供相关的服务、产品、平台，其建设成果不会向大众公开，为企业内部所用，包括企业的内外部运营管理、数据应用及决策分析等。</p>
<p>To C为To Customer，即面向最终客户，它并不是面对企业那种组织，而是面向个体消费者。To C类的产品是市面上最多的产品，它们都遵循特定的规范流程，开发成果完全面向于大众，如：衣食住行各类APP等。<br>C端产品的本质都有一个核心的功能，例如：音乐类app有听音乐的功能，游戏类app的核心功能就是游戏。B端产品的本质是为满足用户的工作需求，而工作需求往往不是单一功能满足的，其必须是多种功能的复合和嵌套</p>
<p>To B与To C概念不同、定位不同，所以对应的运营厂商及被运营的主体对象也不相同，To B的运营商一般都是软件厂商，运营的主体是泛化的企业；To C的运营商一般都是IT行业的巨头，运用的主体是普通用户。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>企业</tag>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title>诗词韵律解析-填词篇</title>
    <url>/2022/08/30/%E8%AF%97%E8%AF%8D%E9%9F%B5%E5%BE%8B%E8%A7%A3%E6%9E%90-%E5%A1%AB%E8%AF%8D%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>词的定格的一些符号解释：</p>
<ul>
<li>“+”：表示可平可仄</li>
<li>“-”：表示平声</li>
<li>“|”：表示仄声</li>
</ul>
<h1 id="二、平韵格"><a href="#二、平韵格" class="headerlink" title="二、平韵格"></a>二、平韵格</h1><h3 id="2-1-十六字令"><a href="#2-1-十六字令" class="headerlink" title="2.1 十六字令"></a>2.1 十六字令</h3><p>十六字令《苍梧谣》、《归字谣》，十六字，三平韵，定格如下：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">-(韵)</span><br><span class="line">+ |<span class="string"> - - </span>|<span class="string"> </span>|<span class="string"> -(韵)</span></span><br><span class="line"><span class="string">- - </span>|<span class="string">(句) + </span>|<span class="string"> </span>|<span class="string"> - -(韵)</span></span><br></pre></td></tr></table></figure>
<p>示例1：<br>天！休使圆蟾照客眠。<br>人何在？桂影自婵娟。    —-蔡伸</p>
<p>示例2：<br>归！猎猎西风卷绣旗。<br>拦教住，重举送行杯。    —-张孝祥</p>
<h3 id="2-2-南歌子"><a href="#2-2-南歌子" class="headerlink" title="2.2 南歌子"></a>2.2 南歌子</h3><p>南歌子又名又名“南柯子”、“怕春归”“、”春宵曲”、“碧窗梦”、“风蝶令”等。南歌子有单调和双调之分，区别如下：</p>
<p>单调：正体单调二十三字，五句三平韵；另有单调二十六字，五句三平韵</p>
<p>双调：双调五十二字，前后段各四句三平韵；双调五十四字，前后段各四句三平韵等变体</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">正体单调（二十三字）：</span><br><span class="line">|<span class="string"> </span>|<span class="string"> - - </span>|<span class="string">（句）</span></span><br><span class="line"><span class="string">- - </span>|<span class="string"> </span>|<span class="string"> -（韵）</span></span><br><span class="line"><span class="string">- </span>|<span class="string"> </span>|<span class="string"> - -（韵）</span></span><br><span class="line"><span class="string"></span>|<span class="string"> - - </span>|<span class="string"> </span>|</span><br><span class="line">|<span class="string"> - -（韵）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">变体单调（二十六字）：</span></span><br><span class="line"><span class="string"></span>|<span class="string"> </span>|<span class="string"> - - </span>|<span class="string">（句）</span></span><br><span class="line"><span class="string">- - </span>|<span class="string"> </span>|<span class="string"> -（韵）</span></span><br><span class="line"><span class="string">+ - + </span>|<span class="string"> </span>|<span class="string"> - -（韵）</span></span><br><span class="line"><span class="string">+ </span>|<span class="string"> + - + </span>|<span class="string"> </span>|<span class="string"> - -（韵）</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-渔歌子"><a href="#2-3-渔歌子" class="headerlink" title="2.3 渔歌子"></a>2.3 渔歌子</h3><p>渔歌子，词牌名，又名“渔父”“渔父乐”“渔父词”“秋日田父辞”等</p>
<p>二十七字，五句四平韵</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+ |<span class="string"> - - </span>|<span class="string"> </span>|<span class="string"> -（韵）</span></span><br><span class="line"><span class="string">+ - - </span>|<span class="string"> </span>|<span class="string"> - -（韵）</span></span><br><span class="line"><span class="string">- </span>|<span class="string"> </span>|<span class="string">（句）</span></span><br><span class="line"><span class="string"></span>|<span class="string"> - -（韵）</span></span><br><span class="line"><span class="string">- - </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> - -（韵）</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>示例：<br>西塞山前白鹭飞，桃花流水鳜（guì）鱼肥。<br>青箬（ruò）笠（lì），绿蓑衣，<br>斜风细雨不须归。        —-张志和《渔歌子·西塞山前白鹭飞》</p>
<p>西塞山：在今浙江省湖州市西面或湖北省黄石市<br>箬笠：用竹篾、箬叶编的斗笠<br>蓑衣：用草或棕麻编织的雨衣</p>
<h3 id="2-4-忆江南"><a href="#2-4-忆江南" class="headerlink" title="2.4 忆江南"></a>2.4 忆江南</h3><p>忆江南，本为唐教坊曲名，后用作词牌名。又名“望江南”、“梦江南”、“江南好”、“望江梅”、“春去也”、“梦游仙”、“安阳好”、“步虚声”、“壶山好”、“望蓬莱”、“江南柳”等。</p>
<p>忆江南，二十七字，五句三平韵</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">- + |<span class="string">（句）</span></span><br><span class="line"><span class="string">+ </span>|<span class="string"> </span>|<span class="string"> - -（韵）</span></span><br><span class="line"><span class="string">+ </span>|<span class="string"> + - - </span>|<span class="string"> </span>|<span class="string">（句）</span></span><br><span class="line"><span class="string">+ - + </span>|<span class="string"> </span>|<span class="string"> - -（韵）</span></span><br><span class="line"><span class="string">+ </span>|<span class="string"> </span>|<span class="string"> - -（韵）</span></span><br></pre></td></tr></table></figure>
<p>春去也，多谢洛城人。弱柳从风疑举袂，丛兰裛（yì）露似沾巾。独坐亦含嚬（pín）。<br>春去也。共惜艳阳年。犹有桃花流水上，无辞竹叶醉尊前。惟待见青天。    —-刘禹锡《忆江南·春去也》</p>
<p>春未老，风细柳斜斜。试上超然台上看(看 一作：望)，半壕（háo）春水一城花。烟雨暗千家。<br>寒食后，酒醒却咨（zī）嗟（jiē）。休对故人思故国，且将新火试新茶。诗酒趁年华。        —-苏轼《望江南 超然台作》</p>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>中国诗词</category>
      </categories>
      <tags>
        <tag>宋词</tag>
        <tag>宋词格式</tag>
      </tags>
  </entry>
  <entry>
    <title>人际交往中的思考</title>
    <url>/2022/08/31/%E4%BA%BA%E9%99%85%E4%BA%A4%E5%BE%80%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="一、教师节送礼"><a href="#一、教师节送礼" class="headerlink" title="一、教师节送礼"></a>一、教师节送礼</h1><p>时间：9月6日，周二</p>
<p>地点：印象城、实验室</p>
<p>事情前后：这周是准备给老师买礼物的，毕竟快要到教师节了，今年的教师节和中秋节又是同一天，所以必须得提前准备了。我、小晴和冬梅三人从实验室出发后刚出教学楼就发现包什么的都没有带，于是跑回到实验室拿包。拿完包后从学校到印象城的路上并没有什么问题。但从吃饭到买完东西回来送礼就出现了许多问题。</p>
<p><strong>问题一：时间问题</strong>，周二本是全校休息的一天，新生又没有开学，所以老师又很大可能不在学校，这个还不是很重要</p>
<p><strong>问题二：安排问题</strong>，由于疫情，现在进出校都需要申请离校码和进校码，这么码都需要填许多不重要的东西，浪费时间，本来我们可以在吃饭的时候就可以申请了，但大家都忘记这回事了，出了商场才记起来。当然这个也不是很重要</p>
<p><strong>问题三：购买礼物</strong>，这个花涉及到的问题就比较严重了，我们都知道花容易收到环境的影响，如果放的时间长了就很容易枯萎，所以在不了解老师状况的前提下，买了花，但他又不在实验室，这事就不太好处理了</p>
<p><strong>问题四：送礼对象</strong>，这是最致命的问题，对于送礼来说最需要考虑的就是送礼的对象是否有时间去收礼，如果他本人不在或外出，就很容易竹篮打水一场空了，尤其是送的礼物有很短的保质期的情况。</p>
<p>思考：对于这次买礼物，存在的诸多问题，以下做个反思，思考的是如果下次还出现这种事情应该如何更好的去处理。</p>
<p>首先针对第一个和第二个问题这，这两个只是比较基础的问题，但也涉及到许多细节方面的东西。在我们准备了要出校和进校买礼物就应该想到：</p>
<ul>
<li>出校进校需要考虑哪些东西<ul>
<li>比如买东西要不要带包方便点</li>
<li>比如现在疫情方面的，进校码和离校码这些</li>
</ul>
</li>
</ul>
<p>这些都是比较细节的</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>做事</tag>
        <tag>能力锻炼</tag>
      </tags>
  </entry>
  <entry>
    <title>故事大全</title>
    <url>/2022/08/31/%E6%95%85%E4%BA%8B%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>心理</tag>
        <tag>人际关系</tag>
      </tags>
  </entry>
  <entry>
    <title>经济学常识</title>
    <url>/2022/09/01/%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%B8%B8%E8%AF%86/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>货币作为社会文明逐渐发展的产物，为人们的交易带来了遍历，如原始社会的贝类，古代的铜币等等。</p>
<p>而货币之所以会存在，是因为原始时期的物物交换本身就有很大的弊端，比如一头羊换五条鱼，这一交换条件虽然可以在少数个体之间进行交换，但若是扩展到整个社会体系，我们不可能为了获得500条鱼而去带上100头羊，这并不便于双方之间的交易。</p>
<p>所以货币就作为商品交易的一般等价物而存在，但货币本身并不存在价值，它更多的可以理解为一种政府强权下的信用体系。有了货币，人们就可以方便的进行交易，而交易又是经济机器的最基本零件，同时交易的行为产生了不同的市场，市场是由买卖同一种商品的所有买房和买方组成，例如小麦市场、汽车市场、股票市场等等。市场中的商品价格的计算公式如下：</p>
<p>价格 = 支出总额 / 产销总量</p>
<p>经济动力 = 生产率提高 + 短期债务周期 + 长期债务周期</p>
<h1 id="二、交易"><a href="#二、交易" class="headerlink" title="二、交易"></a>二、交易</h1><p>交易无时无刻不在发生，交易也是经济发展的本质，它代表了无数交易的总和。当一个人开始消费来获取相应的服务或金融资产时，必将给另外一个人带来收入。现在来假定一个理想模型，我们对个体经济过程进行简单建模：</p>
<p>个体经济  = （收入，支出，生产率）</p>
<p>对于个体来说增加支出的方式是提高收入，而提高收入的方式则是要提高生产率，在这种情况下我们可以预料到支出的增加必然导致另一个人收入的增加，以此循环往复，经济实现了增长。</p>
<h1 id="三、市场"><a href="#三、市场" class="headerlink" title="三、市场"></a>三、市场</h1>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>经济</tag>
        <tag>股票</tag>
        <tag>货币</tag>
      </tags>
  </entry>
  <entry>
    <title>诗词韵律解析-用例篇</title>
    <url>/2022/09/02/%E8%AF%97%E8%AF%8D%E9%9F%B5%E5%BE%8B%E8%A7%A3%E6%9E%90-%E7%94%A8%E4%BE%8B%E7%AF%87/</url>
    <content><![CDATA[<h1 id="诗词百篇"><a href="#诗词百篇" class="headerlink" title="诗词百篇"></a>诗词百篇</h1><h2 id="一、唐诗"><a href="#一、唐诗" class="headerlink" title="一、唐诗"></a>一、唐诗</h2><h3 id="1-1-送杜少府之任蜀州（王勃）"><a href="#1-1-送杜少府之任蜀州（王勃）" class="headerlink" title="1.1 送杜少府之任蜀州（王勃）"></a>1.1 送杜少府之任蜀州（王勃）</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">城阙（què）辅三秦，风烟望五津。        平仄仄平平，平平仄仄平</span><br><span class="line">与（yǔ）君离别意，同是宦游人。         仄平平平仄，平仄仄平平</span><br><span class="line">海内存知己，天涯若比邻。              仄仄平平仄，平平仄仄平</span><br><span class="line">无为（wé<span class="selector-tag">i</span>）在歧（<span class="selector-tag">q</span>í）路，儿女共沾巾。  平平仄仄仄，平仄仄平平</span><br></pre></td></tr></table></figure>
<ul>
<li>之：到、往</li>
<li>蜀州：今四川崇州</li>
<li>城阙，即城楼，指唐代京师长安城</li>
<li>辅，护卫</li>
<li>城阙辅三秦：此句为倒装句，应是三秦辅城阙</li>
<li>君：对人的尊称，相当于“您”</li>
<li>宦（huàn）游：出外做官</li>
<li>海内：四海之内，即全国各地。古代人认为我国疆土四周环海，所以称天下为四海之内</li>
<li>天涯：天边，这里比喻极远的地方</li>
<li>无为：无须、不必</li>
<li>歧（qí）路：岔路。古人送行常在大路分岔处告别</li>
<li>儿女：指代男女之情</li>
<li>沾巾：泪沾手巾，形容落泪之多</li>
</ul>
<h2 id="二、宋词"><a href="#二、宋词" class="headerlink" title="二、宋词"></a>二、宋词</h2><h2 id="2-1-毛泽东"><a href="#2-1-毛泽东" class="headerlink" title="2.1 毛泽东"></a>2.1 毛泽东</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">《忆秦娥·娄山关》</span><br><span class="line">西风烈，长空雁叫霜晨月。</span><br><span class="line">霜晨月，马蹄声碎，喇叭声咽。</span><br><span class="line"></span><br><span class="line">雄关漫道真如铁，而今迈步从头越。</span><br><span class="line">从头越，苍山如海，残阳如血。</span><br></pre></td></tr></table></figure>
<ul>
<li>娄山关：遵义市之北，从四川入贵州的要道。</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">《沁园春 雪》</span><br><span class="line">北国风光，千里冰封，万里雪飘。</span><br><span class="line">望长城内外，惟余莽莽；大河上下，顿失滔滔。<span class="comment">(余 通：馀)</span></span><br><span class="line">山舞银蛇，原驰蜡象，欲与天公试比高。<span class="comment">(原驰 原作：原驱)</span></span><br><span class="line">须晴日，看红装素裹，分外妖娆。<span class="comment">(红装 一作：银装)</span></span><br><span class="line"></span><br><span class="line">江山如此多娇，引无数英雄竞折腰。</span><br><span class="line">惜秦皇汉武，略输文采；唐宗宋祖，稍逊风骚。</span><br><span class="line">一代天骄，成吉思汗，只识弯弓射大雕。</span><br><span class="line">俱往矣，数风流人物，还看今朝。</span><br></pre></td></tr></table></figure>
<ul>
<li>北国：该词源于中国古代的分裂时期，如宋称辽、金为北国，东晋称十六国等为北国，南北朝时代南方的各朝代称在北方与之对抗的各朝代为北国等。毛泽东诗中的“北国”使人在不觉中产生出一种我国疆土广大的民族自豪感。</li>
<li>雪：这首词作于红一方面军一九三六年二月由陕北准备东渡黄河进入山西省西部的时候。作者在一九四五年十月七日给柳亚子信中说，这首词作于“初到陕北看见大雪时”。</li>
<li>惟：只。</li>
<li>莽莽：无边无际。</li>
<li>俱往矣：都已经过去了。 俱，都。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">《沁园春 长沙》</span><br><span class="line">独立寒秋，湘江北去，橘子洲头。</span><br><span class="line">看万山红遍，层林尽染；漫江碧透，百舸争流。</span><br><span class="line">鹰击长空，鱼翔浅底，万类霜天竞自由。</span><br><span class="line">怅寥廓，问苍茫大地，谁主沉浮？</span><br><span class="line"></span><br><span class="line">携来百侣曾游。忆往昔峥嵘岁月稠。</span><br><span class="line">恰同学少年，风华正茂；书生意气，挥斥方遒。</span><br><span class="line">指点江山，激扬文字，粪土当年万户侯。</span><br><span class="line">曾记否，到中流击水，浪遏飞舟？</span><br></pre></td></tr></table></figure>
<ul>
<li>湘（xiāng）江：一名湘水，湖南省最大的河流，源出广西壮族自治区灵川县南的海洋山，长1752里，向东北流贯湖南省东部，经过长沙，北入洞庭湖。　所以说是湘江北去。</li>
<li>橘子洲：地名，又名水陆洲，是长沙城西湘江中一个狭长小岛，西面靠近岳麓山。南北长约11里，东西最宽处约一里。毛泽东七律《答友人》中所谓长岛，指此。自唐代以来，就是游览胜地。</li>
<li>漫江：满江。漫：满，遍。</li>
<li>舸（gě）：大船。这里泛指船只。</li>
<li>遏（è）：阻止</li>
</ul>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>中国诗词</category>
      </categories>
      <tags>
        <tag>唐诗宋词</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM基础大全-调优篇</title>
    <url>/2022/09/07/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E8%B0%83%E4%BC%98%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、JVM调优"><a href="#一、JVM调优" class="headerlink" title="一、JVM调优"></a>一、JVM调优</h1><p>性能调优包含多个方面：架构调优、代码调优、JVM调优、数据库调优、操作系统调优等。其中架构调优和代码调优是基础，架构的调优对系统影响最大。性能调优基本步骤：</p>
<ol>
<li>明确优化目标</li>
<li>发现性能瓶颈</li>
<li>性能调优</li>
<li>监控及数据统计</li>
<li>确认是否达到目标</li>
</ol>
<h2 id="1-1-调优时机"><a href="#1-1-调优时机" class="headerlink" title="1.1 调优时机"></a>1.1 调优时机</h2><ul>
<li>应用系统慢(响应性能下降，吞吐量下降)、卡顿(GC停顿时间长、次数频繁)</li>
<li>应用出现OOM等内存异常(使用的堆内存过大、本地缓存过大；会发生OOM的区域：堆、元空间、虚拟机栈、本地方法栈、直接内存)</li>
</ul>
<h2 id="1-2-调优原则"><a href="#1-2-调优原则" class="headerlink" title="1.2 调优原则"></a>1.2 调优原则</h2><p>JVM调优是一种手段，但并不一定所有问题都需要通过JVM调优解决，最有效的优化手段是架构和代码层面的优化。所以JVM优化是最后不得已的手段，在架构调优和代码调优后对服务器配置的最后一次”压榨”。</p>
<p><strong>所以JVM调优应遵守的原则：</strong></p>
<ul>
<li>上线之前应先将机器的JVM参数设置到最优；</li>
<li>大多数的Java应用不需要进行JVM优化；</li>
<li>大多数导致GC问题的原因是代码层面的问题导致的（代码层面）；</li>
<li>减少创建对象的数量、减少使用全局变量和大对象（代码层面）；</li>
<li>优先架构调优和代码调优，JVM优化是不得已的手段（代码、架构层面）；</li>
<li>分析GC情况优化代码比优化JVM参数更好（代码层面）；</li>
</ul>
<h2 id="1-3-调优目的"><a href="#1-3-调优目的" class="headerlink" title="1.3 调优目的"></a>1.3 调优目的</h2><ol>
<li>吞吐量：用户代码运行时间 / (用户代码运行时间 + GC时间)</li>
<li>响应时间：STW越短，响应时间越好</li>
</ol>
<h1 id="二、JVM命令参数"><a href="#二、JVM命令参数" class="headerlink" title="二、JVM命令参数"></a>二、JVM命令参数</h1><ul>
<li>标准参数：- 开头，所有的Hot Spot都支持；</li>
<li>非标准参数：-X 开头，特定版本的Hot Spot支持的特定命令；</li>
<li>不稳定参数：-XX 开头，下个版本可能取消；</li>
</ul>
<h2 id="2-1-常用参数"><a href="#2-1-常用参数" class="headerlink" title="2.1 常用参数"></a>2.1 常用参数</h2><ul>
<li>标准参数：- 开头，所有的Hot Spot都支持；</li>
<li>非标准参数：-X 开头，特定版本的Hot Spot支持的特定命令；</li>
<li>不稳定参数：-XX 开头，下个版本可能取消；</li>
</ul>
<p>输入：Java -XX:+PrintFlagsInitial 查看默认参数及值</p>
<p>输入：Java -XX:+PrintFlagsFinal 查看最终生效参数及值</p>
<p>输入：Java -XX:+PrintCommandLineFlags 查看启动时的命令行参数</p>
<h2 id="2-2-GC常用参数"><a href="#2-2-GC常用参数" class="headerlink" title="2.2 GC常用参数"></a>2.2 GC常用参数</h2><ul>
<li>-Xms：设置堆的初识内存大小，包含年轻代和老年代，JVM内存设置默认单位为Byte，也可以用k/K、m/M、g/G来声明其他单位。</li>
<li>-Xmx：设置堆的最大内存大小，-Xms和-Xmx一样时，可以避免内存不够时动态调整内存带来的内存波动</li>
<li>-Xmn：设置年轻代大小，包括Eden区和</li>
<li>-Xss：设置线程最大栈空间，JDK5以后每个线程堆栈大小为1M，直接决定了函数可调用的最大深度。在相同物理内存下，减小这个值能生成更多的线程，但一个进程内的线程是有限的，也不是越多效率越高，经验值在3000~5000左右。</li>
<li>-XX:MetaspaceSize：设置方法区（元空间）初始值，可动态扩展，如果没有设置元空间的上限那么他可以扩大到整个内存。64位的JVM元空间默认大小是21M，达到该值就会FGC，同时收集器会对该值进行调整，如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，提升该值，但最到不超过-XX:MaxMetaspaceSize设置的值。</li>
<li>-XX:MaxMetaspaceSize：设置方法区（元空间）最大值，如图默认为18446744073709547520接近无限大，也有说默认是-1，即不限制，受限于本地内存。8G内存的机器，初始和最大值一般都设置为256M或者512M。</li>
<li>-XX:+UseTLAB：打开本地线程分配缓存区(Thread Local Allocation Buffer)，用于线程上新对象的分配，默认是打开的</li>
<li>-XX:+PrintTLAB：打印TLAB的使用情况</li>
<li>-XX:TLABSize：设置TLAB的大小-XX:TLABSize=256k</li>
<li>-XX:+DisableExplictGC：屏蔽代码显示调用GC，如System.gc()</li>
<li>-XX:CompileThreshold：JIT热点代码编译的阀值</li>
<li>-XX:+PrintGC：打印简单的GC日志信息</li>
<li>-XX:+PrintGCDetails：打印详细的GC日志信息，不同垃圾回收器的GC信息格式不一样，同一垃圾回收器不同版本JDK也可能不一样</li>
<li>-XX:+PrintHeapAtGC：每次GC前/后堆内存的使用情况，已经FGC次数(full 0)</li>
<li>-XX:+PrintGCTimeStamps：打印进程启动到现在GC所运行的时间</li>
<li>-XX:+PrintGCApplicationConcurrentTime：打印上次GC后停顿到现在过去了多少时间，当GC后时间置为0</li>
<li>-XX:+PrintGCApplicationStoppedTime：打印GC时应用停顿的时间</li>
<li>-XX:+PrintReferenceGC：打印强、软、弱、虚引用各个引用的数量以及时长</li>
<li>-verbose:class：打印类加载情况</li>
<li>-XX:+PrintVMOptions</li>
<li>-XX:PreBlockSpin：设置锁自旋次数</li>
<li>-XX:+UseSerialGC：新生代使用Serial，老年代使用Serial Old；</li>
<li>-XX:+UseParallelGC/-XX:UseParallelOldGC：新生代使用Parallel Scavenge，老年代使用Parallel Old</li>
<li>-XX:+UseParNewGC：新生代使用ParNew，老年代自动使用Serial Old；</li>
<li>-XX:+UseConMarkSweepGC：新生代使用ParNew，老年代使用CMS + Serial Old；</li>
<li>-XX:+UseG1GC：使用G1；</li>
</ul>
<h2 id="2-3-Parallel常用参数"><a href="#2-3-Parallel常用参数" class="headerlink" title="2.3 Parallel常用参数"></a>2.3 Parallel常用参数</h2><p>Parallel GC是JVM中的并行垃圾收集器</p>
<ul>
<li>-XX:SurvivorRatio=n：设置年轻代中Eden区和Survivor的比例，为Eden: S0: S1 = n:1:1</li>
<li>-XX:NewRatio=n：设置年轻代（包括Eden和两个Survivor区）与年老代的比值（除去持久代）。设置为n，则年轻代与年老代的比值为1 : n；</li>
<li>-XX:PreTenureSizeThreshold：设置判定大对象的内存大小，大于该值直接进入老年代，只对Serial和ParNew两款新生代收集器有效</li>
<li>-XX:MaxTenuringThreshold：对象进入老年代的年龄，默认为15。设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。设置值大，可以让增加对象在年轻代的停留时间，增加对象在年轻代回收的概率。</li>
<li>-XX:ParallelGCThreads=n：配置并行收集器的垃圾收集线程数，即：同时多少个线程一起进行垃圾回收。</li>
<li>-XX:+UseAdaptiveSizePolicy：自动选择堆内各区大小的比例</li>
</ul>
<h2 id="2-4-CMS常用参数"><a href="#2-4-CMS常用参数" class="headerlink" title="2.4 CMS常用参数"></a>2.4 CMS常用参数</h2><ul>
<li>-XX:UseConcMarkSweepGC</li>
<li>-XX:ParallelCMSThreads：CMS线程数量</li>
<li>-XX:CMSInitiatingOccupancyFraction：老年代使用内存回收阈值，超过该阀值后开始CMS收集，默认是68%。</li>
<li>-XX:+UseCMSCompactAtFullCollection：在FGC时压缩整理内存</li>
<li>-XX:CMSFullGCsBeforeCompaction：多少次FGC之后进行压缩整理</li>
<li>-XX:+CMSClassUnloadingEnabled：使用CMS回收Perm区需要卸载的类</li>
<li>-XX:CMSInitiatingPermOccupancyFraction：达到什么比例时进行Perm回收</li>
<li>-XX:GCTimeRatio：设置GC时间占用程序运行时间的百分比，建议比例，CMS会根据这个值调整堆空间</li>
<li>-XX:MaxGCPauseMillis：GC停顿建议时间，GC会尝试各种手段达到这个时间，比如减少年轻代</li>
</ul>
<h2 id="2-5-G1常用参数"><a href="#2-5-G1常用参数" class="headerlink" title="2.5 G1常用参数"></a>2.5 G1常用参数</h2><ul>
<li>-XX:+UseG1GC：使用G1垃圾收集器</li>
<li>-XX:ParallelGCThreads：知道垃圾收集线程数</li>
<li>-XX:+G1HeapRegionSize：指定分区大小(1M~32M，必须是2的N次幂)，建议逐渐增大该值。随着size增加，垃圾存活时间更长，GC间隔更长，每次GC时间也会变长</li>
<li>-XX:MaxGCPauseMillis：最大GC停顿时间建议值，G1会尝试调整Young区的块数来达到这个值，</li>
<li>-XX:GCPauseIntervalMillis：GC的间隔时间</li>
<li>-XX:G1NewSizePercent：新生代初识内存空间比例，默认堆的5%</li>
<li>-XX:G1MaxNewSizePercent：新生代最大内存空间比例，默认60%</li>
<li>-XX:GCTimeRatio：设置GC时间占用程序运行时间的百分比，建议比例，G1会根据这个值调整堆空间</li>
<li>-XX:ConcGCThreads：并发线程数</li>
<li>-XX:InitiatingHeapOccupancyPercent：设置触发GC标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%</li>
</ul>
<h1 id="三、JVM调优工具"><a href="#三、JVM调优工具" class="headerlink" title="三、JVM调优工具"></a>三、JVM调优工具</h1><h2 id="3-1-软件工具"><a href="#3-1-软件工具" class="headerlink" title="3.1 软件工具"></a>3.1 软件工具</h2><ul>
<li>Jconsole</li>
<li>JVisualVM</li>
<li>Jprofiler</li>
<li>GCViewer</li>
<li>GC Easy</li>
<li>Java Flight Recorder</li>
</ul>
<h2 id="3-2-命令行工具"><a href="#3-2-命令行工具" class="headerlink" title="3.2 命令行工具"></a>3.2 命令行工具</h2><ul>
<li>top：linux命令，可以观察哪个进程PID和内存过高</li>
<li>jps [options] [hostid]<ul>
<li>jps -p：禁止输出main方法的类或者jar文件的名称和参数</li>
<li>jps -m：输出main方法的参数，JVM自带参数不会输出</li>
<li>jps -l：输出应用主类的完整包路径或者jar文件的全路径名称</li>
<li>jps -v：输出对象进程的JVM的参数</li>
</ul>
</li>
<li>jinfo [option] [pid]<ul>
<li>jinfo -flags pod：输出JVM的全部参数</li>
<li>jinfo -sysprops pid：输出系统的全部参数</li>
</ul>
</li>
<li>jstate [generalOption | outputOptions pid [interval[s|ms] [count]]]<ul>
<li>jstat -class：类加载行为的统计信息</li>
<li>jstat -compiler：即时编译热点行为的统计</li>
<li>jstat -gc：JVM中堆的垃圾收集情况的统计</li>
<li>jstat -gccapacity：显示各代的容量以及使用情况</li>
</ul>
</li>
<li>jstack [option] pid<ul>
<li>jstack pid：列出当前进程的各个线程信息</li>
<li>jstack pid &gt; /Users/shaotuo/threadDump.txt：生成Thread Dump文件</li>
</ul>
</li>
<li>jmap：列表指定java进程的堆内存信息，对象的统计信息、ClassLoader的信息，可以使用jmap生成Heap dump文件</li>
</ul>
<h1 id="四、相关问题"><a href="#四、相关问题" class="headerlink" title="四、相关问题"></a>四、相关问题</h1><h2 id="4-1-CPU占用高"><a href="#4-1-CPU占用高" class="headerlink" title="4.1 CPU占用高"></a>4.1 CPU占用高</h2><h2 id="4-2-OOM日志错误排查"><a href="#4-2-OOM日志错误排查" class="headerlink" title="4.2 OOM日志错误排查"></a>4.2 OOM日志错误排查</h2><ul>
<li>java.lang.OutOfMemoryError:…java heap space…<ul>
<li>堆栈溢出，代码问题可能性很大；</li>
<li>线程池运用不当OOM，不断往list加对象，导致回收不了；</li>
<li>重写finalize引发频繁GC：finalize方法内会拯救对象，导致对象不被回收；重写finalize但不拯救 ，也会将对象推到F-Queue队列，等待下次GC才回收；</li>
</ul>
</li>
<li>java.lang.OutOfMemoryError:GC over head limit exceeded<ul>
<li>系统处于高频GC状态，且回收效果作用不大；有可能内存不够导致，某引用使用不当，导致不能被回收</li>
</ul>
</li>
<li>java.lang.OutOfMemoryError: Direct buffer memory<ul>
<li>直接内存不够，JVM不会回收直接内存，查看是否是使用ByteBuffer.allocateDirect方法，没有clear导致；一般为使用NIO的问题</li>
</ul>
</li>
<li>java.lang.OutOfMemoryError: unable to create new native thread<ul>
<li>堆外内存不够，导致无法为线程分配内存</li>
</ul>
</li>
<li>java.lang.OutOfMemoryError: request {} byte for {} out of swap<ul>
<li>地址空间不够</li>
</ul>
</li>
<li>java.lang.StackOverflowError<ul>
<li>线程栈溢出，由-Xss控制线程栈大小，一般是代码里面循环调用的问题</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM调优</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM基础大全-垃圾回收篇</title>
    <url>/2022/09/19/JVM%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一、垃圾回收算法"><a href="#一、垃圾回收算法" class="headerlink" title="一、垃圾回收算法"></a>一、垃圾回收算法</h1><h2 id="1-1-标记清楚算法"><a href="#1-1-标记清楚算法" class="headerlink" title="1.1 标记清楚算法"></a>1.1 标记清楚算法</h2><ul>
<li>标记：遍历内存区域，对需要回收的对象打上标记</li>
<li><p>清除：再次遍历内存，对已经标记过的内存进行回收</p>
</li>
<li><p>缺点：</p>
<ul>
<li>效率问题；遍历了两次内存空间（第一次标记，第二次清除）</li>
<li>空间问题：容易产生大量内存碎片，当再需要一块比较大的内存时，无法找到一块满足要求的，因而不得不再次出发GC</li>
</ul>
</li>
</ul>
<h2 id="1-2-标记复制算法"><a href="#1-2-标记复制算法" class="headerlink" title="1.2 标记复制算法"></a>1.2 标记复制算法</h2><p>将内存划分为等大的两块，每次只使用其中的一块。当一块用完了，触发GC时，将该块中存活的对象复制到另一块区域，然后一次性清理掉这块没有用的内存。下次触发GC时将那块中存活的的又复制到这块，然后抹掉那块，循环往复。</p>
<ul>
<li>优点：<ul>
<li>相对于标记–清理算法解决了内存的碎片化问题</li>
<li>效率更高（清理内存时，记住首尾地址，一次性抹掉）</li>
</ul>
</li>
<li>缺点：<ul>
<li>内存利用率不高</li>
</ul>
</li>
</ul>
<p>改进：研究表明，新生代中的对象大都是“朝生夕死”的，即生命周期非常短而且对象活得越久则越难被回收。在发生GC时，需要回收的对象特别多，存活的特别少，因此需要搬移到另一块内存的对象非常少，所以不需要1：1划分内存空间。而是将整个新生代按照8 ： 1 ： 1的比例划分为三块，最大的称为Eden（伊甸园）区，较小的两块分别称为To Survivor和From Survivor。</p>
<p>首次GC时，只需要将Eden存活的对象复制到To。然后将Eden区整体回收。再次GC时，将Eden和To存活的复制到From，循环往复这个过程。这样每次新生代中可用的内存就占整个新生代的90%，大大提高了内存利用率。</p>
<p>但不能保证每次存活的对象就永远少于新生代整体的10%，此时复制过去是存不下的，因此这里会用到另一块内存，称为老年代，进行分配担保，将对象存储到老年代。若还不够，就会抛出OOM。</p>
<p>老年代：存放新生代中经过多次回收仍然存活的对象（默认15次）。</p>
<h2 id="1-3-标记整理（压缩）算法"><a href="#1-3-标记整理（压缩）算法" class="headerlink" title="1.3 标记整理（压缩）算法"></a>1.3 标记整理（压缩）算法</h2><p>因为前面的复制算法当对象的存活率比较高时，这样一直复制过来，复制过去，没啥意义，且浪费时间。所以针对老年代提出了“标记整理”算法。</p>
<ul>
<li>标记：对需要回收的进行标记</li>
<li>整理：让存活的对象，向内存的一端移动，然后直接清理掉没有用的内存。</li>
</ul>
<h2 id="1-4-分代收集算法"><a href="#1-4-分代收集算法" class="headerlink" title="1.4 分代收集算法"></a>1.4 分代收集算法</h2><p>当前大多商用虚拟机都采用这种分代收集算法，这个算法并没有新的内容，只是根据对象的存活的时间的长短，将内存分为了新生代和老年代，这样就可以针对不同的区域，采取对应的算法。如：</p>
<ul>
<li>新生代，每次都有大量对象死亡，有老年代作为内存担保，采取复制算法。</li>
<li>老年代，对象存活时间长，采用标记整理，或者标记清理算法都可。</li>
</ul>
<h1 id="二、垃圾收集器"><a href="#二、垃圾收集器" class="headerlink" title="二、垃圾收集器"></a>二、垃圾收集器</h1><h2 id="2-1-Serial和SerialOld"><a href="#2-1-Serial和SerialOld" class="headerlink" title="2.1 Serial和SerialOld"></a>2.1 Serial和SerialOld</h2><p>Serial是新生代，SerialOld是老年代的回收期，串行化执行，最简单的单线程的收集器，会STW。<br>CMS收集器如果空间不够无法进行FULL-GC，就会用SerialOld进行回收。<br>Serial使用标记复制，SerialOld使用标记整理算法</p>
<h2 id="2-2-Parallel-Scavenge收集器-Parallel-Old"><a href="#2-2-Parallel-Scavenge收集器-Parallel-Old" class="headerlink" title="2.2 Parallel Scavenge收集器 Parallel Old"></a>2.2 Parallel Scavenge收集器 Parallel Old</h2><p>使用多线程，其他的和Serial相同，关心吞吐量，会自动调整参数设置吞吐量的大小，停顿的时间，提供最优的吞吐量。JDK8默认的收集器<br>新生代采用复制算法，老年代使用标记整理算法。</p>
<h2 id="2-3-parNew收集器"><a href="#2-3-parNew收集器" class="headerlink" title="2.3 parNew收集器"></a>2.3 parNew收集器</h2><p>使用多线程，其他的和Serial相同。使用复制算法<br>新生代的收集器，可以搭配CMS收集器使用，</p>
<h2 id="2-4-CMS收集器"><a href="#2-4-CMS收集器" class="headerlink" title="2.4 CMS收集器"></a>2.4 CMS收集器</h2><p>为了提高用户的体验，提供最短的STW，并发收集，可以让垃圾回收线程和用户线程同时使用，标记清除算法，默认情况下是老年代内存达到92%会执行FullGC。<br>分为以下阶段：</p>
<ul>
<li>初始标记：会STW,但是速度非常快，标记GCROOT能引用的对象，可以用-XX:+CMSParallellnitialMarkEnabled参数开启多线程执行。</li>
<li>并发标记：根据GCROOT遍历所有对象，过程比较慢，不会STW，会和用户线程一起执行。</li>
<li>重新标记：因为并发标记中垃圾回收线程会和用户线程一同执行，可能会出现，被标记为垃圾对象的现在不是垃圾对象了会对产生变动的重新进行标记。会STW，比初始标记时间长，并发标记时间短。可以用 -XX:+CMSParallelRemarkEnabled 参数开启多线程重新标记。（存活的对象现在是垃圾对象，可达变不可达，是不会被重新标记的，这个是浮动垃圾）</li>
<li>并发清理：和用户线程一同执行，对未标记的对象清理，这个阶段如果有新添加的对象，会被标记为黑色。</li>
<li>并发重置：重置本次标记的对象，与用户线程一同运行。</li>
</ul>
<p>优点：并发执行，低停顿，用户体验较好</p>
<p>缺点：</p>
<ul>
<li>会产生浮动垃圾只能等待下一次回收</li>
<li>占用CPU资源</li>
<li>标记清除会产生空间碎片，可以通过开启参数，做完发FullGC自动整理碎片（ -XX:+UseCMSCompactAtFullCollection），可以通过参数设置多少次FullGC整理一次内存碎片（ -XX:CMSFullGCsBeforeCompaction）</li>
</ul>
<h2 id="2-5-G1收集器"><a href="#2-5-G1收集器" class="headerlink" title="2.5 G1收集器"></a>2.5 G1收集器</h2><p>G1收集器(Garbage-First Garbage Collector) 整堆收集。<br>G1收集器是一款在server端运行的垃圾收集器，专门针对于拥有多核处理器和大内存的机器，在JDK 7u4版本发行时被正式推出，在JDK9中更被指定为默认GC收集器。它满足高吞吐量的同时满足GC停顿的时间尽可能短。</p>
<ul>
<li>因为G1是一个并行/并发回收器，它把堆内存分割为很多不相关的区域（Region） （物理上 不连续的）。使用不同的Region来表示Eden、幸存者0（S0）区，幸存者（S1）1区，老年代等。</li>
<li>由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First） 。</li>
<li>G1 GC有计划地避免在整个Java 堆中进行全区域的垃圾收集。G1跟踪各个Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。</li>
<li>G1收集器使用的是 整体上使用标记整理 两个Region 之间 标记复制算法。</li>
</ul>
<h3 id="2-5-1-G1收集器分区划分"><a href="#2-5-1-G1收集器分区划分" class="headerlink" title="2.5.1 G1收集器分区划分"></a>2.5.1 G1收集器分区划分</h3><ol>
<li>使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB， 2MB， 4MB， 8MB， 1 6MB， 32MB。2048MB 每个独立区间1</li>
<li>可以通过-XXG1HeapRegionSize设定。所有的Region大小相同，且在JVM生命周期内不会被改变。</li>
<li>虽然还保留着新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region （不需要连续）的集合。通过Region的动态分配方式实现逻辑_上的连续。</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>GC算法</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud基础大全-服务注册中心</title>
    <url>/2022/07/25/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="一、Eureka"><a href="#一、Eureka" class="headerlink" title="一、Eureka"></a>一、Eureka</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>服务提供者越多就需要用到C/S架构来对服务消费者和服务提供者进行统一管理</p>
<p><strong>服务消费者</strong>：可以通过eureka注册中心获取到服务提供者的信息，经过负载均衡选择后即可进行远程调用</p>
<p><strong>服务注册中心</strong>：存放服务消费者和服务提供者的信息，并进行管理，注册中心也可以有多个</p>
<img src="/2022/07/25/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/eureka.png" class="" title="eureka">
<h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><h3 id="1-2-1-服务端"><a href="#1-2-1-服务端" class="headerlink" title="1.2.1 服务端"></a>1.2.1 服务端</h3><p>创建Maven项目作为Eureka服务注册中心（服务端），命名为cloud-eureka-server7001</p>
<p>pom文件依赖配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>yml配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>
<p>主启动类中需要添加EnableEurekaServer注解如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-客户端"><a href="#1-2-2-客户端" class="headerlink" title="1.2.2 客户端"></a>1.2.2 客户端</h3><p>客户端要做的就是将微服务注册进eureka中</p>
<p>以cloud-provider-payment8001工程为例，eureka依赖包导入如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>yml配置文件如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span>	<span class="comment">#注册进eureka的服务名称</span></span><br></pre></td></tr></table></figure>
<p>主启动类添加注解@EnableEurekaClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain8080.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些配置完成之后即可运行，并访问<a href="http://localhost:7001/，访问成功后就可以在页面中看到服务的注册信息">http://localhost:7001/，访问成功后就可以在页面中看到服务的注册信息</a></p>
<p>同理，其他服务的注册步骤也是一样的，导包-&gt;yml配置-&gt;主启动类注解</p>
<h2 id="1-3-Eureka集群构建"><a href="#1-3-Eureka集群构建" class="headerlink" title="1.3 Eureka集群构建"></a>1.3 Eureka集群构建</h2><p>如果Eureka注册中心只有一个，并且发生故障的话，会导致整个服务环境不可用，所以要构建Eureka集群</p>
<p>多个注册中心要满足规定：<strong>互相注册，相互守望</strong>。但对外是一个整体</p>
<p>注：负载均衡是<strong>对某一个微服务中的不同端口进行一种选择调用</strong>的机制，默认的是<strong>轮询</strong>，即在通过消费者端8080访问支付服务时会先访问某一端口，如8001，那么下次再进行访问时就会访问8002端口，依次循环下去</p>
<img src="/2022/07/25/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/jiqun.png" class="" title="jiqun">
<h3 id="1-3-1-注册中心集群构建"><a href="#1-3-1-注册中心集群构建" class="headerlink" title="1.3.1 注册中心集群构建"></a>1.3.1 注册中心集群构建</h3><ul>
<li>构建多个注册中心maven项目，取不同端口号，如7001、7002、7003</li>
<li>修改yml配置，满足<strong>互相注册，相互守望</strong>的规则</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span>	<span class="comment"># 端口号为7001的注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称，集群要保证每个注册中心名字不同</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 互相注册，注意下面的地址端口</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>同时微服务的yml配置也需要修改</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 多个注册中心地址都要写上</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-2-微服务集群构建"><a href="#1-3-2-微服务集群构建" class="headerlink" title="1.3.2 微服务集群构建"></a>1.3.2 微服务集群构建</h3><ul>
<li>构建多个相同模块的微服务项目，取不同的端口号，如8001、8002、8003</li>
<li>消费者端的RestTemplate服务调用地址修改为微服务的名称<ul>
<li>“<a href="http://CLOUD-PAYMENT-SERVICE">http://CLOUD-PAYMENT-SERVICE</a>“</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// private static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在消费者端的配置类中，为RestTemplate添加负载均衡注解@LoadBalanced</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">// 为服务调用提供负载均衡的能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试访问地址：<a href="http://localhost:8080/consumer/payment/get/1">http://localhost:8080/consumer/payment/get/1</a><ul>
<li>默认的负载均衡是轮询，即8001端口访问完一次后就访问8002端口，之后依次循环</li>
</ul>
</li>
</ul>
<h2 id="1-4-actuator微服务信息"><a href="#1-4-actuator微服务信息" class="headerlink" title="1.4 actuator微服务信息"></a>1.4 actuator微服务信息</h2><p>打开eureka注册中心后，可以看到微服务的链接状态，可以通过修改yml来对链接信息进行修改</p>
<img src="/2022/07/25/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/actuator.png" class="" title="actuator">
<p>修改微服务的yml配置，如8001的yml配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">	<span class="attr">instance:</span></span><br><span class="line">		<span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">		<span class="attr">prefer-ip-address:</span> <span class="literal">true</span>	<span class="comment"># 访问路径可以显示IP地址</span></span><br></pre></td></tr></table></figure>
<p>修改完成后，访问地址可以显示ip信息，显示效果如下：</p>
<img src="/2022/07/25/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/instance.png" class="" title="instance">
<h2 id="1-5-服务发现Discovery"><a href="#1-5-服务发现Discovery" class="headerlink" title="1.5 服务发现Discovery"></a>1.5 服务发现Discovery</h2><p>服务发现可以通过Discovery对象来获取微服务的信息，如微服务名称、访问地址、端口等</p>
<p>以8001为例，先修改其controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注入DiscoveryClient用于获取微服务信息，注意DiscoveryClient导入的是Spring的包</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ... </span></span><br><span class="line">	<span class="comment">// 微服务信息获取接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有微服务名称，并打印到终端</span></span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String service: services) &#123;</span><br><span class="line">            log.info(service);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取支付微服务的所有主机信息，并打印到终端</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance:instances) &#123;</span><br><span class="line">            log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*返回结果：</span></span><br><span class="line"><span class="comment">        &#123;&quot;services&quot;:[&quot;cloud-payment-service&quot;,&quot;cloud-order-service&quot;],&quot;order&quot;:0&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再修改8001的启动类，添加注解@EnableDiscoveryClient，开启服务发现功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-6-Eureka自我保护理论"><a href="#1-6-Eureka自我保护理论" class="headerlink" title="1.6 Eureka自我保护理论"></a>1.6 Eureka自我保护理论</h2><p>Eureka自我保护：一旦某个微服务不可用了，Eureka会启动保护机制，将该微服务信息保留一段时间，<strong>默认是开启的</strong>，注册中心会有以下提示信息：</p>
<img src="/2022/07/25/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/safe.png" class="" title="safe">
<p>可以通过修改注册中心，比如<strong>7001的yml配置</strong>关闭Eureka自我保护</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">	<span class="attr">server:</span></span><br><span class="line">		<span class="comment"># 关闭Eureka自我保护机制</span></span><br><span class="line">		<span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">		<span class="comment"># 让服务端每隔2秒扫描一次，是服务能尽快的剔除，单位为ms</span></span><br><span class="line">		<span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>
<p>除此之外，每个客户端微服务都会定时向服务端注册中心发送心跳，类似物业费的概念，即续费服务。服务发送心跳的时间间隔也可以通过服务的yml进行配置，以8001服务的yml配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">	<span class="attr">instance:</span></span><br><span class="line">		<span class="comment"># Eureka客户端向服务端发送心跳的时间间隔，单位为s（默认为30s）</span></span><br><span class="line">		<span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">		<span class="comment"># Eureka服务端在收到最后一次心跳后等待时间上限，单位为s（默认为90s），超时将剔除服务</span></span><br><span class="line">		<span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="1-7-注意"><a href="#1-7-注意" class="headerlink" title="1.7 注意"></a>1.7 注意</h2><ul>
<li>Eureka自发布2.x版本后就停止维护了</li>
<li>后面会进入到其它服务注册架构的学习</li>
</ul>
<h1 id="二、Zookeeper"><a href="#二、Zookeeper" class="headerlink" title="二、Zookeeper"></a>二、Zookeeper</h1><p>zookeeper需要先在Linux下进行安装，再在微服务中进行配置才能使用</p>
<h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><h3 id="2-1-1-单机版"><a href="#2-1-1-单机版" class="headerlink" title="2.1.1 单机版"></a>2.1.1 单机版</h3><ul>
<li><a href="https://downloads.apache.org/zookeeper/zookeeper-3.8.0/">zookeeper下载地址</a></li>
<li>通过tar命令解压后，需要做两件事情<ul>
<li>重命名文件夹为zk，进入conf文件夹，复制其中的zoo_sample.cfg为zoo_cfg</li>
<li>修改zoo.cfg中的数据文件夹地址，最后就可以进入zk/bin中启动zookeeper了</li>
</ul>
</li>
<li>zookeeper启动命令：./zkServer.sh start</li>
<li>zookeeper客户端启动命令：./zkCli.sh</li>
</ul>
<h3 id="2-1-2-集群版"><a href="#2-1-2-集群版" class="headerlink" title="2.1.2 集群版"></a>2.1.2 集群版</h3><h2 id="2-2-微服务构建"><a href="#2-2-微服务构建" class="headerlink" title="2.2 微服务构建"></a>2.2 微服务构建</h2><h3 id="2-2-1-服务提供者"><a href="#2-2-1-服务提供者" class="headerlink" title="2.2.1 服务提供者"></a>2.2.1 服务提供者</h3><ul>
<li>首先肯定需要创建maven工程，命名为cloud-provider-payment8004</li>
<li>接着就是配置yml，如下所示</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.41</span><span class="number">.199</span><span class="string">:2181</span> <span class="comment">#配置单机版的zookeeper服务器地址</span></span><br></pre></td></tr></table></figure>
<ul>
<li>然后就是pom文件的配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zookeeper依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>启动类注意添加@EnableDiscoveryClient注解</strong></li>
<li>最后就是创建类，一个启动类和一个controller分别用于启动和测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper：&quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后直接运行启动类，如果配置zookeeper的信息没有问题，就可以打开zookeeper客户端，输入<strong>ls /</strong>命令查看到对应的服务节点</li>
</ul>
<h3 id="2-2-2-临时与持久节点"><a href="#2-2-2-临时与持久节点" class="headerlink" title="2.2.2 临时与持久节点"></a>2.2.2 临时与持久节点</h3><h1 id="三、Consul"><a href="#三、Consul" class="headerlink" title="三、Consul"></a>三、Consul</h1><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><ul>
<li>Consul下载地址：<a href="https://www.consul.io/downloads">Consul官网下载</a></li>
<li>解压安装包后，直接可以通过cmd运行</li>
<li>开发模式启动：consul agent -dev</li>
<li>服务管理地址：localhost:8500</li>
</ul>
<h2 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h2><ul>
<li><p>和之前几个服务注册中心一样，新建一个maven模块cloud-providerconsul-payment</p>
</li>
<li><p>pom引入依赖</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>yml配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line">	<span class="attr">consul:</span></span><br><span class="line">		<span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">		<span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">		<span class="attr">discovery:</span></span><br><span class="line">			<span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-三个服务注册中心的区别"><a href="#3-3-三个服务注册中心的区别" class="headerlink" title="3.3 三个服务注册中心的区别"></a>3.3 三个服务注册中心的区别</h2><div class="table-container">
<table>
<thead>
<tr>
<th>组件名</th>
<th>语言</th>
<th>CAP</th>
<th>服务健康检查</th>
<th>对外暴露接口</th>
</tr>
</thead>
<tbody>
<tr>
<td>Eureka</td>
<td>Java</td>
<td>AP</td>
<td>可配支持</td>
<td>Http</td>
</tr>
<tr>
<td>Consul</td>
<td>Go</td>
<td>CP</td>
<td>支持</td>
<td>Http/DNS</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>Java</td>
<td>CP</td>
<td>支持</td>
<td>客户端</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>C：Consistency强一致性</li>
<li>A：Availability可用性</li>
<li>P：Partition tolerance分区容错性</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud基础大全-服务调用</title>
    <url>/2022/09/24/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="一、Ribbon"><a href="#一、Ribbon" class="headerlink" title="一、Ribbon"></a>一、Ribbon</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡工具</strong></p>
<p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer(简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则(如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。Ribbon目前进入维护模式</p>
<p>LB负载均衡（Load Balance）：将用户的请求平摊的分配到多个服务上，从而达到系统的<strong>高可用（HA）</strong></p>
<p>常见的负载均衡的软件有Nginx、LVS</p>
<p>Ribbon与Nginx的区别：</p>
<ul>
<li>Ribbon是<strong>本地负载均衡客户端</strong>，在调用服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术</li>
<li>Nginx是<strong>服务器负载均衡</strong>，客户端所有请求都会交给Nginx，然后由Nginx实现转发请求。即负载均衡是由服务端实现的</li>
</ul>
<p><strong>进程内LB</strong>：将LB逻辑集成到<strong>消费方</strong>，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。Ribbon就属于<strong>进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p>
<p><strong>Ribbon服务调用=负载均衡+RestTemplate调用</strong></p>
<h2 id="1-2-接口实现"><a href="#1-2-接口实现" class="headerlink" title="1.2 接口实现"></a>1.2 接口实现</h2><ul>
<li>eureka-client的依赖中已经包含了Ribbon </li>
<li>消费侧的Controller接口如下（使用RestTemplate的getForEntity方法）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/getForEntity/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    <span class="keyword">if</span>(entity.getStatusCode().is2xxSuccessful())&#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-3-Ribbon负载规则"><a href="#1-3-Ribbon负载规则" class="headerlink" title="1.3 Ribbon负载规则"></a>1.3 Ribbon负载规则</h2><img src="/2022/09/24/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/lb.png" class="" title="lb">
<ul>
<li>RoundRobinRule：轮询</li>
<li>RandomRule：随机</li>
<li>RetryRule：先按照RoundRobinRule的策略获取服务，若获取失败则在指定时间内进行重试，获取可用的服务</li>
<li>WeigbtedBesponseTimeBule：RoundBobinRule扩展，响应速度越快的实例选择权更越大，越容易被选择.</li>
<li>BestAvailableRule：会先过婆填臾于多次访问故赜呃处天断路嚣跳灵球态的服务、然反选择一个并发曩悬少鲍服务</li>
<li>AvailabilityFileteringRule：先过滤掉故障实例，在选择并发较小的实例</li>
<li>ZoneAvoidanceRule：默认规则，复合判断server所在区域的性能和server的可用性选择服务器</li>
</ul>
<h2 id="1-4-负载规则替换"><a href="#1-4-负载规则替换" class="headerlink" title="1.4 负载规则替换"></a>1.4 负载规则替换</h2><ul>
<li>原先的消费者端，其主启动类在com.atguigu.springcloud包下，而Ribbon修改负载规则要求不能放在同一个包下，所以需要在当前工程下创建一个新包com.atguigu.myrule，然后在创建自己的规则配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();	<span class="comment">// 定义为随机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置类创建完成后，还需要在项目的主启动类上添加注解进行配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplilcation</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient(name=&quot;CLOUD-PAYMNET-SERVICE&quot;,configuration=MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>替换完成以后，服务调用的效果就可以通过接口调用观察出来</li>
</ul>
<h2 id="1-5-算法原理"><a href="#1-5-算法原理" class="headerlink" title="1.5 算法原理"></a>1.5 算法原理</h2><p>轮询算法: rest接口第几次请求数%服务器集群总数量=实际调用服务器位置下标，每次服务重启动后rest接口计数从1开始。每次服务重启后会重新从1开始计算请求次数</p>
<h2 id="1-6-手写算法"><a href="#1-6-手写算法" class="headerlink" title="1.6 手写算法"></a>1.6 手写算法</h2><h1 id="二、OpenFeign"><a href="#二、OpenFeign" class="headerlink" title="二、OpenFeign"></a>二、OpenFeign</h1><h2 id="2-1-使用"><a href="#2-1-使用" class="headerlink" title="2.1 使用"></a>2.1 使用</h2><p>Feign是一个声明式的Web服务客户端，让编写Web服务客户端变得非常容易，只需要创建一个接口，并在接口上添加注解即可</p>
<p>首先还是老样子，新建一个maven工程cloud-consumer-feign-order80，然后配置service层和主启动类</p>
<ul>
<li>引入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加接口注解@FeignClient，接口中的方法对应了服务提供者的接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span>	<span class="comment">// value为微服务名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>；</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加著启动类注解@EnableFeignClients</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplilcation</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后Controller层调用接口方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;	<span class="comment">// 调用本项目的接口方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-超时控制"><a href="#2-2-超时控制" class="headerlink" title="2.2 超时控制"></a>2.2 超时控制</h2><p>消费者在访问服务提供者时，存在一个等待时间，OpenFeign默认等待1秒钟，超过后则报错，以下模拟超时情况，在服务提供者端添加一个请求超时接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);	<span class="comment">// 等待3秒</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在消费者端调用此接口时则会出现报错，可以在yml中配置Feign的超时时间</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置feign客户端超时时间（OpenFeign默认支持Ribbon）</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">	<span class="comment"># 指的是建立连接后所用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">	<span class="attr">ReadTimeout:</span> <span class="number">5000</span>	<span class="comment"># 单位ms</span></span><br><span class="line">	<span class="comment"># 指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">	<span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-日志功能"><a href="#2-3-日志功能" class="headerlink" title="2.3 日志功能"></a>2.3 日志功能</h2><p>OpenFeign提供了日志打印的功能</p>
<p>日志级别：</p>
<ul>
<li>NONE：默认的，不显示任何日志</li>
<li>BASIC：仅记录请求方法、URL、响应状态码及执行时间</li>
<li>HEADERS：除了BASIC中定义的信息外，还有请求和响应的头信息</li>
<li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据</li>
</ul>
<p>在消费者侧的config包下新建FeignConfig类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在yml中开启Feign日志功能</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">	<span class="attr">level:</span></span><br><span class="line">		<span class="comment"># feign日志以配置的日志级别监控哪个接口</span></span><br><span class="line">		<span class="attr">com.atguigu.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Ribbon</tag>
        <tag>OpenFeign</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试大全</title>
    <url>/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、变量自增"><a href="#一、变量自增" class="headerlink" title="一、变量自增"></a>一、变量自增</h1><h2 id="1-1-示例"><a href="#1-1-示例" class="headerlink" title="1.1 示例"></a>1.1 示例</h2><ul>
<li>这种计算跟之前数据结构和算法学过的计算器一致，都是要维护一个栈，保存操作数，判断加减乘除运算符，最后栈中经过计算后只剩下一个数，就是我们需要的运算结果</li>
<li>Java也需要维护一个操作数栈，来计算我们的最终结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">i = i++;</span><br><span class="line"><span class="keyword">int</span> j = i++;</span><br><span class="line"><span class="keyword">int</span> k = i + ++i * i++;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);<span class="number">5</span></span><br><span class="line">System.out.println(<span class="string">&quot;j=&quot;</span>+j);<span class="number">2</span></span><br><span class="line">System.out.println(<span class="string">&quot;k=&quot;</span>+k);<span class="number">12</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2 分析"></a>1.2 分析</h2><h3 id="1-2-1-前两步"><a href="#1-2-1-前两步" class="headerlink" title="1.2.1 前两步"></a>1.2.1 前两步</h3><ol>
<li>赋值操作更新局部变量表，变量操作会先将变量值压入操作数栈</li>
<li>自增操作会更新变量的局部变量表，但不会影响操作数栈的值，存在操作数就会把变量的值压入操作数栈中</li>
<li>赋值操作是把操作数栈的最终结果赋值给变量，也就是说i经过前两步后值为1</li>
</ol>
<img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/ij.png" class="" title="ij">
<h3 id="1-2-2-第三步"><a href="#1-2-2-第三步" class="headerlink" title="1.2.2 第三步"></a>1.2.2 第三步</h3><ul>
<li>后增操作：先赋值j，再自增i</li>
</ul>
<img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/ij2.png" class="" title="ij2">
<h3 id="1-2-3-第四步"><a href="#1-2-3-第四步" class="headerlink" title="1.2.3 第四步"></a>1.2.3 第四步</h3><img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/ij3.png" class="" title="ij3">
<h2 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h2><ul>
<li><p>总的来说在运算的时候维护一个<strong>局部变量表</strong>和一个<strong>操作数栈</strong>，来<strong>保存</strong>和<strong>更新</strong>我们的数据</p>
</li>
<li><p>++i会<strong>先修改i保存到局部变量表中的值</strong>，再将<strong>自增后</strong>的值放入到操作数栈中</p>
</li>
<li>i++与++i相反，会<strong>先将i的值放入到操作数栈中</strong>，而后再更新i的局部变量表</li>
<li>赋值操作是在操作数栈计算完之后才执行的</li>
</ul>
<h1 id="二、JDK-JRE-JVM的区别"><a href="#二、JDK-JRE-JVM的区别" class="headerlink" title="二、JDK/JRE/JVM的区别"></a>二、JDK/JRE/JVM的区别</h1><img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/KEM.png" class="" title="kem">
<ul>
<li>JDK：Java标准开发包，提供编译、运行Java程序所需的各种工具和资源，包括Java编译器、Java运行时环境，以及常用的Java类库等</li>
<li>JRE，Java运行环境，用于运行Java的字节码文件，JRE中包括了JVM工作所需要的类库，普通用户只需要按照JRE来运行Java程序，而程序开发者必须安装JDK来编译、调试程序</li>
<li>JVM：Java虚拟机，是JRE的一部分，它是整个Java实现跨平台的最核心的部分，负责运行字节码文件</li>
</ul>
<h1 id="三、Java数据类型"><a href="#三、Java数据类型" class="headerlink" title="三、Java数据类型"></a>三、Java数据类型</h1><p>基础数据类型</p>
<ul>
<li>整数类型（byte、short、int、long）</li>
<li>浮点类型（float、double）</li>
<li>数值型</li>
<li>字符型（char）</li>
<li>布尔型（boolean）</li>
</ul>
<p>引用数据类型</p>
<ul>
<li>类（class）</li>
<li>接口（interface）</li>
<li>数组（[]）</li>
</ul>
<img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/jichutype.png" class="" title="jichutype">
<h1 id="四、hashCode-与equals-之间的关系"><a href="#四、hashCode-与equals-之间的关系" class="headerlink" title="四、hashCode()与equals()之间的关系"></a>四、hashCode()与equals()之间的关系</h1><p>在了解hashCode()之前，首先要了解<strong>哈希表</strong>这种数据结构，这里假设存在一个哈希函数f(x)，那么它的映射关系是<strong>数据-&gt;存储地址</strong>，即对于一个数据x，它存放的地址为经过函数f(x)得到的地址。</p>
<p>但由于计算机的存储空间不是无限的，所以哈希地址的计算一般会出现重复的情况，这里可以采用<strong>链地址法</strong>，即如果两条数据计算到的哈希值相同，那么就在这个位置上创建一个<strong>链表</strong>来存放这两个相同哈希值的数据。</p>
<p>有了哈希表的概念，那么这里Java对象中的hashCode就是经过某一哈希函数得到的哈希值，在应用时参考以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Key</span> </span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Key</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public int hashCode() &#123;</span></span><br><span class="line"><span class="comment">//        return id.hashCode();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">//        if(obj == null || !(obj instanceof Key))</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        else</span></span><br><span class="line"><span class="comment">//            return this.getId().equals(((Key) obj).getId());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Key k1 = <span class="keyword">new</span> Key(<span class="number">1</span>);</span><br><span class="line">        Key k2 = <span class="keyword">new</span> Key(<span class="number">1</span>);</span><br><span class="line">        HashMap&lt;Key,String&gt; hm = <span class="keyword">new</span> HashMap&lt;Key, String&gt;();</span><br><span class="line"></span><br><span class="line">        hm.put(k1,<span class="string">&quot;Key with id is 1&quot;</span>);</span><br><span class="line">        System.out.println(hm.get(k2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码测试了使用<strong>相同id值的对象</strong>在HashMap中进行查找（工作会经常使用到的操作），测试结果如下：</p>
<ul>
<li>不重写hashCode()和equals()方法，结果输出”null“</li>
<li>重写hashCode()但不重写equals()，结果仍输出“null”</li>
<li>同时重写hashCode()和equals()方法，输出结果”Key with id is 1“，内容可以正常查询到</li>
</ul>
<p>对以上三种测试情况有以下说明：</p>
<ul>
<li>集合类HashMap在进行对象查找（get()方法）时，会先根据对象的hashCode进行查找，<ul>
<li>如果两个对象的hashCode不同，则说明两个对象绝对是不同的；</li>
<li>如果两个对象的hashCode相同，则调用对象的equals()方法继续进行比较，比较内容相同则两个对象一定是相同的</li>
</ul>
</li>
<li>如果不重写hashCode()和equals()方法，那么对象会采用<strong>Object父类</strong>实现的默认的hashCode()和equals()方法，默认的hashCode是<strong>对象的内存地址</strong>，默认equals()的比较方式也是比较<strong>两个对象的内存地址</strong>是否相同</li>
</ul>
<p>在使用时一般会遵循以下原则：</p>
<ul>
<li>重写equals()方法必须重写hashCode()方法</li>
<li>两对象equals()相等，则这两个对象的hashCode()应该相等</li>
<li>hashCode()和equals()的返回值应该是稳定的，不应具有随机性</li>
<li>如果要在HashMap的”键“部分存放自定义的对象，一定要在这个对象里重写equals和hashCode方法</li>
</ul>
<p>在面试时会经常问到比如：</p>
<ul>
<li>有没有重写过hashCode方法</li>
<li>在使用HashMap时有没有重写hashCode和equals方法，怎么写的</li>
</ul>
<h1 id="五、-与equals的区别"><a href="#五、-与equals的区别" class="headerlink" title="五、==与equals的区别"></a>五、==与equals的区别</h1><p>参考第三题，equals()方法在不重写的情况下，<strong>默认</strong>比较的是两个<strong>对象的内存地址</strong>，但我们往往会在类中重写equals()来<strong>比较对象之间的内容是否相等</strong>，<strong>equals()只能被对象调用</strong>。</p>
<p>==是Java中的一种操作符，它有两种比较方式</p>
<ul>
<li>对于基础数据类型来说，==判断的是两边的值是否相等</li>
<li>对于引用类型来说，==判断的是两边的引用是否相等，也就是判断两个对象是否指向了同一块内存区域</li>
</ul>
<p>equals()方法的特性</p>
<ul>
<li><strong>自反性</strong>：对于任何非空引用值x来说，x.equals(x)返回true</li>
<li><strong>对称性</strong>：对于任何非空引用值x、y来说，如果x.equals(y)为true，则y.equals(x)为true</li>
<li><strong>传递性</strong>：对于任何非空引用值x、y、z来说，如果x.equals(y)为true，y.equals(z)为true，那么x.equals(z)也为true</li>
<li><strong>一致性</strong>：对于任何非空引用值x、y来说，如果x.equals(y)为true，那么它们要始终相等</li>
<li><strong>非空性</strong>：对于任何非空引用值x来说，x.equals(null)必须返回false</li>
</ul>
<h1 id="六、String中的equals是如何重写的"><a href="#六、String中的equals是如何重写的" class="headerlink" title="六、String中的equals是如何重写的"></a>六、String中的equals是如何重写的</h1><p>String是Java中的字符串类，它整个类都是被final修饰的，这意味着String类是不能被任何类继承，任何修改String字符串的方法都是创建了一个新的字符串</p>
<p>equals方法是Object类定义的方法，Object是所有类的父类，当然也包括String，String重写的equals方法如下</p>
<img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/sequals.png" class="" title="sequals">
<ul>
<li>首先是引用的判断，引用相等则直接返回true</li>
<li>接着判断对象是否是String实例，不是则直接返回false，否则将对象强转后，比较字符串的长度，长度不等肯定返回false</li>
<li>长度相等的情况下，再逐个字符进行比较，存在不同的字符则返回false</li>
</ul>
<img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/sequals1.png" class="" title="sequals1">
<p>注意JDK1.8以后，new String(“abc”)操作和普通的字符串赋值操作作用是一样的，以下的intern()方法是获取常量池中的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String s2 = <span class="string">&quot;a&quot;</span> + <span class="keyword">new</span> String(<span class="string">&quot;bc&quot;</span>);</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.intern());	<span class="comment">//abc</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 以下输出均为true</span></span><br><span class="line">        System.out.println(s2.equals(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        System.out.println(s3.equals(s1));</span><br><span class="line">        System.out.println(s1.intern().equals(s2));</span><br><span class="line">        System.out.println(s3.intern().equals(s1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="七、String-s1-new-String-“abc”-在内存中创建了几个对象"><a href="#七、String-s1-new-String-“abc”-在内存中创建了几个对象" class="headerlink" title="七、String s1 = new String(“abc”)在内存中创建了几个对象"></a>七、String s1 = new String(“abc”)在内存中创建了几个对象</h1><p>一个或者两个，首先new操作一定会在堆中创建一个对象，如果常量池中不存在“abc”对象，那么就会在常量池中创建一个“abc”，否则就不进行创建</p>
<p>观察下面String构造器的源码可以发现，String对象的hash值和常量池“abc”对象的hash值是一致的</p>
<img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/string1.png" class="" title="string1">
<p>new操作的内存情况如下：</p>
<img src="/2022/04/03/Java%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/stringneicun.png" class="" title="stringneicun">
<h1 id="八、String为什么是不可变的、jdk源码中的String如何定义的、为什么这么设计"><a href="#八、String为什么是不可变的、jdk源码中的String如何定义的、为什么这么设计" class="headerlink" title="八、String为什么是不可变的、jdk源码中的String如何定义的、为什么这么设计"></a>八、String为什么是不可变的、jdk源码中的String如何定义的、为什么这么设计</h1><p>不可变对象：不可变对象就是一经创建后，其对象的内部状态不能被修改，即：</p>
<ul>
<li>不可变对象内部属性都是final的</li>
<li>不可变对象的内部属性都是private的</li>
<li>不可变对象不能提供任何可以修改内部状态的方法，setter方法也不行</li>
<li>不可变对象不能被继承和扩展</li>
</ul>
<p>String类是一种对象，它独立于Java基本数据类型而存在的，可以理解为字符串的集合</p>
<p>String被设计为final的，表示String对象一经创建后，它的值就不能再被修改了，任何对String值进行修改的方法就是重新创建一个字符串</p>
<p>String对象创建后会存在于运行时常量池中，运行时常量池属于方法区的一部分，JDK1.7后把它移到了堆中</p>
<h1 id="九、String-StringBuffer-StringBuilder的区别"><a href="#九、String-StringBuffer-StringBuilder的区别" class="headerlink" title="九、String/StringBuffer/StringBuilder的区别"></a>九、String/StringBuffer/StringBuilder的区别</h1><p>String类型是不可变的，属于字符串常量</p>
<p>StringBuffer和StringBuilder都是可修改的字符串对象，区别是StringBuffer是线程安全的，StringBuilder是线程不安全的</p>
<h1 id="十、static关键字是干什么用的"><a href="#十、static关键字是干什么用的" class="headerlink" title="十、static关键字是干什么用的"></a>十、static关键字是干什么用的</h1><ul>
<li>修饰变量，static修饰的变量称为<strong>静态变量</strong>、也称为<strong>类变量</strong>，类变量属于类所有，对于不同的类来说，static变量只有一份，static修饰的变量位于<strong>方法区</strong>；static修饰的变量能够直接通过<strong>类名.变量名</strong>来进行访问，不用通过实例化类再进行使用</li>
<li>修饰方法，static修饰的方法称为<strong>静态方法</strong>，静态方法能够直接通过<strong>类名.方法名</strong>来使用，在静态方法内部不能使用非静态属性和方法</li>
<li><p>static可以修饰代码块，主要分为两种，一种直接定义在类中，使用<strong>static{}</strong>，这种被称为静态代码块，一种是在类中定义<strong>静态内部类</strong>，使用<strong>static class xxx</strong>来进行定义</p>
</li>
<li><p>static可用用于静态导包，通过使用import static xxx来实现，这种方式一般不推荐使用</p>
</li>
<li>static可以和单例模式一起使用，通过双重检查锁来实现线程安全的单例模式</li>
</ul>
<h1 id="十一、final关键字是干什么用的"><a href="#十一、final关键字是干什么用的" class="headerlink" title="十一、final关键字是干什么用的"></a>十一、final关键字是干什么用的</h1><p>final 是 Java 中的关键字，它表示的意思是 <code>不可变的</code>，在 Java 中，final 主要用来</p>
<ul>
<li>修饰类，final 修饰的类不能被继承，不能被继承的意思就是不能使用 <code>extends</code> 来继承被 final 修饰的类。</li>
<li>修饰变量，final 修饰的变量不能被改写，不能被改写的意思有两种，对于基本数据类型来说，final 修饰的<strong>变量</strong>，其<strong>值不能被改变</strong>，final 修饰的<strong>对象</strong>，<strong>对象的引用不能被改变</strong>，但是对象内部的<strong>属性可以被修改</strong>。final 修饰的变量在某种程度上起到了<code>不可变</code>的效果，所以，可以用来保护只读数据，尤其是在并发编程中，因为明确的不能再为 final 变量进行赋值，有利于减少额外的同步开销</li>
<li>修饰方法，final 修饰的方法不能被重写</li>
<li>final 修饰符和 Java 程序性能优化没有必然联系</li>
</ul>
<h1 id="十二、抽象类和接口的区别是什么"><a href="#十二、抽象类和接口的区别是什么" class="headerlink" title="十二、抽象类和接口的区别是什么"></a>十二、抽象类和接口的区别是什么</h1><p>抽象类abstract和接口interface都是Java中的关键字，</p>
<p>抽象类和接口的相同点：</p>
<ul>
<li>都允许进行方法的定义，而不用具体的方法实现</li>
<li>都允许被继承</li>
<li>广泛的应用于 JDK 和框架的源码中，来实现多态和不同的设计模式。</li>
</ul>
<p>抽象类和接口的不同点：</p>
<ul>
<li>抽象级别不同：类、抽象类、接口其实是三种不同的抽象级别，抽象程度依次是 <strong>接口 &gt; 抽象类 &gt; 类</strong>。在接口中，只允许进行方法的定义，不允许有方法的实现，抽象类中可以进行方法的定义和实现；而类中只允许进行方法的实现</li>
<li>使用的关键字不同：类使用 <code>class</code> 来表示；抽象类使用 <code>abstract class</code> 来表示；接口使用 <code>interface</code> 来表示</li>
<li>变量：接口中定义的变量只能是公共的静态常量，抽象类中的变量是普通变量。</li>
</ul>
<h1 id="十三、重写和重载的区别"><a href="#十三、重写和重载的区别" class="headerlink" title="十三、重写和重载的区别"></a>十三、重写和重载的区别</h1><ul>
<li>重写是针对子类和父类的表现形式，而重载是在同一类中的不同表现形式</li>
<li>子类重写父类的方法一般使用@override来表示，重写后的方法其方法的声明和参数类型、顺序必须要和父类完全一致</li>
<li>重载是针对同一类中概念，它要求重载的方法必须满足下面任何一个要求：方法参数的顺序、参数的个数、参数的类型任意一个保持不同即可</li>
</ul>
<h1 id="十四、byte的取值范围"><a href="#十四、byte的取值范围" class="headerlink" title="十四、byte的取值范围"></a>十四、byte的取值范围</h1><p>Java的Byte的取值范围为（-128，127），占用一个字节，即8bit</p>
<p>Java中使用补码来表示二进制数，因此最高位为符号位，最高位为0表示正数，最高为为1表示负数</p>
<p>先来复习下源码、反码、补码</p>
<p>原码：正常的二进制计算，存在符号位，0表示正数，最高为为1表示负数</p>
<p>反码：正数的反码与其原码相同；负数在原码基础上，按位取反，符号位除外</p>
<p>补码：正数的补码与其原码相同；负数的补码是在其反码的末位+1</p>
<p>byte中，正数的最大值就是0111 1111</p>
<p>因为存在符号位，所以存在两个0，即-0：1000 0000和+0：0000 0000，因此用1000 0000来表示负数的最小值，即-128</p>
<p>1000 0000减1后为0111 1111，再取反1000 0000，原码的值128，在负数中就应该为-128</p>
<h1 id="十五、HashMap和HashTable的区别"><a href="#十五、HashMap和HashTable的区别" class="headerlink" title="十五、HashMap和HashTable的区别"></a>十五、HashMap和HashTable的区别</h1><p>不同点：</p>
<ul>
<li>父类不同：HashMap继承了AbstractMap类，而HashTable继承了Dictionary类</li>
<li><p>空值不同：HashMap允许空的key和value值，HashTable不允许空的key和value值。HashMap会把Null key当做普通的key对待，且不允许null key重复。HashTable存null的key就会报空指针异常</p>
</li>
<li><p>线程安全性：HashMap是线程不安全的，如果多个外部操作同时修改HashMap的数据结构比如add或者是delete，必须进行同步操作，即仅仅对key或者value的修改不是改变数据结构的操作</p>
</li>
<li>性能方面：虽然HashMap和HashTable都是基于单链表的，但是HashMap进行put或者get操作，可以达到常数时间的性能；而HashTable的put和get操作都是加了synchronized，所以效率很差</li>
<li>初始容量不同：HashTable的初始长度是11，之后每次扩充容量变为之前的2n+1（n为上一次的长度）而HashMap的初始长度为16，之后每次扩充变为原来的两倍。创建时，如果给定了容量初始值，那么HashTable会直接使用你给定的大小，而HashMap会将其扩充为2的幂次方大小</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式-设计原则</title>
    <url>/2022/03/27/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="一、设计模式基础"><a href="#一、设计模式基础" class="headerlink" title="一、设计模式基础"></a>一、设计模式基础</h1><h2 id="1-1-GoF的23种设计模式及其功能"><a href="#1-1-GoF的23种设计模式及其功能" class="headerlink" title="1.1 GoF的23种设计模式及其功能"></a>1.1 GoF的23种设计模式及其功能</h2><ol>
<li>单例（ Singleton ）模式 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li>
<li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例</li>
<li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生存什么产品</li>
<li>抽象工厂（Abstract Factory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品</li>
<li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们</li>
<li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性</li>
<li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能在一起工作的那些类能一起工作</li>
<li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化，它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li>
<li>装饰（Decorator）模式：：动态的给对象增加一些职责，即增加其额外的功能</li>
<li>外观（ Facade ）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问</li>
<li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用</li>
<li>组合（ Composite ）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性</li>
<li>模板方法（ Templat Method ）模式：定义一个操作中的算法骨架 ，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</li>
<li>策略（ Strategy ）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户</li>
<li>命令（ Command ）模式：将一个请求封装为一个对象 ，使发出请求的责任和执行请求的责任分割开</li>
<li>职责链 （Chain of Responsibility ）模式：把请求从链中的一个对象传到下一个对象 ，直到请求被响应为止。通过这种方式去除对象之间的耦合</li>
<li>状态（ State ）模式：允许一个对象在其内部状态发生改变时改变其行为能力</li>
<li>观察者（ Observer 模式：多个对象间存在－对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为</li>
<li>中介者（ Mediator ）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解</li>
<li>迭代器 Iterator ）模式 提供一种方法来顺序访问聚合对象中的一系列数据 ，而不暴露聚合对象的内部表示</li>
<li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合种的每个元素提供多种访问方式，即每个元素有多个访问者对象访问</li>
<li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态以便以后恢复它</li>
<li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器</li>
</ol>
<h1 id="二、面向对象的设计原则"><a href="#二、面向对象的设计原则" class="headerlink" title="二、面向对象的设计原则"></a>二、面向对象的设计原则</h1><h2 id="2-1-开闭原则OCP"><a href="#2-1-开闭原则OCP" class="headerlink" title="2.1 开闭原则OCP"></a>2.1 开闭原则OCP</h2><ul>
<li>对扩展开放、对修改关闭</li>
<li>通过“抽象约束、封装变化”来实现开闭原则</li>
<li>抽象层设计的合理，可以基本保持软件架构的稳定</li>
<li>当软件需求发生变化时，只需要根据需求派生一个实现类来扩展就可以了</li>
</ul>
<h2 id="2-2-里氏替换原则LSP"><a href="#2-2-里氏替换原则LSP" class="headerlink" title="2.2 里氏替换原则LSP"></a>2.2 里氏替换原则LSP</h2><ul>
<li>子类可以扩展父类的功能，但不能改变父类原有的功能</li>
<li>简单来说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</li>
<li>作用：实现开闭原则的重要方式之一、提高父类可复用性、降低类的扩展出错的可能性</li>
<li>如果出现因重写父类方法而导致出错的情况，应该设计个更一般的类，重新组织类的继承关系</li>
</ul>
<h2 id="2-3-依赖倒置原则DIP"><a href="#2-3-依赖倒置原则DIP" class="headerlink" title="2.3 依赖倒置原则DIP"></a>2.3 依赖倒置原则DIP</h2><ul>
<li>要面向接口编程，不要面向实现编程</li>
<li>抽象层相对稳定，实现类较为多变</li>
<li>接口/抽象类的目的是制定好规范和契约，不去涉及任何具体的操作</li>
<li>具体细节的任务交给实现类完成</li>
<li>作用：降低了类间的耦合性、提高系统的稳定性、提高代码可读性和可维护性</li>
</ul>
<h3 id="2-3-1-实现方法"><a href="#2-3-1-实现方法" class="headerlink" title="2.3.1 实现方法"></a>2.3.1 实现方法</h3><ol>
<li>每个类尽量提供接口或抽象类，或者两者都具备</li>
<li>变量的声明类型尽量是接口或者是抽象类</li>
<li>任何类都不应该从具体类派生</li>
<li>使用继承时尽量遵循里氏替换原则</li>
</ol>
<h2 id="2-4-单一职责原则SRP"><a href="#2-4-单一职责原则SRP" class="headerlink" title="2.4 单一职责原则SRP"></a>2.4 单一职责原则SRP</h2><ul>
<li>一个类应该有且仅有一个引起它变化的原因，否则应该被拆分</li>
<li>承担太多职责的缺点：削弱类实现其他职责的能力、冗余代码</li>
<li>作用：降低类的复杂度、提高类的可读性、提高系统可维护性、变更引起的风险降低</li>
<li>实现方法：分析、设计、重构</li>
<li>同样适用于方法，方法应尽可能做好一件事情</li>
</ul>
<h2 id="2-5-接口隔离原则ISP"><a href="#2-5-接口隔离原则ISP" class="headerlink" title="2.5 接口隔离原则ISP"></a>2.5 接口隔离原则ISP</h2><ul>
<li>程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法</li>
<li>要为类建立它们需要的专用接口，而不要视图去建立一个很庞大的接口供所有依赖它的类去调用</li>
<li>作用：提高系统灵活性和可维护性、降低系统耦合性、提高系统内聚性、接口粒度大小要定义合理（太大太小都不好）、减少代码冗余、能够体现对象的层次<br>实现方法：一个接口只服务于一个子模块或业务逻辑、为依赖接口的类定制服务、深入了解环境/业务逻辑、使接口用最少的方法实现最多的事情</li>
</ul>
<h2 id="2-6-迪米特法则LKP"><a href="#2-6-迪米特法则LKP" class="headerlink" title="2.6 迪米特法则LKP"></a>2.6 迪米特法则LKP</h2><ul>
<li>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用</li>
<li>作用：降低类间耦合度、提高模块相对独立性、提高类的可复用性和系统的扩展性</li>
<li>过渡使用LKP会使系统产生大量的中介类，从而增加系统的复杂性，所以使用时要权衡好</li>
<li>实现方法：依赖者应该依赖应该依赖的对象、被依赖者只暴露应该暴露的方法</li>
<li>注意：应创建弱耦合的类、降低类成员的访问权限、优先考虑设计不变类、降低引用次数、不暴露属性成员（提供get和set）、进行使用序列化</li>
</ul>
<h2 id="2-7-合成复用原则CRP"><a href="#2-7-合成复用原则CRP" class="headerlink" title="2.7 合成复用原则CRP"></a>2.7 合成复用原则CRP</h2><ul>
<li>又称组合/聚合复用原则（CARP）</li>
<li>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</li>
<li>如果要使用继承关系，则必须严格遵循里氏代换原则</li>
<li>合成复用原则和里氏代换原则都是开闭原则的具体实现规范</li>
<li>类的复用包括：继承复用、合成复用</li>
</ul>
<h3 id="2-7-1-继承复用"><a href="#2-7-1-继承复用" class="headerlink" title="2.7.1 继承复用"></a>2.7.1 继承复用</h3><ul>
<li>破坏了类的封装性，父类暴露给子类</li>
<li>子类与父类耦合度高</li>
<li>限制了复用的灵活性，父类继承而来的实现是静态的，在编译时已经定义、所以在运行时不可能发生变化</li>
</ul>
<h3 id="2-7-2-合成复用"><a href="#2-7-2-合成复用" class="headerlink" title="2.7.2 合成复用"></a>2.7.2 合成复用</h3><ul>
<li>维持了类的封装性</li>
<li>新旧类之间的耦合度低</li>
<li>复用的灵活性高，可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>设计模式</tag>
        <tag>编程艺术</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring面试大全</title>
    <url>/2022/09/25/Spring%E9%9D%A2%E8%AF%95%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、Spring设计模式"><a href="#一、Spring设计模式" class="headerlink" title="一、Spring设计模式"></a>一、Spring设计模式</h1><h2 id="1-1-简单工厂模式"><a href="#1-1-简单工厂模式" class="headerlink" title="1.1 简单工厂模式"></a>1.1 简单工厂模式</h2><p>Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建这个要根据具体情况来定。</p>
<h2 id="1-2-工厂模式"><a href="#1-2-工厂模式" class="headerlink" title="1.2 工厂模式"></a>1.2 工厂模式</h2><p> 实质： 实现了FactoryBean接口的bean是一类叫做factory的bean 。</p>
<p> 实现方式： FactoryBean</p>
<p> 实现原理：因为实现了FactoryBean接口，所以返回的不是SqlSessionFactoryBean的实例，而是它的 SqlSessionFactoryBean.getObject()的返回值。</p>
<h2 id="1-3-单例模式"><a href="#1-3-单例模式" class="headerlink" title="1.3 单例模式"></a>1.3 单例模式</h2><p> 实质：保证一个类仅有一个实例，并提供一个访问它的全局访问点 (多线程访问，加锁 syncronized)</p>
<p>Spring的依赖注入（包括lazy-init方式）都是发生在AbstractBeanFactory的getBean里。getBean的doGetBean方法调用getSingleton进行bean的创建。</p>
<h2 id="1-4-适配器模式"><a href="#1-4-适配器模式" class="headerlink" title="1.4 适配器模式"></a>1.4 适配器模式</h2><p> 实现场景：SpringMVC中的适配器HandlerAdatper</p>
<p> 实现原理：HandlerAdatper根据Handler规则执行不同的Handler</p>
<h2 id="1-5-装饰器模式"><a href="#1-5-装饰器模式" class="headerlink" title="1.5 装饰器模式"></a>1.5 装饰器模式</h2><p>实现方式：Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。</p>
<h2 id="1-6-代理模式"><a href="#1-6-代理模式" class="headerlink" title="1.6 代理模式"></a>1.6 代理模式</h2><p>实现方式：AOP底层，就是动态代理模式的实现。</p>
<p>Spring的Proxy模式在aop中有体现，比如JdkDynamicAopProxy和Cglib2AopProxy。</p>
<h2 id="1-7-观察者模式"><a href="#1-7-观察者模式" class="headerlink" title="1.7 观察者模式"></a>1.7 观察者模式</h2><p>Spring中Observer模式常用的地方是listener的实现。如ApplicationListener。</p>
<h2 id="1-8-策略模式"><a href="#1-8-策略模式" class="headerlink" title="1.8 策略模式"></a>1.8 策略模式</h2><p>在SimpleInstantiationStrategy中有如下代码说明了策略模式的使用情况：</p>
<h2 id="1-9-模板模式"><a href="#1-9-模板模式" class="headerlink" title="1.9 模板模式"></a>1.9 模板模式</h2><p> 实质：是模板方法模式和回调模式的结合，是Template Method不需要继承的另一种实现方式。Spring几乎所有的外接扩展都采用这种模式。</p>
<p>Template Method模式一般是需要继承的。这里想要探讨另一种对Template Method的理解。Spring中的JdbcTemplate，在用这个类时并不想去继承这个类，因为这个类的方法太多，但是我们还是想用到JdbcTemplate已有的稳定的、公用的数据库连接，那么我们怎么办呢？我们可以把变化的东西抽出来作为一个参数传入JdbcTemplate的方法中。但是变化的东西是一段代码，而且这段代码会用到JdbcTemplate中的变量。怎么办？那我们就用回调对象吧。在这个回调对象中定义一个操纵JdbcTemplate中变量的方法，我们去实现这个方法，就把变化的东西集中到这里了。然后我们再传入这个回调对象到JdbcTemplate，从而完成了调用。这可能是Template Method不需要继承的另一种实现方式吧。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>Spring源码</tag>
      </tags>
  </entry>
  <entry>
    <title>C语法基础大全</title>
    <url>/2022/09/02/C%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h1><h2 id="1-1-简单示例"><a href="#1-1-简单示例" class="headerlink" title="1.1 简单示例"></a>1.1 简单示例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!strs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = strs[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> count = strs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; count; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == strs[j].<span class="built_in">size</span>() || strs[j][i] != c) &#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-指针"><a href="#1-2-指针" class="headerlink" title="1.2 指针"></a>1.2 指针</h2><h3 id="1-2-1-原理"><a href="#1-2-1-原理" class="headerlink" title="1.2.1 原理"></a>1.2.1 原理</h3><p>指针地址的原理如下：</p>
<img src="/2022/09/02/C%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/pointer.png" class="" title="pointer">
<h3 id="1-2-2-指针与数组的关系"><a href="#1-2-2-指针与数组的关系" class="headerlink" title="1.2.2 指针与数组的关系"></a>1.2.2 指针与数组的关系</h3><p><strong>指针与一维数组的关系：</strong></p>
<img src="/2022/09/02/C%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/arr.png" class="" title="arr">
<p><strong>指针与二维数组的关系：</strong></p>
<img src="/2022/09/02/C%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/2arr.png" class="" title="arr">
<h3 id="1-2-3-注意事项"><a href="#1-2-3-注意事项" class="headerlink" title="1.2.3 注意事项"></a>1.2.3 注意事项</h3><ul>
<li>a与&amp;a[0]等价</li>
<li>a[0]与*a、&amp;a[0][0]等价</li>
<li>pa指向地址array[0][0]</li>
<li>(pa+i)地址指向array[i][0]</li>
<li>(*(pa+i)+j)地址指向array[i][j]</li>
<li>二维数组的一维访问形式a[i][j]=*(a[0]+n*i+j)=*(*a+n*i+j)</li>
</ul>
<h2 id="1-3-字符串"><a href="#1-3-字符串" class="headerlink" title="1.3 字符串"></a>1.3 字符串</h2><p>在C/C++中的字符串均以char[]类型进行存储，char是一个字符类型 C++的内置类型，C/C++中的string实为一个类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// char数组初始化、修改与输出</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">*(a+<span class="number">1</span>) = <span class="string">&#x27;b&#x27;</span>;	<span class="comment">// 由于指针和数组等价，所有可以通过指针修改数组内容</span></span><br><span class="line">cout &lt;&lt; *(a+<span class="number">1</span>);	<span class="comment">// 输出数组的第1个字符2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str1 = <span class="string">&quot;abcde&quot;</span>;	<span class="comment">// 只读常量</span></span><br><span class="line">str1 = <span class="string">&quot;efghi&quot;</span>;	<span class="comment">// 目前来开是可以修改的，应该是修改了指针的指向，跟这个&quot;abcde&quot;常量无关</span></span><br><span class="line">cout &lt;&lt; str1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印输出string字符容器</span></span><br><span class="line"><span class="function">string <span class="title">a</span><span class="params">(<span class="string">&quot;abc&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure>
<h2 id="1-4-容器"><a href="#1-4-容器" class="headerlink" title="1.4 容器"></a>1.4 容器</h2><h3 id="1-4-1-容器分类"><a href="#1-4-1-容器分类" class="headerlink" title="1.4.1 容器分类"></a>1.4.1 容器分类</h3><p>序列式容器：</p>
<ul>
<li>序列式容器：每个元素都有固定位置－－取决于插入时机和地点，和元素值无关</li>
<li>Vector：将元素置于一个动态数组中加以管理，可以随机存取元素（用索引直接存取），数组尾部添加或移除元素非常快速。但是在中部或头部安插元素比较费时</li>
<li>Deque：是“double-ended queue”的缩写，可以随机存取元素（用索引直接存取），数组头部和尾部添加或移除元素都非常快速。但是在中部或头部安插元素比较费时</li>
<li>List：双向链表，不提供随机存取（按顺序走到需存取的元素，O(n)），在任何位置上执行插入或删除动作都非常迅速，内部只需调整一下指针</li>
</ul>
<p>关联式容器：</p>
<ul>
<li>关联式容器：元素位置取决于特定的排序准则，和插入顺序无关</li>
<li>Set/Multiset：内部的元素依据其值自动排序，Set内的相同数值的元素只能出现一次，Multisets内可包含多个数值相同的元素，内部由二叉树实现，便于查找；<ul>
<li>unordered_map</li>
</ul>
</li>
<li>Map/Multimap：Map的元素是成对的键值/实值，内部的元素依据其值自动排序，Map内的相同数值的元素只能出现一次，Multimaps内可包含多个数值相同的元素，内部由二叉树实现，便于查找<ul>
<li>unordered_map</li>
</ul>
</li>
</ul>
<p>其他结构容器：</p>
<ul>
<li>priority_queue：维护一个堆结构</li>
<li>stack：维护一个栈</li>
</ul>
<h2 id="1-5-函数"><a href="#1-5-函数" class="headerlink" title="1.5 函数"></a>1.5 函数</h2><h1 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a>二、面向对象</h1><h2 id="2-1、面向对象的特性"><a href="#2-1、面向对象的特性" class="headerlink" title="2.1、面向对象的特性"></a>2.1、面向对象的特性</h2><h3 id="2-1-1-封装"><a href="#2-1-1-封装" class="headerlink" title="2.1.1 封装"></a>2.1.1 封装</h3><ul>
<li>封装就是将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体，也就是将数据与操作数据的函数代码进行有机的结合，形成“类”，其中的数据和函数都是类的成员</li>
</ul>
<h3 id="2-1-2-继承"><a href="#2-1-2-继承" class="headerlink" title="2.1.2 继承"></a>2.1.2 继承</h3><ul>
<li>根据现实中的事物之间的关系，抽象出了继承的概念</li>
<li>C++语言中提供了类的继承机制，允许程序员在保持原有类特性的基础上，进行更具体、更详细的说明</li>
</ul>
<h3 id="2-1-3-多态"><a href="#2-1-3-多态" class="headerlink" title="2.1.3 多态"></a>2.1.3 多态</h3><ul>
<li>多态性是指程序能够处理多种类型对象的能力</li>
</ul>
<h2 id="2-2、类"><a href="#2-2、类" class="headerlink" title="2.2、类"></a>2.2、类</h2><h3 id="2-2-1-类的定义"><a href="#2-2-1-类的定义" class="headerlink" title="2.2.1 类的定义"></a>2.2.1 类的定义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">int</span> newH,<span class="keyword">int</span> newM,<span class="keyword">int</span> newS)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> hour,minute,second;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-类的成员函数"><a href="#2-2-2-类的成员函数" class="headerlink" title="2.2.2 类的成员函数"></a>2.2.2 类的成员函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类外实现</span><br><span class="line">返回值类型  类名::函数成员名(参数表)</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-3-类的访问控制权限"><a href="#2-2-3-类的访问控制权限" class="headerlink" title="2.2.3 类的访问控制权限"></a>2.2.3 类的访问控制权限</h3><h4 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h4><div class="table-container">
<table>
<thead>
<tr>
<th>访问权限</th>
<th>类内成员函数</th>
<th>类对象</th>
<th>友元函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>protected</td>
<td>YES</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr>
<td>private</td>
<td>YES</td>
<td>NO</td>
<td>YES</td>
</tr>
</tbody>
</table>
</div>
<h4 id="继承的权限变化"><a href="#继承的权限变化" class="headerlink" title="继承的权限变化"></a>继承的权限变化</h4><div class="table-container">
<table>
<thead>
<tr>
<th>基类权限</th>
<th>public继承</th>
<th>protected继承</th>
<th>private继承</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>public</td>
<td>protected</td>
<td>private</td>
</tr>
<tr>
<td>protected</td>
<td>protected</td>
<td>protected</td>
<td>private</td>
</tr>
<tr>
<td>private</td>
<td>不可访问</td>
<td>不可访问</td>
<td>不可访问</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2-2-4-构造函数"><a href="#2-2-4-构造函数" class="headerlink" title="2.2.4 构造函数"></a>2.2.4 构造函数</h3><ul>
<li>构造函数的作用是在对象被创建时利用特定的值构造对象，将对象初始化为一个特定的状态</li>
<li>构造函数在对象被创建的时候被自动调用</li>
<li>构造函数的调用顺序：基类构造函数-&gt;对象成员构造函数-&gt;派生类本身的构造函数  </li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Clock</span>()&#123;&#125;   <span class="comment">//无参构造</span></span><br><span class="line">        <span class="built_in">Clock</span>(<span class="keyword">int</span> newH,<span class="keyword">int</span> newM,<span class="keyword">int</span> newS);  <span class="comment">//带参数的构造函数</span></span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        <span class="comment">//Clock(int newH,int newM,int newS):hour(newH),minute(newM),second(newS)&#123;&#125;</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">int</span> newH,<span class="keyword">int</span> newM,<span class="keyword">int</span> newS)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> hour,minute,second;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Clock::<span class="built_in">Clock</span>(<span class="keyword">int</span> newH,<span class="keyword">int</span> newM,<span class="keyword">int</span> newS)&#123;</span><br><span class="line">    hour = newH;</span><br><span class="line">    minute = newM;</span><br><span class="line">    second = newS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-5-拷贝构造函数"><a href="#2-2-5-拷贝构造函数" class="headerlink" title="2.2.5 拷贝构造函数"></a>2.2.5 拷贝构造函数</h3><ul>
<li>拷贝构造函数是一种特殊的构造函数，它在创建对象时，使用同一类中之前创建的对象来初始化新创建的对象，拷贝构造函数通常的步骤：<ul>
<li>通过使用另一个同类型的对象来初始化新创建的对象。</li>
<li>复制对象把它作为参数传递给函数</li>
<li>复制对象，并从函数返回这个对象</li>
</ul>
</li>
</ul>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul>
<li>如果在类中没有定义拷贝构造函数，编译器会自行定义一个。如果类带有指针变量，并有动态内存分配，则它必须有一个拷贝构造函数。拷贝构造函数的最常见形式如下</li>
<li>在这里，obj 是一个对象引用，该对象是用于初始化另一个对象的<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">classname</span> (<span class="keyword">const</span> classname &amp;obj) &#123;</span><br><span class="line">   <span class="comment">// 构造函数的主体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-2-6-析构函数"><a href="#2-2-6-析构函数" class="headerlink" title="2.2.6 析构函数"></a>2.2.6 析构函数</h3><ul>
<li>析构函数用来完成对象被删除前的一些清理工作</li>
<li>析构函数是在对象的生产期即将结束的时刻被自动调用的</li>
<li>析构函数的调用顺序：派生类本身的析构函数-&gt;对象成员析构函数-&gt;基类析构函数（与构造顺序正好相反） </li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Clock</span>();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">int</span> newH,<span class="keyword">int</span> newM,<span class="keyword">int</span> newS)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">        ~<span class="built_in">Clock</span>()&#123;&#125;          <span class="comment">// 析构函数</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> hour,minute,second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-7-类的继承"><a href="#2-2-7-类的继承" class="headerlink" title="2.2.7 类的继承"></a>2.2.7 类的继承</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 基类1&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 基类2&#123;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 派生类:</span>继承方式 基类<span class="number">1</span>,继承方式 基类<span class="number">2</span>&#123;</span><br><span class="line">    构造函数(参数列表)&#123;</span><br><span class="line">        基类<span class="number">1</span>构造函数(参数);</span><br><span class="line">        基类<span class="number">2</span>构造函数(参数);</span><br><span class="line">        派生类</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 基类 Shape</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         width = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         height = h;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">protected</span>:</span><br><span class="line">      <span class="keyword">int</span> width;</span><br><span class="line">      <span class="keyword">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 基类 PaintCost</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaintCost</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getCost</span><span class="params">(<span class="keyword">int</span> area)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> area * <span class="number">70</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span> <span class="keyword">public</span> Shape, <span class="keyword">public</span> PaintCost</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123; </span><br><span class="line">         <span class="keyword">return</span> (width * height); </span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Rectangle Rect;</span><br><span class="line">   <span class="keyword">int</span> area;</span><br><span class="line"> </span><br><span class="line">   Rect.<span class="built_in">setWidth</span>(<span class="number">5</span>);</span><br><span class="line">   Rect.<span class="built_in">setHeight</span>(<span class="number">7</span>);</span><br><span class="line"> </span><br><span class="line">   area = Rect.<span class="built_in">getArea</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 输出对象的面积</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total area: &quot;</span> &lt;&lt; Rect.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出总花费</span></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Total paint cost: $&quot;</span> &lt;&lt; Rect.<span class="built_in">getCost</span>(area) &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Total area: 35</span></span><br><span class="line"><span class="comment">//Total paint cost: $2450</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>unreal</category>
      </categories>
      <tags>
        <tag>游戏开发</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>日语进阶大全-动词</title>
    <url>/2022/09/26/%E6%97%A5%E8%AF%AD%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%8A%A8%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="一、动词"><a href="#一、动词" class="headerlink" title="一、动词"></a>一、动词</h1><h2 id="1-1-结构"><a href="#1-1-结构" class="headerlink" title="1.1 结构"></a>1.1 结构</h2><ul>
<li>体言：包括名词、代词、数词（一般指没有变形的词语）</li>
<li><p>用言：用来叙述事物的动作，作用，存在，性质，状态等，可以作为独立的谓语，词尾是有活用的。（即有变形的词）</p>
</li>
<li><p>动词构成：动词=词干+词尾</p>
<ul>
<li>洗（あら）う　書（か）く　泳（およ）ぐ　話（はな）す　立（た）つ　死（し）ぬ　叫（さけ）ぶ　読（よ）む　終（お）わる　始（はじ）まる</li>
</ul>
</li>
<li>动词的分类：五段动词、一段动词、サ变动词、カ变动词</li>
<li><p>动词活用：<strong>用言词尾</strong>的变化，以便连接后项补助成分。动词、形容词、形容动词都可发生相应的应用。因为在日语中动词本身是无法表达“正在”、“不在”这种对动作状态的描述，因此需要在动词上添加补助的成分来表示否定或者其他的状态</p>
<ul>
<li>書<strong>く</strong>　＋　ない　===&gt;　書<strong>か</strong>ない（不写）</li>
<li>書<strong>く</strong>　＋　ている　===&gt;　書<strong>い</strong>ている（正在写）</li>
</ul>
</li>
<li><p>活用形：用言词尾变化之后的形式，活用形没有实际含义，需配合后项补助成分使用，比如：書<strong>く</strong>==&gt;書<strong>か</strong></p>
</li>
<li>活用形的类型：未然形、连体形、连用形、假定形、终止形等</li>
<li>动词具体含义：活用形+补助成分</li>
</ul>
<h2 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h2><ul>
<li>未然形：用于动词的否定的情况。“动词未然形+否定助动词ない、ぬ（ん）”构成了动词的否定形。</li>
<li>连用形：动词在表示主体的行为、动作或状态时，经常是只用一个词就说不清楚，必须连接其他用言和助词、助动词等来达到充分说明主体的目的。连用形主要用于这种情况。</li>
<li>仮定形：表示假定条件和构成惯用形。除个别词以外，不能单独使用，后接接续助词ば</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>基本形</th>
<th>未然形+ない</th>
<th>连用形＋ます</th>
<th>仮定形＋ば／れば</th>
</tr>
</thead>
<tbody>
<tr>
<td>五段动词</td>
<td>書く</td>
<td>書か＋ない</td>
<td>書き＋ます</td>
<td>書け＋ば</td>
</tr>
<tr>
<td></td>
<td>読む</td>
<td>読ま＋ない</td>
<td>読み＋ます</td>
<td>読め＋ば</td>
</tr>
<tr>
<td>一段动词</td>
<td>食（た）べる</td>
<td>食べ＋ない</td>
<td>食べ＋ます</td>
<td>食べ＋れば</td>
</tr>
<tr>
<td></td>
<td>起（お）きる</td>
<td>起き＋ない</td>
<td>起き＋ます</td>
<td>起き＋れば</td>
</tr>
<tr>
<td>サ变动词</td>
<td>する</td>
<td>し＋ない</td>
<td>し＋ます</td>
<td>す＋れば</td>
</tr>
<tr>
<td></td>
<td>勉強（べんきょ）する</td>
<td>勉強し＋ない</td>
<td>勉強し＋ます</td>
<td>勉強す＋れば</td>
</tr>
<tr>
<td>カ变动词</td>
<td>来（く）る</td>
<td>来（こ）＋ない</td>
<td>来（き）＋ます</td>
<td>来（く）＋れば</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-3-判断"><a href="#1-3-判断" class="headerlink" title="1.3 判断"></a>1.3 判断</h2><ul>
<li>カ变动词：<strong>来（く）る</strong>，只有这一个</li>
<li>サ变动词：<strong>する</strong>及以<strong>する为词尾</strong>的动词<ul>
<li>如：勉強する　買い物（かいもの）する　出席(<strong>しゅっせき</strong>)</li>
</ul>
</li>
<li>一段动词：词语最后假名为<strong>る</strong>；る前假名<strong>为い、え段</strong>假名<ul>
<li>如：見（み）せる　始（はじ）める　起（お）きる　借（か）りる</li>
<li>26个特殊的“一段动词”：帰（かえ）る　嘲（あざけ）る　焦（あせ）る　入（はい）る；虽然这些满足一段动词的格式，但是这些都是按照五段动词来使用的</li>
</ul>
</li>
<li>五段动词：<ul>
<li>词语最后假名为非る的う段假名：洗（あら）う　書（か）く　泳（およ）ぐ　話（はな）す　立（た）つ　死（し）ぬ　叫（さけ）ぶ　読（よ）む</li>
<li>词尾为る，る前假名为あ、う、お段假名：始まる　終（お）わる　売（う）る　怒（おこる）る</li>
<li>26个特殊的“一段动词”：帰（かえ）る　嘲（あざけ）る　焦（あせ）る　入（はい）る；</li>
</ul>
</li>
</ul>
<h1 id="二、ます的使用方式"><a href="#二、ます的使用方式" class="headerlink" title="二、ます的使用方式"></a>二、ます的使用方式</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>动词基本形作谓语，表示经常性、习惯性、将来性、真理性</p>
<ul>
<li><p>私たちは　毎日学校（がっこう）へ　行く（我每天都去学校）</p>
</li>
<li><p>明日（あした）、王（わん）さんは六時（ろくじ）に　起（お）きる（小王明天六点起床）</p>
</li>
<li><p>地球（ちきゅう）は　太陽（たいよ）を　回（まわ）る（地球围绕太阳旋转）</p>
</li>
</ul>
<p>ます：敬体助动词，表示对他人的尊重。接于动词连接形之后</p>
<ul>
<li><p>私たちは　毎日学校（がっこう）へ　行きます【<strong>行く＝＝＞行きます</strong>】（我每天都去学校）</p>
</li>
<li><p>明日（あした）、王（わん）さんは六時（ろくじ）に　起（お）きます【<strong>起きる＝＝＞起きます</strong>】（小王明天六点起床）</p>
</li>
<li><p>地球（ちきゅう）は　太陽（たいよ）を　回（まわ）ります【<strong>回る＝＝＞回ります</strong>】（地球围绕太阳旋转）</p>
</li>
</ul>
<h2 id="2-2-动词连用形的变化方法"><a href="#2-2-动词连用形的变化方法" class="headerlink" title="2.2 动词连用形的变化方法"></a>2.2 动词连用形的变化方法</h2><ul>
<li>五段动词：将词尾<strong>う段假名</strong>变为其所在行上い段假名<ul>
<li>洗う＝＝＞洗い　話（はな）す＝＝＞話（はな）し　立（た）つ＝＝＞立（た）ち　終（お）わる＝＝＞終（お）わり</li>
</ul>
</li>
<li>一段动词：将词尾<strong>る</strong>去掉<ul>
<li>始（はじ）める＝＝＞始（はじ）め　見（み）せる＝＝＞見（み）せ　落（お）ちる＝＝＞落（お）ち</li>
</ul>
</li>
<li>サ变动词：する＝＝＞し<ul>
<li>食事（しょくじ）する＝＝＞食事（しょくじ）し</li>
</ul>
</li>
<li>カ变动词：来（く）る＝＝＞来（き）</li>
</ul>
<h1 id="三、叙述句"><a href="#三、叙述句" class="headerlink" title="三、叙述句"></a>三、叙述句</h1><p>叙述句（动词谓语句）一般用来表示经常性、将来性、真理性的动作</p>
<ul>
<li>Aは　～ます：A 要做什么</li>
<li>Aは　～ません：A 不要做什么</li>
</ul>
<h1 id="四、自动词-他动词"><a href="#四、自动词-他动词" class="headerlink" title="四、自动词/他动词"></a>四、自动词/他动词</h1><ul>
<li><p>自动词：不需要宾语便可以完整表达含义，多用来表示事物的状态或变化</p>
<ul>
<li>动作性自动词</li>
<li>状态性自动词</li>
</ul>
</li>
<li><p>他动词：需要宾语帮助完成含义的具体表达</p>
<ul>
<li>を：格助词，对他动词的宾语进行提示</li>
<li>动宾关系：宾语+を+他动词</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>语言</category>
      </categories>
      <tags>
        <tag>动词</tag>
        <tag>日语时态</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础大全</title>
    <url>/2022/02/23/Spring%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><ul>
<li>轻量级的开源JavaEE框架</li>
<li>IOC：控制反转，把创建对象过程交给Spring进行管理</li>
<li>Aop：面向切面，不修改源代码进行功能增强</li>
</ul>

<h1 id="二、IOC容器"><a href="#二、IOC容器" class="headerlink" title="二、IOC容器"></a>二、IOC容器</h1><h2 id="2-1-IOC底层原理"><a href="#2-1-IOC底层原理" class="headerlink" title="2.1 IOC底层原理"></a>2.1 IOC底层原理</h2><ul>
<li>XML解析、工厂模式、反射</li>
</ul>
<h2 id="2-2-IOC容器实现方式"><a href="#2-2-IOC容器实现方式" class="headerlink" title="2.2 IOC容器实现方式"></a>2.2 IOC容器实现方式</h2><h3 id="2-2-1-两个接口"><a href="#2-2-1-两个接口" class="headerlink" title="2.2.1 两个接口"></a>2.2.1 两个接口</h3><ul>
<li>BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员使用</li>
<li>ApplicationContext：BeanFactory的子接口，提供更多更强大的功能，一般由开发人员进行使用<ul>
<li>ApplicationContext实现类：FileSystemApplicationContext/ClassPathXmlApplicationContext</li>
</ul>
</li>
</ul>
<h2 id="2-3-Bean管理"><a href="#2-3-Bean管理" class="headerlink" title="2.3 Bean管理"></a>2.3 Bean管理</h2><h3 id="2-3-1-两个操作"><a href="#2-3-1-两个操作" class="headerlink" title="2.3.1 两个操作"></a>2.3.1 两个操作</h3><ul>
<li>Spring创建对象</li>
<li>Spring注入属性</li>
</ul>
<h3 id="2-3-2-操作Bean管理对象（基础操作-基于XML）"><a href="#2-3-2-操作Bean管理对象（基础操作-基于XML）" class="headerlink" title="2.3.2 操作Bean管理对象（基础操作/基于XML）"></a>2.3.2 操作Bean管理对象（基础操作/基于XML）</h3><h4 id="（1）创建-获取对象"><a href="#（1）创建-获取对象" class="headerlink" title="（1）创建/获取对象"></a>（1）创建/获取对象</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在Spring配置文件中，使用bean标签，标签里面加对应属性，就可以实现对象创建</li>
<li>bean标签属性<ul>
<li>id：唯一标识，不可以加特殊符号</li>
<li>class：类全路径（包类路径）</li>
</ul>
</li>
<li>创建对象时候，默认也是执行无参数构造方法完成对象创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取XML文件名获取应用上下文</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据bean的name属性获取到对象</span></span><br><span class="line">User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象方法</span></span><br><span class="line">user.add();</span><br></pre></td></tr></table></figure>
<h4 id="（2）注入属性"><a href="#（2）注入属性" class="headerlink" title="（2）注入属性"></a>（2）注入属性</h4><ul>
<li>DI：依赖注入，就是注入对象属性值</li>
</ul>
<h4 id="（3）注入方式"><a href="#（3）注入方式" class="headerlink" title="（3）注入方式"></a>（3）注入方式</h4><ul>
<li>第一种：使用set方法进行注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 采用set方法进行属性注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname=bname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bauthor=bauthor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	使用property完成属性注入</span></span><br><span class="line"><span class="comment">		name：类里面属性名称</span></span><br><span class="line"><span class="comment">		value：向属性注入的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;活着&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二种：使用有参数构造进行注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参数构造进行属性注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname,String address)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	使用constructor-arg完成有参数构造注入</span></span><br><span class="line"><span class="comment">		name：类里面属性名称</span></span><br><span class="line"><span class="comment">		value：向属性注入的值</span></span><br><span class="line"><span class="comment">		index：类中属性的下标，如下里&quot;0&quot;表示oname，&quot;1&quot;表示address</span></span><br><span class="line"><span class="comment">	如果不在bean中添加属性注入标签，则表示默认按照无参构造方式注入对象</span></span><br><span class="line"><span class="comment">	所以如果不在类中显式的定义无参构造，则xml文件会报错，报错内容为bean中的class</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蛋炒饭&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;东华&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;constructor-arg index=&quot;1&quot; value=&quot;东华&quot;&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第三种：p名称空间注入（了解）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	在beans标签中添加p名称空间</span></span><br><span class="line"><span class="comment">		xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;gy&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-注入其他类型属性"><a href="#4-注入其他类型属性" class="headerlink" title="(4) 注入其他类型属性"></a>(4) 注入其他类型属性</h4><ul>
<li>字面量<ul>
<li>null值</li>
<li>属性值包含特殊符号</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  null标签为属性设置空值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	属性值包含特殊符号</span></span><br><span class="line"><span class="comment">	&lt;&lt;&gt;&gt;会让属性值内容表示为标签</span></span><br><span class="line"><span class="comment">	解决方法：</span></span><br><span class="line"><span class="comment">		1. 把&lt;&gt;进行转义，如&amp;lt、&amp;gt</span></span><br><span class="line"><span class="comment">		2. 把带特殊符号内容谢到CDATA</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-注入外部bean"><a href="#4-注入外部bean" class="headerlink" title="(4) 注入外部bean"></a>(4) 注入外部bean</h4><ul>
<li>比如Service层调用Dao层对象，需要在Bean中进行注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	在这里进行Service层对象的注入</span></span><br><span class="line"><span class="comment">	这样在Controller层，就可以调用userService对象提供的方法来处理我们的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.userService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	注入userDao对象</span></span><br><span class="line"><span class="comment">		name属性：类里面属性名称</span></span><br><span class="line"><span class="comment">		ref属性：创建userDao对象bean标签id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.userDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="5-注入内部bean和级联赋值"><a href="#5-注入内部bean和级联赋值" class="headerlink" title="(5) 注入内部bean和级联赋值"></a>(5) 注入内部bean和级联赋值</h4><ul>
<li><p>一对多关系：部门和员工</p>
<ul>
<li>一个部门有多个员工，一个员工属于一个部门</li>
<li>在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性</li>
</ul>
</li>
<li><p>实体类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 部门类，生成set方法方便注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注入内部bean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!--内部注入部门属性，以嵌套bean的方式实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保安部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>级联赋值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jack&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!--引入外部bean的方式，为外部bean的属性赋值（级联赋值）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保安部&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jack&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!--引入外部bean的方式，为外部bean的属性赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要Dept类中属性有get方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-3-操作Bean管理对象（注入集合类型）"><a href="#2-3-3-操作Bean管理对象（注入集合类型）" class="headerlink" title="2.3.3 操作Bean管理对象（注入集合类型）"></a>2.3.3 操作Bean管理对象（注入集合类型）</h3><h4 id="（1）注入数组-List-Map-Set类型"><a href="#（1）注入数组-List-Map-Set类型" class="headerlink" title="（1）注入数组/List/Map/Set类型"></a>（1）注入数组/List/Map/Set类型</h4><ul>
<li>为学生类注入集合属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Set类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 生成set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(String[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	数组对应array&gt;value标签</span></span><br><span class="line"><span class="comment">	List对应list&gt;value标签</span></span><br><span class="line"><span class="comment">	Map对应map&gt;entry[key,value]标签</span></span><br><span class="line"><span class="comment">	Set对应set&gt;value标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据结构<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;Java&quot;</span> <span class="attr">value</span>=<span class="string">&quot;世界上最好的语言&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;Php&quot;</span> <span class="attr">value</span>=<span class="string">&quot;世界上最好的语言&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Mysql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="（2）集合中注入对象类型值"><a href="#（2）集合中注入对象类型值" class="headerlink" title="（2）集合中注入对象类型值"></a>（2）集合中注入对象类型值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 集合中对象类型注入</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courses;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//set方法注入属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	List中的对象属性</span></span><br><span class="line"><span class="comment">		list&gt;ref.bean标签引入外部的对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="（4）把集合注入部分提取出来（公共属性）"><a href="#（4）把集合注入部分提取出来（公共属性）" class="headerlink" title="（4）把集合注入部分提取出来（公共属性）"></a>（4）把集合注入部分提取出来（公共属性）</h4><ul>
<li>在spring配置文件中引入util名称空间</li>
<li>使用util:list创建属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	添加xmlns:util</span></span><br><span class="line"><span class="comment">	在xsi:schemaLocation中添加http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--提取公共属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java从入门到入土<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Php从入门到入土<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			使用公共list实现属性注入，需要使用ref完成list引入</span></span><br><span class="line"><span class="comment">			ref对应到util的id属性</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-4-操作Bean管理对象（工厂Bean）"><a href="#2-3-4-操作Bean管理对象（工厂Bean）" class="headerlink" title="2.3.4 操作Bean管理对象（工厂Bean）"></a>2.3.4 操作Bean管理对象（工厂Bean）</h3><ol>
<li>Spring有两种类型bean，一种普通bean，另外一种工厂bean</li>
<li>普通bean：在配置文件中定义bean类型就是返回类型</li>
<li>工厂bean：在配置文件定义bean类型可以和返回类型不一样<ol>
<li>第一步：创建类，让这个类作为工厂bean，实现接口FactoryBean</li>
<li>第二步：实现接口里面的方法，在实现的方法中定义返回的bean类型</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建工厂类，实现接口FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 工厂可以获取到指定对象，这里获取的是User对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;gy&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	注入工厂对象，注入后会调用getObject方法获取到指定的对象</span></span><br><span class="line"><span class="comment">	所以才说这里定义的bean，在返回的时候获取的对象可以不一样</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.factorybean.MyBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试方法，根据applicationContext获取到的对象应该使用具体的类，这里使用的是User,所以根据注入的工厂bean获取到的的就是User对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    User myBean = applicationContext.getBean(<span class="string">&quot;myBean&quot;</span>, User.class);</span><br><span class="line">    System.out.println(myBean);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-5-操作Bean管理对象（Bean作用域）"><a href="#2-3-5-操作Bean管理对象（Bean作用域）" class="headerlink" title="2.3.5 操作Bean管理对象（Bean作用域）"></a>2.3.5 操作Bean管理对象（Bean作用域）</h3><h4 id="（1）bean的性质"><a href="#（1）bean的性质" class="headerlink" title="（1）bean的性质"></a>（1）bean的性质</h4><ul>
<li>Spring中，默认情况下，创建的bean是单实例对象，也就是注入的一个bean被两个引用变量获取到后，引用的地址都是相同的</li>
</ul>
<h4 id="（2）设置单实例-多实例"><a href="#（2）设置单实例-多实例" class="headerlink" title="（2）设置单实例/多实例"></a>（2）设置单实例/多实例</h4><ul>
<li>在spring配置文件标签里面有属性scope用于设置bean是单实例还是多实例</li>
<li>scope属性值<ul>
<li>第一个：默认值，singleton，表示实例为单实例对象</li>
<li>第二个：prototype，表示是多实例对象</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;活着&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="（3）singleton和prototype区别"><a href="#（3）singleton和prototype区别" class="headerlink" title="（3）singleton和prototype区别"></a>（3）singleton和prototype区别</h4><ul>
<li>singleton表示<strong>单实例</strong>，prototype表示<strong>多实例</strong></li>
<li>设置scope值是singleton时候，加载spring配置文件（java的ApplicationContext对象创建的时候）时，就会创建单实例对象，单实例对象<strong>不管获取多少次</strong>地址都是相同的</li>
<li>设置scope值是prototype时，不是在加载spring配置文件时创建，而是在调用getBean方法的时候才创建多实例对象，多实例对象的地址都是不一样的</li>
</ul>
<h3 id="2-3-6-操作Bean管理对象（Bean生命周期）"><a href="#2-3-6-操作Bean管理对象（Bean生命周期）" class="headerlink" title="2.3.6 操作Bean管理对象（Bean生命周期）"></a>2.3.6 操作Bean管理对象（Bean生命周期）</h3><h4 id="（1）生命周期"><a href="#（1）生命周期" class="headerlink" title="（1）生命周期"></a>（1）生命周期</h4><ul>
<li>从对象创建到对象销毁的过程</li>
</ul>
<h4 id="（2）bean生命周期"><a href="#（2）bean生命周期" class="headerlink" title="（2）bean生命周期"></a>（2）bean生命周期</h4><ul>
<li>通过构造器创建bean实例（无参数构造）</li>
<li>为bean的属性设置值和对其他bean的引用（调用set方法）</li>
<li><strong>把bean实例传递bean前置处理器</strong></li>
<li>调用bean的初始化的方法（需要进行配置）</li>
<li><strong>把bean实例传递bean后置处理器</strong></li>
<li>bean可以被获取到了</li>
<li>当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法）</li>
</ul>
<h4 id="（3）演示bean生命周期"><a href="#（3）演示bean生命周期" class="headerlink" title="（3）演示bean生命周期"></a>（3）演示bean生命周期</h4><ul>
<li>实体类，配置无参构造，初始化方法initMethod，销毁方法destory</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步：通过无参构造创建bean实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOname</span><span class="params">(String oname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步：调用set方法设置属性&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步：执行初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步：执行销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>bean注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	在bean中添加init-method、destroy-method属性</span></span><br><span class="line"><span class="comment">	并添加上我们在类中实现的方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myOrder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Order&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取bean实例对象</span></span><br><span class="line">Object myBean = context.getBean(<span class="string">&quot;myOrder&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动让bean实例销毁，此方法只有ClassPathXmlApplicationContext有</span></span><br><span class="line">context.close();</span><br></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<img src="/2022/02/23/Spring%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/result.png" class="" title="image1">
<h4 id="（4）后置处理器"><a href="#（4）后置处理器" class="headerlink" title="（4）后置处理器"></a>（4）后置处理器</h4><ul>
<li>bean实例初始化前后的操作，具体操作如下</li>
<li>创建类，实现接口<strong>BeanPostProcessor</strong>，创建后置处理器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承BeanPostProcessor的类可以重写方法</span></span><br><span class="line"><span class="comment">// 这两个方法可以在bean实例初始化前后被调用，可以对bean实例进行操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化前的操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 初始化后的操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>配置bean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myOrder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Order&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-xml自动装配"><a href="#2-4-xml自动装配" class="headerlink" title="2.4 xml自动装配"></a>2.4 xml自动装配</h2><ul>
<li>根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        bean标签属性autowire可以实现自动装配</span></span><br><span class="line"><span class="comment">            autowire属性值有byName和byType</span></span><br><span class="line"><span class="comment">                byName要求bean中的id要和对应类的属性名一致，才能自动装配该对象</span></span><br><span class="line"><span class="comment">                byType要求类型一致，才能自动装配该对象，注意要有两个相同类型的bean就会报错</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Dept&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-IOC操作bean管理（外部属性文件）"><a href="#2-5-IOC操作bean管理（外部属性文件）" class="headerlink" title="2.5 IOC操作bean管理（外部属性文件）"></a>2.5 IOC操作bean管理（外部属性文件）</h2><ul>
<li>使用情况：一般在spring项目要配置properties配置文件，填写数据库信息，这里就需要使用xml以引入外部文件的方式，配置连接数据库的bean</li>
<li><p>直接配置数据库信息</p>
<ul>
<li>配置德鲁伊druid连接池</li>
</ul>
</li>
<li><p>引入外部属性文件配置数据库连接池</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        先引入druid.jar包，在xml中引入命名context空间</span></span><br><span class="line"><span class="comment">            xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="line"><span class="comment">            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="line"><span class="comment">        通过context引入properties配置文件</span></span><br><span class="line"><span class="comment">        在druid中通过$&#123;&#125;引入配置文件中的信息，注入数据库连接池信息</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:application.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-6-IOC操作Bean管理（基于注解方式）"><a href="#2-6-IOC操作Bean管理（基于注解方式）" class="headerlink" title="2.6 IOC操作Bean管理（基于注解方式）"></a>2.6 IOC操作Bean管理（基于注解方式）</h2><h3 id="2-6-1-Spring提供的注解"><a href="#2-6-1-Spring提供的注解" class="headerlink" title="2.6.1 Spring提供的注解"></a>2.6.1 Spring提供的注解</h3><ul>
<li>@Component</li>
<li>@Service</li>
<li>@Controller</li>
<li>@Repository</li>
<li>以上的注解功能都是一样的，都可以用来创建bean实例，主要是方面理解</li>
</ul>
<h3 id="2-6-2-注解方式创建对象"><a href="#2-6-2-注解方式创建对象" class="headerlink" title="2.6.2 注解方式创建对象"></a>2.6.2 注解方式创建对象</h3><ul>
<li>第一步：引入spring-aop包</li>
<li>第二步：在bean配置文件中，开启组件扫描</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;包地址 包地址 ...&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>第三步：在类上添加注解，spring即可扫描到该类并完成对象的注入</p>
</li>
<li><p>默认注入bean的id为类名称首字母小写：如UserService=&gt;userService</p>
</li>
<li>注解<strong>Repository(value=”userSerivice”)</strong>中的value值等同于bean的id值</li>
</ul>
<h3 id="2-6-3-注解方式注入属性"><a href="#2-6-3-注解方式注入属性" class="headerlink" title="2.6.3 注解方式注入属性"></a>2.6.3 注解方式注入属性</h3><ul>
<li>提供的注解<ul>
<li>@Autowired：根据<strong>属性类型</strong>进行自动装配</li>
<li>@Qualifier：根据<strong>属性名称</strong>进行注入，@Qualifier(value=”注入类的value/id值”)，<strong>需要和@Autowired一起使用</strong>，就是叠加在一起作用在属性上</li>
<li>@Resource：可以根据类型/名称注入，@Resource默认按照属性类型进行自动装配，@Resource(name=””)即可以按照属性名称进行注入</li>
<li>@Value：完成普通属性的注入，如@Value(value=”123”)，可以为String类型属性注入属性值</li>
</ul>
</li>
<li>以上操作都需要在bean配置文件中开启扫描才能运行，意思是在获取注入的对象时，仍然要用ApplicationContext获取到bean配置文件</li>
</ul>
<h3 id="2-6-4-完全注解开发"><a href="#2-6-4-完全注解开发" class="headerlink" title="2.6.4 完全注解开发"></a>2.6.4 完全注解开发</h3><ul>
<li>第一步：创建配置类config/，这一步完成后就可以删除bean配置文件，因为这一步的作用和bean配置文件是一样的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages=&#123;&quot;com.company&quot;&#125;)</span>	<span class="comment">//配置需要扫描的包名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第二步：获取对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class)</span><br><span class="line">UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>,UserService.class)</span><br></pre></td></tr></table></figure>
<h1 id="三、AOP"><a href="#三、AOP" class="headerlink" title="三、AOP"></a>三、AOP</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><ul>
<li>面向切面编程：在不修改源代码的情况下在主干功能里添加新的功能模块</li>
</ul>
<img src="/2022/02/23/Spring%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/aop.png" class="" title="image3">
<h2 id="3-2-AOP底层原理"><a href="#3-2-AOP底层原理" class="headerlink" title="3.2 AOP底层原理"></a>3.2 AOP底层原理</h2><h3 id="3-2-1-动态代理"><a href="#3-2-1-动态代理" class="headerlink" title="3.2.1 动态代理"></a>3.2.1 动态代理</h3><ul>
<li><p>Spring5已经对动态代理做了封装，可以直接调用，需要的知识点：反射</p>
</li>
<li><p>第一种：有接口情况，使用JDK动态代理</p>
<ul>
<li>创建接口实现类代理对象，增强类的方法</li>
</ul>
</li>
</ul>
<img src="/2022/02/23/Spring%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/interaop.png" class="" title="image4">
<ul>
<li>第二种：没有接口情况，使用CGLIB动态代理</li>
</ul>
<img src="/2022/02/23/Spring%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/CGLIB.png" class="" title="image5">
<h3 id="3-2-2-AOP（JDK动态代理）"><a href="#3-2-2-AOP（JDK动态代理）" class="headerlink" title="3.2.2 AOP（JDK动态代理）"></a>3.2.2 AOP（JDK动态代理）</h3><ul>
<li>JDK动态代理，使用Proxy类里面的方法创建代理对象<ul>
<li>调用newProxyInstance方法</li>
</ul>
</li>
<li>newProxyInstance方法包含的三个参数<ul>
<li>第一个参数：类加载器</li>
<li>第二个参数：增强方法所在的类，这个类实现的接口，支持多个接口</li>
<li>第三个参数：实现接口InvocationHandler，创建代理对象，写增强的方法</li>
</ul>
</li>
<li>实现步骤：<ul>
<li>创建接口，定义方法，如UserDao</li>
<li>创建接口实现类，实现方法，如UserDaoImpl</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">       <span class="comment">// 写法一：匿名内部类 </span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(),interfaces,new InvocationHandler()&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable&#123;</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 写法二：创建代理对象</span></span><br><span class="line">        UserDao dao = (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(),interfaces,<span class="keyword">new</span> UserDaoProxy(userDao));</span><br><span class="line">        dao.add(<span class="number">1</span>,<span class="number">2</span>);	<span class="comment">// 相加的方法</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">// 写Onject是为了代码更通用</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取到代理对象所代理的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行前...&quot;</span>+method.getName+</span><br><span class="line">                           <span class="string">&quot;\n传递的参数...&quot;</span>+Arrays.toString(args));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行增强方法</span></span><br><span class="line">        Object res = method.invoke(obj,args);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行后...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-AOP专业术语"><a href="#3-3-AOP专业术语" class="headerlink" title="3.3 AOP专业术语"></a>3.3 AOP专业术语</h2><ul>
<li>连接点：类中可以被增强的方法，这些方法称为连接点</li>
<li>切入点：真正被增强的方法，称为切入点</li>
<li>通知（增强）：实际增强的逻辑部分<ul>
<li>前置通知</li>
<li>后置通知</li>
<li>环绕通知</li>
<li>异常通知</li>
<li>最终通知 finally</li>
</ul>
</li>
<li>切面：动作，如权限判断<ul>
<li>把通知应用到切入点的过程</li>
</ul>
</li>
</ul>
<h2 id="3-4-AOP操作准备"><a href="#3-4-AOP操作准备" class="headerlink" title="3.4 AOP操作准备"></a>3.4 AOP操作准备</h2><h3 id="3-4-1-概述"><a href="#3-4-1-概述" class="headerlink" title="3.4.1 概述"></a>3.4.1 概述</h3><ul>
<li>Spring框架一般都是基于AspectJ实现AOP操作</li>
<li>AspectJ不是Spring组成部分，独立的AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作</li>
<li>基于AspectJ实现AOP操作<ul>
<li>基于xml配置文件实现</li>
<li>基于注解方式实现（使用）</li>
</ul>
</li>
<li>需要引入依赖包</li>
</ul>
<h3 id="3-4-2-切入点表达式"><a href="#3-4-2-切入点表达式" class="headerlink" title="3.4.2 切入点表达式"></a>3.4.2 切入点表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))</span></span><br><span class="line"><span class="comment">// 例1：对BookDao类里的add进行增强</span></span><br><span class="line">execution(* com.company.dao.BookDao.add(...));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2：对BookDao类里的所有方法进行增强</span></span><br><span class="line">execution(* com.company.dao.BookDao.*(...));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2：对包dao中所有类所有方法进行增强</span></span><br><span class="line">execution(* com.company.dao.*.*(...));</span><br></pre></td></tr></table></figure>
<h2 id="3-5-AspectJ注解"><a href="#3-5-AspectJ注解" class="headerlink" title="3.5 AspectJ注解"></a>3.5 AspectJ注解</h2><h3 id="3-5-1-操作步骤"><a href="#3-5-1-操作步骤" class="headerlink" title="3.5.1 操作步骤"></a>3.5.1 操作步骤</h3><ul>
<li>创建类，定义方法，如User类</li>
<li>创建增强类，编写增强逻辑，如UserProxy<ul>
<li>在增强类中，创建方法，让不同方法代表不同通知类型</li>
</ul>
</li>
<li>进行通知的配置<ul>
<li>在Spring配置文件中，开启注解扫描</li>
<li>使用注解创建User(@Component)和UserProxy对象</li>
<li>在增强类上面添加注解@Aspect</li>
<li>在Spring配置文件中开启生成代理对象</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;包地址 包地址 ...&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启Aspect生成代理对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置不同类型的通知<ul>
<li>在增强类中，在通知方法上添加通知类型注解，使用切入点表达式进行配置</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span></span>&#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.company.User.add([参数]))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before......&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最终通知，方法之后执行</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.company.User.add([参数]))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after......&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后置通知，返回值之后执行，有异常时不执行</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.company.User.add([参数]))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning......&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 异常通知，有异常才执行</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.company.User.add([参数]))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing......&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 环绕通知，此注解下的方法，在被增强方法执行之前和之后都执行</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.company.User.add([参数]))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before......&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 被增强方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;around after......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-2-相同切入点抽取"><a href="#3-5-2-相同切入点抽取" class="headerlink" title="3.5.2 相同切入点抽取"></a>3.5.2 相同切入点抽取</h3><ul>
<li>将方法增强的切入点写成公共的部分，方便调用和切入点的统一修改</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcur(value = &quot;execution(* com.company.User.add([参数]))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointdemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span></span>&#123;</span><br><span class="line">    <span class="comment">// 前置通知，加入方法名称</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before......&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-3-增强类设置优先级"><a href="#3-5-3-增强类设置优先级" class="headerlink" title="3.5.3 增强类设置优先级"></a>3.5.3 增强类设置优先级</h3><ul>
<li>多个增强类可以增强同一个方法，因此可以为增强类设置优先级，</li>
<li>方法：在增强类上面添加注解@Order(数值型)，数字类型值越小，优先级越高</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Pointcur(value = &quot;execution(* com.company.User.add([参数]))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointdemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前置通知，加入方法名称</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before......&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-AspectJ配置文件"><a href="#3-6-AspectJ配置文件" class="headerlink" title="3.6 AspectJ配置文件"></a>3.6 AspectJ配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.company.Book.buy(...))&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--配置切面，ref对应注入的增强类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面，ref对应前面的切入点id--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-7-完全注解开发"><a href="#3-7-完全注解开发" class="headerlink" title="3.7 完全注解开发"></a>3.7 完全注解开发</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages=&#123;&quot;com.company&quot;&#125;)</span>	<span class="comment">//配置需要扫描的包名</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass=true)</span>	<span class="comment">// 默认为true，开启Aspect生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfig</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、JdbcTemplate"><a href="#四、JdbcTemplate" class="headerlink" title="四、JdbcTemplate"></a>四、JdbcTemplate</h1><h2 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h2><ul>
<li>引入依赖包<ul>
<li>mysql-connect</li>
<li>spring-jdbc</li>
<li>spring-tx：处理事务的包</li>
</ul>
</li>
<li>配置数据库连接池（druid）</li>
<li>注入JdbcTemplate对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入连接池对象属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>开启组件扫描</li>
</ul>
<h2 id="4-3-CURD实现"><a href="#4-3-CURD实现" class="headerlink" title="4.3 CURD实现"></a>4.3 CURD实现</h2><h3 id="4-3-1-添加操作"><a href="#4-3-1-添加操作" class="headerlink" title="4.3.1 添加操作"></a>4.3.1 添加操作</h3><ul>
<li>创建实体类User，创建Dao层UserDao，创建Service层UserService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into user values(?,?,?)&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        Object[] args = &#123;user.getUserId(),user.getUserName(),user.getPassword()&#125;</span><br><span class="line">        jdbcTemplate.update(sql,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-修改-删除操作"><a href="#4-3-2-修改-删除操作" class="headerlink" title="4.3.2 修改/删除操作"></a>4.3.2 修改/删除操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update user set user_name=?,password=? where user_id=?&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        Object[] args = &#123;user.getUserName(),user.getPassword(),user.getUserId()&#125;</span><br><span class="line">        jdbcTemplate.update(sql,args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from user where user_id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-3-查询操作"><a href="#4-3-3-查询操作" class="headerlink" title="4.3.3 查询操作"></a>4.3.3 查询操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询用户数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">selctCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select count(*) from user&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Integer count = jdbcTemplate.queryForObject(sql,Integer.class);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据id查询用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserInfo</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user where user_id=?&quot;</span>;</span><br><span class="line">		<span class="comment">// BeanPropertyRowMapper用于封装查询到的数据</span></span><br><span class="line">        User user = jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class),id);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询返回集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        List&lt;User&gt; users = jdbcTemplate.query(sql,<span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-4-批量操作"><a href="#4-3-4-批量操作" class="headerlink" title="4.3.4 批量操作"></a>4.3.4 批量操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 批量添加,List&lt;Object[]&gt;中的Object[]表示参数的集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchAdd(List&lt;Object[]&gt; barchArgs)&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into user values(?,?,?)&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回的是影响的行数数组</span></span><br><span class="line">        <span class="keyword">int</span>[] res = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 批量修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(List&lt;Object[]&gt; barchArgs)&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update user set user_name=?,password=? where user_id=?&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回的是影响的行数数组</span></span><br><span class="line">        <span class="keyword">int</span>[] res = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 批量删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchDelete(List&lt;Object[]&gt; barchArgs)&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from user where user_id=?&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回的是影响的行数数组</span></span><br><span class="line">        <span class="keyword">int</span>[] res = jdbcTemplate.batchUpdate(sql,batchArgs);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、事务管理"><a href="#五、事务管理" class="headerlink" title="五、事务管理"></a>五、事务管理</h1><h2 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h2><ul>
<li>一组操作的组合</li>
<li>事务的一些问题请转到数据库笔记中进行学习</li>
</ul>
<h2 id="5-2-事务特性ACID"><a href="#5-2-事务特性ACID" class="headerlink" title="5.2 事务特性ACID"></a>5.2 事务特性ACID</h2><ul>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ul>
<h2 id="5-3-准备工作"><a href="#5-3-准备工作" class="headerlink" title="5.3 准备工作"></a>5.3 准备工作</h2><ul>
<li>以银行转账操作为例<ul>
<li>创建数据库表，记录用户资金</li>
<li>创建service、dao完成对象创建和注入</li>
<li>创建jdbcTemplate对象</li>
<li>dao创建两个方法，某用户资金增加，另外用户资金减少</li>
<li>service创建转账方法，实现转账操作</li>
</ul>
</li>
</ul>
<h2 id="5-4-事务操作"><a href="#5-4-事务操作" class="headerlink" title="5.4 事务操作"></a>5.4 事务操作</h2><h3 id="5-4-1-声明式事务管理"><a href="#5-4-1-声明式事务管理" class="headerlink" title="5.4 1 声明式事务管理"></a>5.4 1 声明式事务管理</h3><ul>
<li>基于注解方式</li>
<li>基于xml方式</li>
</ul>
<h3 id="5-4-2-Spring事务管理API"><a href="#5-4-2-Spring事务管理API" class="headerlink" title="5.4.2 Spring事务管理API"></a>5.4.2 Spring事务管理API</h3><ul>
<li>Spring提供一个接口，代表事务管理器，这个接口针对不同框架提供不同的实现类</li>
</ul>
<h3 id="5-4-2-注解方式"><a href="#5-4-2-注解方式" class="headerlink" title="5.4.2 注解方式"></a>5.4.2 注解方式</h3><ul>
<li>注入事务管理对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--由于使用的式jdbc框架，所以注入DataSourceTransactionManager对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>开启扫描</li>
<li>xml引入名称空间tx，同前面的引入操作</li>
<li>开启事务注解</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transacntion-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在Service层添加事务注解@Transactional<ul>
<li>@Transactional可以加到类上，也可以加到方法上</li>
<li>加到类上，表示作用到类中的所有方法</li>
</ul>
</li>
</ul>
<h3 id="5-4-3-注解的参数"><a href="#5-4-3-注解的参数" class="headerlink" title="5.4.3 注解的参数"></a>5.4.3 注解的参数</h3><h4 id="（1）propagation：事务传播行为"><a href="#（1）propagation：事务传播行为" class="headerlink" title="（1）propagation：事务传播行为"></a>（1）propagation：事务传播行为</h4><ul>
<li>多事务方法直接进行调用，这个过程中事务是如何进行管理的，必须是对数据库中的数据产生变化的操作</li>
<li>简单来说就是，就是添加了@Transaction事务管理的方法去调用未添加事务管理的方法，事务的操作过程是怎样的</li>
</ul>
<img src="/2022/02/23/Spring%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/transactional.png" class="" title="image54">
<ul>
<li>下表均已上图为例，在事务管理方法中调用非事务管理方法，非事务管理方法运行的情况</li>
<li>配置方法：@Transactional(propagation = Propagation.REQUIRED)</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>传播属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>REQUIRED（default）</td>
<td>有事务就在当前事务运行，没有事务就创建事务运行</td>
</tr>
<tr>
<td>REQUIRED_NEW</td>
<td>无论有没有事务，都会创建一个事务在里面运行</td>
</tr>
<tr>
<td>SUPPORTS</td>
<td>如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中</td>
</tr>
<tr>
<td>NOT_SUPPORT</td>
<td>当前的方法不应该运行在事务中，如果有运行的事务，将它挂起</td>
</tr>
<tr>
<td>MANDATORY</td>
<td>当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常</td>
</tr>
<tr>
<td>NEVER</td>
<td>当前的方法不应该运行在事务中，如果有运行的事务，就抛出异常</td>
</tr>
<tr>
<td>NESTED</td>
<td>如果有事务在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行</td>
</tr>
</tbody>
</table>
</div>
<h4 id="（2）ioslation：事务隔离级别"><a href="#（2）ioslation：事务隔离级别" class="headerlink" title="（2）ioslation：事务隔离级别"></a>（2）ioslation：事务隔离级别</h4><ul>
<li>隔离性：多事务操作之间不会产生影响</li>
<li>多事务带来的问题：<strong>脏读、不可重复读、虚读</strong><ul>
<li>脏读：未提交的事务读取另一个未提交事务的数据</li>
<li>不可重复读：两个事务同时读到一条数据，一个事务读到了另一个事务<strong>提交之前</strong>的数据（数据不一致了）</li>
<li>虚读：一个未提交的事务读取到另一个提交事务的添加数据</li>
</ul>
</li>
<li>配置方式：@Transactional(ioslation= Ioslation.READ_UNCOMMITTED)</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>脏读</th>
<th>不可重复读</th>
<th>虚读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED（读未提交）</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>READ COMMITTED（读已提交）</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>REPEATABLE READ（可重复读/default）</td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td>SERIALIZABLE（串行化）</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody>
</table>
</div>
<h4 id="（3）timeout：超时时间"><a href="#（3）timeout：超时时间" class="headerlink" title="（3）timeout：超时时间"></a>（3）timeout：超时时间</h4><ul>
<li>事务需要在一定时间内进行提交，如果不提交就进行回滚，默认是-1，单位是秒</li>
</ul>
<h4 id="（4）readOnly：是否只读"><a href="#（4）readOnly：是否只读" class="headerlink" title="（4）readOnly：是否只读"></a>（4）readOnly：是否只读</h4><ul>
<li><p>读：查询操作，写：增删改</p>
</li>
<li><p>默认为false</p>
</li>
</ul>
<h4 id="（5）rollbackFor：回滚"><a href="#（5）rollbackFor：回滚" class="headerlink" title="（5）rollbackFor：回滚"></a>（5）rollbackFor：回滚</h4><ul>
<li>设置出现哪些异常进行事务回滚</li>
<li>设置该属性值为异常的class即可</li>
</ul>
<h4 id="（6）noRollbackFor：不回滚"><a href="#（6）noRollbackFor：不回滚" class="headerlink" title="（6）noRollbackFor：不回滚"></a>（6）noRollbackFor：不回滚</h4><ul>
<li>设置出现哪些异常不进行事务回滚</li>
</ul>
<h2 id="5-5-事务完全注解开发"><a href="#5-5-事务完全注解开发" class="headerlink" title="5.5 事务完全注解开发"></a>5.5 事务完全注解开发</h2><ul>
<li>创建配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.kuang&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>	<span class="comment">// 开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建数据库连接池</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://user_db&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="六、Spring5新特性"><a href="#六、Spring5新特性" class="headerlink" title="六、Spring5新特性"></a>六、Spring5新特性</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础大全</title>
    <url>/2022/02/26/Java%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、-Java变量"><a href="#一、-Java变量" class="headerlink" title="一、 Java变量"></a>一、 Java变量</h1><ul>
<li>局部变量：存储在方法的栈内存中<ul>
<li>形参</li>
<li>方法内的局部变量</li>
<li>代码块的局部变量</li>
<li>无法用static修饰</li>
</ul>
</li>
<li>类变量（静态变量）：用static修饰的变量，调用时使用类名.变量名（static可以修饰方法名）</li>
<li>成员变量（非静态变量）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RightDef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = num2 + <span class="number">5</span>;  <span class="comment">// 静态变量无需考虑声明的位置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num2 = <span class="number">20</span>; <span class="comment">// 静态变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、Java访问控制权限"><a href="#二、Java访问控制权限" class="headerlink" title="二、Java访问控制权限"></a>二、Java访问控制权限</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th>private</th>
<th>default</th>
<th>protected</th>
<th>public</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">同一类</td>
<td>y</td>
<td>y</td>
<td>y</td>
<td>y</td>
</tr>
<tr>
<td style="text-align:left">同一包内的类</td>
<td></td>
<td>y</td>
<td>y</td>
<td>y</td>
</tr>
<tr>
<td style="text-align:left">子类</td>
<td></td>
<td></td>
<td>y</td>
<td>y</td>
</tr>
<tr>
<td style="text-align:left">其他包内的类</td>
<td></td>
<td></td>
<td>需要继承</td>
<td>y</td>
</tr>
</tbody>
</table>
</div>
<h1 id="三、Java源程序与编译型运行区别"><a href="#三、Java源程序与编译型运行区别" class="headerlink" title="三、Java源程序与编译型运行区别"></a>三、Java源程序与编译型运行区别</h1><img src="/2022/02/26/Java%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/java%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png" class="" title="img">
<h1 id="四、程序控制"><a href="#四、程序控制" class="headerlink" title="四、程序控制"></a>四、程序控制</h1><h2 id="4-1-循环"><a href="#4-1-循环" class="headerlink" title="4.1 循环"></a>4.1 循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foreach语法，用于数组和容器</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">float</span> x : f)&#123;           <span class="comment">// f是数组或容器</span></span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-条件"><a href="#4-2-条件" class="headerlink" title="4.2 条件"></a>4.2 条件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-3-选择"><a href="#4-3-选择" class="headerlink" title="4.3 选择"></a>4.3 选择</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value1: <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2: <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="五、数组"><a href="#五、数组" class="headerlink" title="五、数组"></a>五、数组</h1><h2 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h2><ul>
<li>数组属于引用数据类型</li>
<li>包含：数组名、下标、元素</li>
</ul>
<h2 id="5-2-特点"><a href="#5-2-特点" class="headerlink" title="5.2 特点"></a>5.2 特点</h2><ol>
<li>数组是有序排列的</li>
<li>数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</li>
<li>创建数组对象会在内存中开辟一整块连续的空间</li>
<li>数组的长度一旦确定，就不能修改</li>
</ol>
<h2 id="5-3-操作"><a href="#5-3-操作" class="headerlink" title="5.3 操作"></a>5.3 操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ids;  <span class="comment">//数组声明</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">//静态初始化，初始化同时进行赋值，new int[]不能省略</span></span><br><span class="line"><span class="keyword">int</span>[] ids = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态初始化，初始化与元素赋值分开</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="keyword">int</span> len = ids.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组元素的调用</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">&quot;ls&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="5-4-数组元素的默认初始化值"><a href="#5-4-数组元素的默认初始化值" class="headerlink" title="5.4 数组元素的默认初始化值"></a>5.4 数组元素的默认初始化值</h2><ul>
<li>整型：0</li>
<li>浮点型：0</li>
<li>char：0或’\u0000’，而非’0’</li>
<li>boolean：false</li>
<li>数组元素是引用数据类型时：null</li>
</ul>
<h2 id="5-5-多维数组"><a href="#5-5-多维数组" class="headerlink" title="5.5 多维数组"></a>5.5 多维数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二维数组静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr1[] = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr1[] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态初始化1</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态初始化2</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">//由于没有初始化，所以会报空指针异常</span></span><br><span class="line"></span><br><span class="line">arr2[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">4</span>];    <span class="comment">// 给arr[1]初始化后，再来输出就不会报错</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误形式</span></span><br><span class="line"><span class="comment">// int[][] arr3 = new int[4][3]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-5-1-多维数组的默认初始值"><a href="#5-5-1-多维数组的默认初始值" class="headerlink" title="5.5.1 多维数组的默认初始值"></a>5.5.1 多维数组的默认初始值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);     <span class="comment">// 地址值</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);      <span class="comment">// null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-6-数组的遍历"><a href="#5-6-数组的遍历" class="headerlink" title="5.6 数组的遍历"></a>5.6 数组的遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foreach方式</span></span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element:a)</span><br><span class="line">    System.out.println(element);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-7-Array类"><a href="#5-7-Array类" class="headerlink" title="5.7 Array类"></a>5.7 Array类</h2><h3 id="5-7-1-常用方法"><a href="#5-7-1-常用方法" class="headerlink" title="5.7.1 常用方法"></a>5.7.1 常用方法</h3><ul>
<li>java.util.Array类的所有方法均为静态方法</li>
<li>boolean equals(int[] a,int[] b)：判断两个数组是否相等</li>
<li>String toString(int[] a)：输出数组信息</li>
<li>void fill(int[] a,int val)：将指定值填充到数组中</li>
<li>void sort(int[] a)：对数组进行排序（快速排序）</li>
<li>int binarySearch(int[] a,int key)：对排序后的数进行二分法检索指定的值</li>
</ul>
<h2 id="5-8-数组常见异常"><a href="#5-8-数组常见异常" class="headerlink" title="5.8 数组常见异常"></a>5.8 数组常见异常</h2><ul>
<li>空指针：NullPointerException</li>
<li>数组下标越界：ArrayIndexOutOfBoundsException</li>
</ul>
<h1 id="六、类和对象"><a href="#六、类和对象" class="headerlink" title="六、类和对象"></a>六、类和对象</h1><h2 id="6-1-类"><a href="#6-1-类" class="headerlink" title="6.1 类"></a>6.1 类</h2><h3 id="6-1-1-构造器"><a href="#6-1-1-构造器" class="headerlink" title="6.1.1 构造器"></a>6.1.1 构造器</h3><ul>
<li>一个在创建对象时被自动调用的特殊方法</li>
<li>名称必须要和类名相同</li>
<li>构造器调用顺序是客-&gt;主</li>
<li>每个类都有构造方法，没有显示的为类定义构造方法，Java编译器会提供一个默认的构造方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rock2</span></span>&#123;</span><br><span class="line">    Rock(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Rock&quot;</span>+i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">SimpleConstructor2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">            <span class="keyword">new</span> Rock2(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Rock 0 Rock 1 Rock 2 Rock 3 Rock 4 Rock 5 Rock 6 Rock 7</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-1-2-类的定义"><a href="#6-1-2-类的定义" class="headerlink" title="6.1.2 类的定义"></a>6.1.2 类的定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  String breed;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-1-3-类中的变量类型"><a href="#6-1-3-类中的变量类型" class="headerlink" title="6.1.3 类中的变量类型"></a>6.1.3 类中的变量类型</h3><ul>
<li>局部变量</li>
<li>成员变量</li>
<li>类变量</li>
</ul>
<h2 id="6-2-对象"><a href="#6-2-对象" class="headerlink" title="6.2 对象"></a>6.2 对象</h2><ul>
<li>声明：声明一个对象，包括对象名和对象类型</li>
<li>实例化：使用new来创建一个对象</li>
<li>初始化：new创建对象时，会调用构造函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">&quot;tommy&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="七、面向对象特性"><a href="#七、面向对象特性" class="headerlink" title="七、面向对象特性"></a>七、面向对象特性</h2><h2 id="7-1-封装"><a href="#7-1-封装" class="headerlink" title="7.1 封装"></a>7.1 封装</h2><ul>
<li>创建类以实现现实中抽象事物属性以及方法的封装</li>
</ul>
<h2 id="7-2-继承"><a href="#7-2-继承" class="headerlink" title="7.2 继承"></a>7.2 继承</h2><h3 id="7-2-1-继承的实现"><a href="#7-2-1-继承的实现" class="headerlink" title="7.2.1 继承的实现"></a>7.2.1 继承的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span> <span class="keyword">extends</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-2-2-继承的特性"><a href="#7-2-2-继承的特性" class="headerlink" title="7.2.2 继承的特性"></a>7.2.2 继承的特性</h3><ul>
<li>子类拥有父类非private的属性、方法</li>
<li>所有的类都继承于java.lang.Object</li>
</ul>
<h3 id="7-2-3-Super关键字"><a href="#7-2-3-Super关键字" class="headerlink" title="7.2.3 Super关键字"></a>7.2.3 Super关键字</h3><ol>
<li>在子类的成员方法中，访问父类的成员变量。</li>
<li>在子类的成员方法中，访问父类的成员方法。</li>
<li>在子类的构造方法中，访问父类的构造方法。</li>
</ol>
<h2 id="7-3-多态"><a href="#7-3-多态" class="headerlink" title="7.3 多态"></a>7.3 多态</h2><h3 id="7-3-1-多态实现的必要条件"><a href="#7-3-1-多态实现的必要条件" class="headerlink" title="7.3.1 多态实现的必要条件"></a>7.3.1 多态实现的必要条件</h3><ul>
<li>继承</li>
<li>重写</li>
<li>父类引用指向子类对象</li>
</ul>
<h3 id="7-3-2-多态的实现方式"><a href="#7-3-2-多态的实现方式" class="headerlink" title="7.3.2 多态的实现方式"></a>7.3.2 多态的实现方式</h3><ul>
<li>重写</li>
<li>接口</li>
<li>抽象类和抽象方法</li>
</ul>
<h1 id="八、抽象类和抽象方法"><a href="#八、抽象类和抽象方法" class="headerlink" title="八、抽象类和抽象方法"></a>八、抽象类和抽象方法</h1><h2 id="8-1-抽象类"><a href="#8-1-抽象类" class="headerlink" title="8.1 抽象类"></a>8.1 抽象类</h2><ul>
<li>抽象类用来描述一种类型应该具备的基本特征与功能，具体如何去完成这些行为由子类通过方法重写来完成</li>
<li>抽象方法指只有功能声明，没有功能主体实现的方法</li>
<li>有抽象方法的类一定是抽象类</li>
<li>抽象类无法直接创建对象，只能被子类继承后，创建子类对象</li>
<li>抽象方法必须被子类重写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String address, <span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Constructing an Employee&quot;</span>);</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.address = address;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Inside Employee computePay&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mailing a check to &quot;</span> + <span class="keyword">this</span>.name</span><br><span class="line">       + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>.address);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name + <span class="string">&quot; &quot;</span> + address + <span class="string">&quot; &quot;</span> + number;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> address;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String newAddress)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      address = newAddress;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> number;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-3-抽象方法"><a href="#8-3-抽象方法" class="headerlink" title="8.3 抽象方法"></a>8.3 抽象方法</h2><ul>
<li>抽象方法没有方法体，子类继承后必须重写该方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//其余代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="九、Java接口"><a href="#九、Java接口" class="headerlink" title="九、Java接口"></a>九、Java接口</h1><h2 id="9-1-接口与类的区别"><a href="#9-1-接口与类的区别" class="headerlink" title="9.1 接口与类的区别"></a>9.1 接口与类的区别</h2><ul>
<li>接口不能用于实例化对象。</li>
<li>接口没有构造方法。</li>
<li>接口中所有的方法必须是抽象方法。</li>
<li>接口中的成员变量只能是 public static final 类型。</li>
<li>接口不是被类继承了，而是要被类实现。</li>
<li>接口支持多继承</li>
</ul>
<h2 id="9-2-接口的实现"><a href="#9-2-接口的实现" class="headerlink" title="9.2 接口的实现"></a>9.2 接口的实现</h2><ul>
<li><p>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。</p>
</li>
<li><p>类使用implements关键字实现接口。在类声明中，Implements关键字放在class声明后面。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MammalInt</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">noOfLegs</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      MammalInt m = <span class="keyword">new</span> MammalInt();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-4-接口的特性"><a href="#9-4-接口的特性" class="headerlink" title="9.4 接口的特性"></a>9.4 接口的特性</h2><ul>
<li>接口是隐式抽象的，当声明一个接口的时候，不必使用abstract关键字。</li>
<li>接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键字。</li>
<li>接口中的方法都是公有的。</li>
</ul>
<h2 id="9-5-接口的继承"><a href="#9-5-接口的继承" class="headerlink" title="9.5 接口的继承"></a>9.5 接口的继承</h2><ul>
<li>一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用extends关键字，子接口继承父接口的方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHomeTeam</span><span class="params">(String name)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisitingTeam</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件名: Football.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Football</span> <span class="keyword">extends</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">homeTeamScored</span><span class="params">(<span class="keyword">int</span> points)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitingTeamScored</span><span class="params">(<span class="keyword">int</span> points)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endOfQuarter</span><span class="params">(<span class="keyword">int</span> quarter)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件名: Hockey.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">homeGoalScored</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitingGoalScored</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endOfPeriod</span><span class="params">(<span class="keyword">int</span> period)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">overtimePeriod</span><span class="params">(<span class="keyword">int</span> ot)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Hockey接口自己声明了四个方法，从Sports接口继承了两个方法，这样，实现Hockey接口的类需要实现六个方法。</li>
<li>相似的，实现Football接口的类需要实现五个方法，其中两个来自于Sports接口。</li>
</ul>
<h2 id="9-6-接口的多继承"><a href="#9-6-接口的多继承" class="headerlink" title="9.6 接口的多继承"></a>9.6 接口的多继承</h2><ul>
<li><p>在Java中，类的多继承是不合法，但接口允许多继承。</p>
</li>
<li><p>在接口的多继承中extends关键字只需要使用一次，在其后跟着继承接口。 如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span>, <span class="title">Event</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="十、Java枚举"><a href="#十、Java枚举" class="headerlink" title="十、Java枚举"></a>十、Java枚举</h1><h2 id="10-1-枚举的实现"><a href="#10-1-枚举的实现" class="headerlink" title="10.1 枚举的实现"></a>10.1 枚举的实现</h2><ul>
<li><p>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。</p>
</li>
<li><p>Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 , 来分割。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 执行输出结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Color c1 = Color.RED;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为RED</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="10-2-迭代枚举元素"><a href="#10-2-迭代枚举元素" class="headerlink" title="10.2 迭代枚举元素"></a>10.2 迭代枚举元素</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Color myVar : Color.values()) &#123;</span><br><span class="line">      System.out.println(myVar);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-3-枚举中的方法"><a href="#10-3-枚举中的方法" class="headerlink" title="10.3 枚举中的方法"></a>10.3 枚举中的方法</h2><ul>
<li>values() 返回枚举类中所有的值。</li>
<li>ordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。</li>
<li>valueOf()方法返回指定字符串值的枚举常量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 values()</span></span><br><span class="line">        Color[] arr = Color.values();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 迭代枚举</span></span><br><span class="line">        <span class="keyword">for</span> (Color col : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查看索引</span></span><br><span class="line">            System.out.println(col + <span class="string">&quot; at index &quot;</span> + col.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 使用 valueOf() 返回枚举常量，不存在的会报错 IllegalArgumentException</span></span><br><span class="line">        System.out.println(Color.valueOf(<span class="string">&quot;RED&quot;</span>));</span><br><span class="line">        <span class="comment">// System.out.println(Color.valueOf(&quot;WHITE&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果</span></span><br><span class="line"><span class="comment">RED at index 0</span></span><br><span class="line"><span class="comment">GREEN at index 1</span></span><br><span class="line"><span class="comment">BLUE at index 2</span></span><br><span class="line"><span class="comment">RED</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="10-4-枚举的作用"><a href="#10-4-枚举的作用" class="headerlink" title="10.4 枚举的作用"></a>10.4 枚举的作用</h2><ul>
<li>封装一组常量</li>
<li>对传入的参数进行约束和限制</li>
</ul>
<h1 id="十一、Java异常"><a href="#十一、Java异常" class="headerlink" title="十一、Java异常"></a>十一、Java异常</h1><img src="/2022/02/26/Java%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/Java%E5%BC%82%E5%B8%B8.png" class="" title="image1">
<h2 id="11-1-异常分类"><a href="#11-1-异常分类" class="headerlink" title="11.1 异常分类"></a>11.1 异常分类</h2><ol>
<li>检查性异常: 不处理编译不能通过</li>
<li>非检查性异常:不处理编译可以通过，如果有抛出直接抛到控制台</li>
<li>运行时异常: 就是非检查性异常</li>
<li>非运行时异常: 就是检查性异常</li>
</ol>
<blockquote>
<p>所有的异常类是从 java.lang.Exception 类继承的子类</p>
</blockquote>
<img src="/2022/02/26/Java%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/Exception.png" class="" title="exc">
<h2 id="11-2-异常捕获"><a href="#11-2-异常捕获" class="headerlink" title="11.2 异常捕获"></a>11.2 异常捕获</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单捕获</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Catch 块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多异常捕获</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 异常的变量名<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-3-异常抛出"><a href="#11-3-异常抛出" class="headerlink" title="11.3 异常抛出"></a>11.3 异常抛出</h2><h3 id="11-3-1-throws关键字"><a href="#11-3-1-throws关键字" class="headerlink" title="11.3.1 throws关键字"></a>11.3.1 throws关键字</h3><ul>
<li>用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上传，需要由方法的调用者进行异常处理</li>
<li>用在方法声明后面，跟的是异常类名</li>
<li>可以跟多个异常类名，用逗号隔开</li>
<li>表示抛出异常，由该方法的调用者来处理</li>
<li>throws表示出现异常的一种可能性，并不一定会发生这些异常</li>
</ul>
<h3 id="11-3-2-throw关键字"><a href="#11-3-2-throw关键字" class="headerlink" title="11.3.2 throw关键字"></a>11.3.2 throw关键字</h3><ul>
<li><p>用来抛出一个具体的异常类型。</p>
</li>
<li><p>用在方法体内，跟的是异常对象名</p>
</li>
<li>只能抛出一个异常对象名</li>
<li>表示抛出异常，由方法体内的语句处理</li>
<li>throw则是抛出了异常，执行throw则一定抛出了某种异常  </li>
<li>如果异常对象是非 RuntimeException 则需要在方法申明时加上该异常的抛出 即需要加上 throws 语句 或者 在方法体内 try catch 处理该异常，否则编译报错</li>
<li>执行到 throw 语句则后面的语句块不再执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> constxiong.interview;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThrowsThrow</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		testThrows();</span><br><span class="line">		</span><br><span class="line">		Integer i = <span class="keyword">null</span>;</span><br><span class="line">		testThrow(i);</span><br><span class="line">		</span><br><span class="line">		String filePath = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			testThrow(filePath);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试 throws 关键字</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> NullPointerException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testThrows</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">		Integer i = <span class="keyword">null</span>;</span><br><span class="line">		System.out.println(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试 throw 关键字抛出 运行时异常</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testThrow</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();<span class="comment">//运行时异常不需要在方法上申明</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试 throw 关键字抛出 非运行时异常，需要方法体需要加 throws 异常抛出申明</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testThrow</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (filePath == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IOException();<span class="comment">//运行时异常不需要在方法上申明</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-4-自定义异常类"><a href="#11-4-自定义异常类" class="headerlink" title="11.4 自定义异常类"></a>11.4 自定义异常类</h2><ul>
<li>所有异常都必须是 Throwable 的子类。</li>
<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>
<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名InsufficientFundsException.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//自定义异常类，继承Exception类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsufficientFundsException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">InsufficientFundsException</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> amount;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件名称 CheckingAccount.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//此类模拟银行账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckingAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//balance为余额，number为卡号</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CheckingAccount</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：存钱</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      balance += amount;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：取钱</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">                              InsufficientFundsException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(amount &lt;= balance)</span><br><span class="line">      &#123;</span><br><span class="line">         balance -= amount;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">double</span> needs = amount - balance;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> InsufficientFundsException(needs);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：返回余额</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> balance;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：返回卡号</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法</span></span><br><span class="line"><span class="comment">//文件名称 BankDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      CheckingAccount c = <span class="keyword">new</span> CheckingAccount(<span class="number">101</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Depositing $500...&quot;</span>);</span><br><span class="line">      c.deposit(<span class="number">500.00</span>);</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;\nWithdrawing $100...&quot;</span>);</span><br><span class="line">         c.withdraw(<span class="number">100.00</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;\nWithdrawing $600...&quot;</span>);</span><br><span class="line">         c.withdraw(<span class="number">600.00</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(InsufficientFundsException e)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Sorry, but you are short $&quot;</span></span><br><span class="line">                                  + e.getAmount());</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Depositing $500...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Withdrawing $100...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Withdrawing $600...</span></span><br><span class="line"><span class="comment">Sorry, but you are short $200.0</span></span><br><span class="line"><span class="comment">InsufficientFundsException</span></span><br><span class="line"><span class="comment">        at CheckingAccount.withdraw(CheckingAccount.java:25)</span></span><br><span class="line"><span class="comment">        at BankDemo.main(BankDemo.java:13)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="十二、Java内部类"><a href="#十二、Java内部类" class="headerlink" title="十二、Java内部类"></a>十二、Java内部类</h1><h2 id="12-1-非静态内部类"><a href="#12-1-非静态内部类" class="headerlink" title="12.1 非静态内部类"></a>12.1 非静态内部类</h2><ul>
<li>非静态内部类在类中地位等同于成员变量</li>
<li>非静态内部类实例的创建必须依赖外部类对象</li>
<li>非静态内部类可以访问到外部类的成员变量和成员方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">11</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(age); <span class="comment">//11</span></span><br><span class="line">            System.out.println(<span class="string">&quot;内部类提升封装性，代码结构更合理&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OuterClass outerClass = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        InnerClass innerClass = outerClass.<span class="function">new <span class="title">InnerClass</span><span class="params">()</span></span>;</span><br><span class="line">        innerClass.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="12-2-静态内部类"><a href="#12-2-静态内部类" class="headerlink" title="12.2 静态内部类"></a>12.2 静态内部类</h2><ul>
<li>静态内部类使用static对内部类进行标注</li>
<li>静态内部类无法访问外部类的成员变量和成员方法，但可以访问静态成员变量</li>
<li>静态内部类实例无需通过外部类实例进行创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类提升封装性，代码结构更合理&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printOuter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是外部类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InnerClass innerClass = <span class="keyword">new</span> OuterClass.InnerClass();</span><br><span class="line">        innerClass.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-3-匿名内部类"><a href="#12-3-匿名内部类" class="headerlink" title="12.3 匿名内部类"></a>12.3 匿名内部类</h2><ul>
<li>不显示声明类继承接口进行方法重写后调用</li>
<li>通过接口引用+匿名内部类在”{}”中重写方法，完成对象实例的创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoneClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyInterface myInterface = <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        myInterface.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="12-4-使用内部类的原因"><a href="#12-4-使用内部类的原因" class="headerlink" title="12.4 使用内部类的原因"></a>12.4 使用内部类的原因</h2><ul>
<li>内部类提升封装性，隐藏部分操作，代码结构更合理</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java进阶大全</title>
    <url>/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、容器"><a href="#一、容器" class="headerlink" title="一、容器"></a>一、容器</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><ul>
<li>数组本身是一种容器，劣势是不灵活，长度固定，方法有限，只能存储有序、可重复的数据</li>
<li>容器：在Java当中，如果有一个类专门用来存放其它类的对象，这个类就叫做容器，或者就叫做集合，集合就是将若干性质相同或相近的类对象组合在一起而形成的一个整体</li>
</ul>
<img src="/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8/Java%E5%AE%B9%E5%99%A8.png" class="" title="image">
<ul>
<li>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等</li>
</ul>
<h2 id="1-2-接口方法"><a href="#1-2-接口方法" class="headerlink" title="1.2 接口方法"></a>1.2 接口方法</h2><h3 id="1-2-1-Collection"><a href="#1-2-1-Collection" class="headerlink" title="1.2.1 Collection"></a>1.2.1 Collection</h3><p>以下方法都是见名知意，就不做解释了</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>size():int</td>
</tr>
<tr>
<td>isEmpty():boolean</td>
</tr>
<tr>
<td>contains(Object):</td>
</tr>
<tr>
<td>iterator():iterator\<E\></td>
</tr>
<tr>
<td>toArray():Object[]</td>
</tr>
<tr>
<td>add(E):boolean</td>
</tr>
<tr>
<td>remove(Object):boolean</td>
</tr>
<tr>
<td>containsAll(Collection&lt;?&gt;):boolean</td>
</tr>
<tr>
<td>addAll(Collection&lt;? extends E&gt;):boolean</td>
</tr>
<tr>
<td>removeAll(Collection&lt;?&gt;):boolean</td>
</tr>
<tr>
<td>clear():void</td>
</tr>
</tbody>
</table>
</div>
<h3 id="1-2-2-Map"><a href="#1-2-2-Map" class="headerlink" title="1.2.2 Map"></a>1.2.2 Map<K,V></h3><ul>
<li>以下方法都是见名知意，就不做解释了</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>size():int</td>
</tr>
<tr>
<td>isEmpty():boolean</td>
</tr>
<tr>
<td>containsKey(Object):boolean</td>
</tr>
<tr>
<td>containsValue(Object):boolean</td>
</tr>
<tr>
<td>get(Object):V</td>
</tr>
<tr>
<td>put(K,V):V</td>
</tr>
<tr>
<td>remove(Object):V</td>
</tr>
<tr>
<td>putAll(Map&lt;? extends K,?extends V&gt;):void</td>
</tr>
<tr>
<td>clear():void</td>
</tr>
<tr>
<td>ketSet():Set\<K\></td>
</tr>
<tr>
<td>values():Collection\<V\></td>
</tr>
<tr>
<td>equals(Object):boolean</td>
</tr>
</tbody>
</table>
</div>
<h1 id="二、泛型"><a href="#二、泛型" class="headerlink" title="二、泛型"></a>二、泛型</h1><h2 id="2-1-基础"><a href="#2-1-基础" class="headerlink" title="2.1 基础"></a>2.1 基础</h2><ul>
<li>将数据类型作为参数，进行变量的声明</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;&gt;,可以用T,E,V表示，代表需要接受的数据类型的参数</span></span><br><span class="line"><span class="comment">// 可以通过MyCollect&lt;String&gt; mc=new MyCollection&lt;String&gt;();创建对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCollect</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    Object[] objs = <span class="keyword">new</span> Object[<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        objs[index] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E)objs[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="2-2-泛型方法"><a href="#2-2-泛型方法" class="headerlink" title="2.2 泛型方法"></a>2.2 泛型方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// 泛型方法 printArray                         </span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// 输出数组元素            </span></span><br><span class="line">         <span class="keyword">for</span> ( E element : inputArray )&#123;        </span><br><span class="line">            System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">        Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">        Double[] doubleArray = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span> &#125;;</span><br><span class="line">        Character[] charArray = &#123; <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">&quot;整型数组元素为:&quot;</span> );</span><br><span class="line">        printArray( intArray  ); <span class="comment">// 传递一个整型数组</span></span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">&quot;\n双精度型数组元素为:&quot;</span> );</span><br><span class="line">        printArray( doubleArray ); <span class="comment">// 传递一个双精度型数组</span></span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">&quot;\n字符型数组元素为:&quot;</span> );</span><br><span class="line">        printArray( charArray ); <span class="comment">// 传递一个字符型数组</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">整型数组元素为:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">双精度型数组元素为:</span></span><br><span class="line"><span class="comment">1.1 2.2 3.3 4.4 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符型数组元素为:</span></span><br><span class="line"><span class="comment">H E L L O </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-1-有界的类型参数"><a href="#2-2-1-有界的类型参数" class="headerlink" title="2.2.1 有界的类型参数"></a>2.2.1 有界的类型参数</h3><ul>
<li><p>可能有时候，你会想限制那些被允许传递到一个类型参数的类型种类范围。例如，一个操作数字的方法可能只希望接受Number或者Number子类的实例。这就是有界类型参数的目的。</p>
</li>
<li><p>要声明一个有界的类型参数，首先列出类型参数的名称，后跟extends关键字，最后紧跟它的上界。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// 比较三个值并返回最大值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">maximum</span><span class="params">(T x, T y, T z)</span></span></span><br><span class="line"><span class="function">   </span>&#123;                     </span><br><span class="line">      T max = x; <span class="comment">// 假设x是初始最大值</span></span><br><span class="line">      <span class="keyword">if</span> ( y.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">         max = y; <span class="comment">//y 更大</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( z.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">         max = z; <span class="comment">// 现在 z 更大           </span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max; <span class="comment">// 返回最大对象</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.printf( <span class="string">&quot;%d, %d 和 %d 中最大的数为 %d\n\n&quot;</span>,</span><br><span class="line">                   <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, maximum( <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ) );</span><br><span class="line"> </span><br><span class="line">      System.out.printf( <span class="string">&quot;%.1f, %.1f 和 %.1f 中最大的数为 %.1f\n\n&quot;</span>,</span><br><span class="line">                   <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span>, maximum( <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span> ) );</span><br><span class="line"> </span><br><span class="line">      System.out.printf( <span class="string">&quot;%s, %s 和 %s 中最大的数为 %s\n&quot;</span>,<span class="string">&quot;pear&quot;</span>,</span><br><span class="line">         <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, maximum( <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span> ) );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">3, 4 和 5 中最大的数为 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6.6, 8.8 和 7.7 中最大的数为 8.8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">pear, apple 和 orange 中最大的数为 pear</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-3-泛型类"><a href="#2-3-泛型类" class="headerlink" title="2.3 泛型类"></a>2.3 泛型类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> T t;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.t = t;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;Integer&gt;();</span><br><span class="line">    Box&lt;String&gt; stringBox = <span class="keyword">new</span> Box&lt;String&gt;();</span><br><span class="line"> </span><br><span class="line">    integerBox.add(<span class="keyword">new</span> Integer(<span class="number">10</span>));</span><br><span class="line">    stringBox.add(<span class="keyword">new</span> String(<span class="string">&quot;菜鸟教程&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    System.out.printf(<span class="string">&quot;整型值为 :%d\n\n&quot;</span>, integerBox.get());</span><br><span class="line">    System.out.printf(<span class="string">&quot;字符串为 :%s\n&quot;</span>, stringBox.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">整型值为 :10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符串为 :菜鸟教程</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-类通配符"><a href="#2-4-类通配符" class="headerlink" title="2.4 类通配符"></a>2.4 类通配符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;Number&gt; number = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        </span><br><span class="line">        name.add(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line">        age.add(<span class="number">18</span>);</span><br><span class="line">        number.add(<span class="number">314</span>);</span><br><span class="line"> </span><br><span class="line">        getData(name);</span><br><span class="line">        getData(age);</span><br><span class="line">        getData(number);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">data :icon</span></span><br><span class="line"><span class="comment">data :18</span></span><br><span class="line"><span class="comment">data :314</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>类型通配符上限通过形如List来定义，如此定义就是通配符泛型值接受Number及其下层子类类型。</li>
<li><p>在(//1)处会出现错误，因为getUperNumber()方法中的参数已经限定了参数泛型上限为Number，所以泛型为String是不在这个范围之内，所以会报错</p>
</li>
<li><p>类型通配符下限通过形如 List&lt;? super Number&gt;来定义，表示类型只能接受Number及其三层父类类型，如 Object 类型的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;Number&gt; number = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        </span><br><span class="line">        name.add(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line">        age.add(<span class="number">18</span>);</span><br><span class="line">        number.add(<span class="number">314</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//getUperNumber(name);//1</span></span><br><span class="line">        getUperNumber(age);<span class="comment">//2</span></span><br><span class="line">        getUperNumber(number);<span class="comment">//3</span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUperNumber</span><span class="params">(List&lt;? extends Number&gt; data)</span> </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">data :18</span></span><br><span class="line"><span class="comment">data :314</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h1><h2 id="3-1-注解的定义"><a href="#3-1-注解的定义" class="headerlink" title="3.1 注解的定义"></a>3.1 注解的定义</h2><ul>
<li>注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</li>
</ul>
<h2 id="3-2-注解的作用"><a href="#3-2-注解的作用" class="headerlink" title="3.2 注解的作用"></a>3.2 注解的作用</h2><ul>
<li>生成文档。这是最常见的，也是java 最早提供的注解。常用的有@see @param @return 等；</li>
<li>在编译时进行格式检查。如@Override放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出；</li>
<li>跟踪代码依赖性，实现替代配置文件功能。比较常见的是spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都使用了这种配置来减少配置文件的数量；</li>
<li>在反射的 Class, Method, Field 等函数中，有许多于 Annotation 相关的接口。可以在反射中解析并使用 Annotation。</li>
</ul>
<h2 id="3-3-注解类的写法"><a href="#3-3-注解类的写法" class="headerlink" title="3.3 注解类的写法"></a>3.3 注解类的写法</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="symbol">MyTestAnnotation</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用在类上<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyTestAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="meta">@MyTestAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-4-元注解"><a href="#3-4-元注解" class="headerlink" title="3.4 元注解"></a>3.4 元注解</h2><ul>
<li>元注解：作用在注解上的 注解，方便实现注解想要的功能</li>
<li>元注解有五种<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Retention</span></span><br><span class="line"><span class="variable">@Target</span></span><br><span class="line"><span class="variable">@Document</span></span><br><span class="line"><span class="variable">@Inherited</span></span><br><span class="line"><span class="variable">@Repeatable</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-1-Retention"><a href="#3-4-1-Retention" class="headerlink" title="3.4.1 @Retention"></a>3.4.1 @Retention</h3></li>
<li>Retention：有保留保持的意思，表示注解存在的阶段是保留在源码(编译期)，字节码(类加载)，或者运行期(jvm中运行)，使用RetentionPolicy来表示注解的保留时期</li>
<li>一般使用RetentionPolicy.RUNTIME<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE) <span class="comment">// 尽存在于源码中，class字节码中不存在</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.CLASS) <span class="comment">// class字节码文件中存在，运行时无法获得</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 在class字节码文件中存在，运行时可通过反射获得</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-4-2-Target"><a href="#3-4-2-Target" class="headerlink" title="3.4.2 @Target"></a>3.4.2 @Target</h3><ul>
<li>Target：目标的意思，表示设置注解作用的目标范围；通过ElementType表达作用类型</li>
<li>一般使用ElementType.TYPE<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE) <span class="comment">// 作用于接口、枚举、注解</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.FIELD) <span class="comment">// 作用于属性字段、枚举的常量</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.METHOD) <span class="comment">// 作用于方法</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.PARAMETER) <span class="comment">// 作用于方法参数</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.CONSTRUCTOR) <span class="comment">// 作用于构造函数</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.LOCAL_VALUABLE) <span class="comment">// 作用于局部变量</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.ANNOTATION_TYPE) <span class="comment">// 作用于注解</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.PACKAGE) <span class="comment">// 作用于包</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.TYPE_PARAMETER) <span class="comment">// 作用于类型泛型，及泛型类、泛型方法、泛型接口</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.TYPE_USE) <span class="comment">// 可以标注任意类型，除了class</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-4-3-Documented"><a href="#3-4-3-Documented" class="headerlink" title="3.4.3 @Documented"></a>3.4.3 @Documented</h3><ul>
<li>Document是文档的意思，作用是将注解中的元素包含到Javadoc中去</li>
</ul>
<h3 id="3-4-4-Inherited"><a href="#3-4-4-Inherited" class="headerlink" title="3.4.4 @Inherited"></a>3.4.4 @Inherited</h3><ul>
<li>Inherited是继承的意思</li>
<li>一个被该注解 修饰的类，如果其子类没有被其他注释修饰，则它的子类也继承了父类的注解</li>
<li>示例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTestAnnotation&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTestAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取Son的class对象</span></span><br><span class="line">        Class sonClass = Son.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取Son类上的注解MyTestAnnotation</span></span><br><span class="line">        MyTestAnnotation annotation = sonClass.getAnnotation(MyTestAnnotation.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-4-5-Repeatable"><a href="#3-4-5-Repeatable" class="headerlink" title="3.4.5 @Repeatable"></a>3.4.5 @Repeatable</h3></li>
<li>Repeatable的英文意思是可重复的。顾名思义说明被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> People &#123;</span><br><span class="line">    Game[] value() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(People.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Game &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Game(value = &quot;LOL&quot;)</span></span><br><span class="line"><span class="meta">@Game(value = &quot;PUBG&quot;)</span></span><br><span class="line"><span class="meta">@Game(value = &quot;NFS&quot;)</span></span><br><span class="line"><span class="meta">@Game(value = &quot;Dirt4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGame</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>通过上面的例子，你可能会有一个疑问，游戏注解中括号的变量是啥，其实这和游戏注解中定义的属性对应。接下来我们继续学习注解的属性。</li>
</ul>
<h2 id="3-5-注解的属性"><a href="#3-5-注解的属性" class="headerlink" title="3.5 注解的属性"></a>3.5 注解的属性</h2><ul>
<li>通过上一小节@Repeatable注解的例子，我们说到注解的属性。注解的属性其实和类中定义的变量有异曲同工之处，只是注解中的变量都是成员变量（属性），并且注解中是没有方法的，只有成员变量，变量名就是使用注解括号中对应的参数名，变量返回值注解括号中对应参数类型。相信这会你应该会对上面的例子有一个更深的认识。而@Repeatable注解中的变量则类型则是对应Annotation（接口）的泛型Class</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repeatable &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates the containing annotation type for the</span></span><br><span class="line"><span class="comment">     * repeatable annotation type.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the containing annotation type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? extends Annotation&gt; value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-注解的本质"><a href="#3-6-注解的本质" class="headerlink" title="3.6 注解的本质"></a>3.6 注解的本质</h2><ul>
<li>注解的本质就是一个Annotation接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>通过以上源码，我们知道注解本身就是Annotation接口的子接口，也就是说注解中其实是可以有属性和方法，但是接口中的属性都是static final的，对于注解来说没什么意义，而我们定义接口的方法就相当于注解的属性，也就对应了前面说的为什么注解只有属性成员变量，其实他就是接口的方法，这就是为什么成员变量会有括号，不同于接口我们可以在注解的括号中给成员变量赋值。</li>
</ul>
<h2 id="3-7-注解属性类型"><a href="#3-7-注解属性类型" class="headerlink" title="3.7 注解属性类型"></a>3.7 注解属性类型</h2><h3 id="3-7-1-注解属性类型可以有以下列出的类型"><a href="#3-7-1-注解属性类型可以有以下列出的类型" class="headerlink" title="3.7.1 注解属性类型可以有以下列出的类型"></a>3.7.1 注解属性类型可以有以下列出的类型</h3><ol>
<li>基本数据类型</li>
<li>String</li>
<li>枚举类型</li>
<li>注解类型</li>
<li>Class类型</li>
<li>以上类型的一维数组类型</li>
</ol>
<h2 id="3-8-注解成员变量赋值"><a href="#3-8-注解成员变量赋值" class="headerlink" title="3.8 注解成员变量赋值"></a>3.8 注解成员变量赋值</h2><ul>
<li>如果注解又多个属性，则可以在注解括号中用“，”号隔开分别给对应的属性赋值，如下例子，注解在父类中赋值属性<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTestAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;mao&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTestAnnotation(name = &quot;father&quot;,age = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-9-获取注解属性"><a href="#3-9-获取注解属性" class="headerlink" title="3.9 获取注解属性"></a>3.9 获取注解属性</h2><ul>
<li>前面我们说了很多注解如何定义，放在哪，现在我们可以开始学习注解属性的提取了，这才是使用注解的关键，获取属性的值才是使用注解的目的。</li>
<li><p>如果获取注解属性，当然是反射啦，主要有三个基本的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GenericDeclaration.<span class="keyword">super</span>.isAnnotationPresent(annotationClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  A <span class="title">getAnnotation</span><span class="params">(Class annotationClass)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(annotationClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (A) annotationData().annotations.get(annotationClass);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> Annotation[] getAnnotations() &#123;</span><br><span class="line">        <span class="keyword">return</span> AnnotationParser.toArray(annotationData().annotations);</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure>
</li>
<li><p>下面结合前面的例子，我们来获取一下注解属性，在获取之前我们自定义的注解必须使用元注解@Retention(RetentionPolicy.RUNTIME)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取类注解属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class fatherClass = Father.class;</span><br><span class="line">        <span class="keyword">boolean</span> annotationPresent = fatherClass.isAnnotationPresent(MyTestAnnotation.class);</span><br><span class="line">        <span class="keyword">if</span>(annotationPresent)&#123;</span><br><span class="line">            MyTestAnnotation annotation = fatherClass.getAnnotation(MyTestAnnotation.class);</span><br><span class="line">            System.out.println(annotation.name());</span><br><span class="line">            System.out.println(annotation.age());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取方法注解属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field age = fatherClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="keyword">boolean</span> annotationPresent1 = age.isAnnotationPresent(Age.class);</span><br><span class="line">            <span class="keyword">if</span>(annotationPresent1)&#123;</span><br><span class="line">                Age annotation = age.getAnnotation(Age.class);</span><br><span class="line">                System.out.println(annotation.value());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Method play = PlayGame.class.getDeclaredMethod(<span class="string">&quot;play&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (play!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                People annotation2 = play.getAnnotation(People.class);</span><br><span class="line">                Game[] value = annotation2.value();</span><br><span class="line">                <span class="keyword">for</span> (Game game : value) &#123;</span><br><span class="line">                    System.out.println(game.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-9-1-运行结果"><a href="#3-9-1-运行结果" class="headerlink" title="3.9.1 运行结果"></a>3.9.1 运行结果</h3><img src="/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="image">
</li>
</ul>
<h2 id="3-10-注解的作用"><a href="#3-10-注解的作用" class="headerlink" title="3.10 注解的作用"></a>3.10 注解的作用</h2><ul>
<li>提供信息给编译器： 编译器可以利用注解来检测出错误或者警告信息，打印出日志。</li>
<li>编译阶段时的处理：软件工具可以用来利用注解信息来自动生成代码、文档或者做其它相应的自动处理。</li>
<li>运行时处理： 某些注解可以在程序运行的时候接受代码的提取，自动做相应的操作。</li>
<li>正如官方文档的那句话所说，注解能够提供元数据，转账例子中处理获取注解值的过程是我们开发者直接写的注解提取逻辑，处理提取和处理 Annotation 的代码统称为 APT（Annotation Processing Tool)。上面转账例子中的processAnnotationMoney方法就可以理解为APT工具类</li>
</ul>
<h1 id="四、IO"><a href="#四、IO" class="headerlink" title="四、IO"></a>四、IO</h1><h2 id="4-1-类结构"><a href="#4-1-类结构" class="headerlink" title="4.1 类结构"></a>4.1 类结构</h2><img src="/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8/io.webp" class="" title="io">
<ul>
<li>节点流：可以直接从数据源或目的地读写数据的数据流</li>
<li>处理流(包装流)：对节点流操作的优化</li>
</ul>
<h2 id="4-2-操作文件"><a href="#4-2-操作文件" class="headerlink" title="4.2 操作文件"></a>4.2 操作文件</h2><h3 id="4-2-1-File类"><a href="#4-2-1-File类" class="headerlink" title="4.2.1 File类"></a>4.2.1 File类</h3><ul>
<li><p>作用：文件和目录名的抽象表示</p>
</li>
<li><p>四种构造方法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> File(File parent,String child);</span><br><span class="line"><span class="keyword">new</span> File(String pathname);</span><br><span class="line"><span class="keyword">new</span> File(String parent, String child);</span><br><span class="line"><span class="keyword">new</span> File(URI uri);</span><br></pre></td></tr></table></figure>
<ul>
<li>获取文件路径方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path=<span class="string">&quot;&quot;</span>; <span class="comment">//绝对或相对路径，相对路径是相对改项目文件</span></span><br><span class="line">File src=<span class="keyword">new</span> File(path);</span><br><span class="line">src.getName(); <span class="comment">//获取文件或目录的名称;返回String</span></span><br><span class="line">src.getPath(); <span class="comment">//获取构建的给定的路径;返回String</span></span><br><span class="line">src.getAbsolutePath(); <span class="comment">//获取绝对路径;返回String</span></span><br><span class="line">src.getParent(); <span class="comment">//获取构建的父级目录字符串;返回String，无返回null</span></span><br><span class="line">src.length(); <span class="comment">//返回文件大小，单位为K，目录或文件不存在返回0;返回long</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取文件状态方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path=<span class="string">&quot;&quot;</span>;</span><br><span class="line">File src=<span class="keyword">new</span> File(path);</span><br><span class="line">src.exists(); <span class="comment">//判断文件存在;返回boolean</span></span><br><span class="line">src.isFile(); <span class="comment">//判断是否为一个文件;返回boolean</span></span><br><span class="line">src.isDirectory(); <span class="comment">//判断是否为一个目录;返回boolean</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其他操作：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path=<span class="string">&quot;&quot;</span>;</span><br><span class="line">File src=<span class="keyword">new</span> File(path);</span><br><span class="line">src.createNewFile(); <span class="comment">//该文件不存在的情况下，创建一个空的新文件或文件夹;返回boolean</span></span><br><span class="line">src.delete() <span class="comment">//删除操作;返回boolean</span></span><br><span class="line">src.mkdir(); <span class="comment">//上级目录不存在则创建失败;返回boolean</span></span><br><span class="line">src.mkdirs(); <span class="comment">//上级目录可以不存在(recommend)</span></span><br><span class="line">src.list(); <span class="comment">//列出下级名称;返回String</span></span><br><span class="line">src.listFiles(); <span class="comment">//返回下级文件对象列表;返回File[]</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-2-文件编码"><a href="#4-2-2-文件编码" class="headerlink" title="4.2.2 文件编码"></a>4.2.2 文件编码</h3><ul>
<li>编码：字符—&gt;字节</li>
<li>解码：字节—&gt;字符</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>字符集</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASCII</td>
<td>英文字符集</td>
</tr>
<tr>
<td>ISO-8859-1</td>
<td>包含中，日，拉丁字符</td>
</tr>
<tr>
<td>UTF-8</td>
<td>变长字符集(1-3个字节)</td>
</tr>
<tr>
<td>UTF-16BE</td>
<td>定长字符集(2个字节)，大端存储</td>
</tr>
<tr>
<td>UTF-16LE</td>
<td>定长字符集(2个字节)，小段存储</td>
</tr>
<tr>
<td>UTF-16</td>
<td>文件开头指定大端表示还是小段表示</td>
</tr>
<tr>
<td>GBK</td>
<td>中文字符集</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>编码函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String msg=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">byte</span>[] data = msg.getBytes(); <span class="comment">//默认为项目的编码方式</span></span><br><span class="line"><span class="keyword">byte</span>[] data = msg.getBytes(<span class="string">&quot;GBK&quot;</span>); <span class="comment">//指定编码方式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解码函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String msg=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">byte</span>[] data = msg.getBytes();</span><br><span class="line"></span><br><span class="line">msg = <span class="keyword">new</span> String(data,<span class="number">0</span>,data.length,<span class="string">&quot;utf-8&quot;</span>); <span class="comment">//通过构造器进行解码操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 第一个参数是数组引用</span></span><br><span class="line"><span class="comment">* 第二个是解码的起始位置</span></span><br><span class="line"><span class="comment">* 第三个是需要解码的字节数</span></span><br><span class="line"><span class="comment">* 第四个是按照什么方式解码</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>乱码原因</p>
<ul>
<li>给定的字节数不够，第三个参数</li>
<li>字符集不符合，第四个参数</li>
</ul>
</li>
</ul>
<h1 id="五、节点流"><a href="#五、节点流" class="headerlink" title="五、节点流"></a>五、节点流</h1><h2 id="5-1-读写操作"><a href="#5-1-读写操作" class="headerlink" title="5.1 读写操作"></a>5.1 读写操作</h2><ul>
<li>节点流可以对文件进行读写操作，一般的读写流程如下：<ul>
<li>创建源</li>
</ul>
<ol>
<li>选择流</li>
<li>操作</li>
<li>释放</li>
</ol>
</li>
</ul>
<ol>
<li>节点流分为<strong>字节流</strong>和<strong>字符流</strong></li>
</ol>
<h2 id="5-2-字节流"><a href="#5-2-字节流" class="headerlink" title="5.2 字节流"></a>5.2 字节流</h2><h3 id="5-2-1-输入流FileInputStream"><a href="#5-2-1-输入流FileInputStream" class="headerlink" title="5.2.1 输入流FileInputStream"></a>5.2.1 输入流FileInputStream</h3><h4 id="（1）read函数读取"><a href="#（1）read函数读取" class="headerlink" title="（1）read函数读取"></a>（1）read函数读取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="comment">// 创建源</span></span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;abc.txt&quot;</span>); <span class="comment">// 内容为hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择流</span></span><br><span class="line">FileInputStream input=<span class="keyword">null</span>;</span><br><span class="line">input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取操作，read()读到文件末尾返回-1</span></span><br><span class="line"><span class="keyword">while</span>((temp=input.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.print((<span class="keyword">char</span>)temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line"><span class="keyword">if</span>(input!=<span class="keyword">null</span>)</span><br><span class="line">    input.close();</span><br></pre></td></tr></table></figure>
<h4 id="（2）分段读取"><a href="#（2）分段读取" class="headerlink" title="（2）分段读取"></a>（2）分段读取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="comment">// 读取操作，分段读取</span></span><br><span class="line"><span class="keyword">byte</span>[] flush = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>] <span class="comment">// 缓冲容器</span></span><br><span class="line"><span class="keyword">int</span> len=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((temp=input.read(flush))!=-<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 字节数组--&gt;字符串(解码)</span></span><br><span class="line">    String str=<span class="keyword">new</span> String(flush,<span class="number">0</span>,len);</span><br><span class="line">	System.out.print(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-2-输出流"><a href="#5-2-2-输出流" class="headerlink" title="5.2.2 输出流"></a>5.2.2 输出流</h3><ul>
<li>写文件分两类<ul>
<li>覆盖</li>
<li>追加</li>
</ul>
</li>
<li>注：要注意添加异常操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若进行追加，new FileOutputStream(file,true);</span></span><br><span class="line"><span class="comment">// 第二个参数表示是否追加 </span></span><br><span class="line">OutputStream os=<span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">String msg=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] data=msg.getBytes(); <span class="comment">//编码</span></span><br><span class="line">os.write(data,<span class="number">0</span>,data.length);</span><br><span class="line">os.flush();</span><br></pre></td></tr></table></figure>
<h3 id="5-2-3-文件拷贝"><a href="#5-2-3-文件拷贝" class="headerlink" title="5.2.3 文件拷贝"></a>5.2.3 文件拷贝</h3><ul>
<li>read(flush)返回读取字节的长度<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in为我们定义的输入流</span></span><br><span class="line"><span class="keyword">byte</span>[] flush=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len=in.read(flush))!=-<span class="number">1</span>) &#123;</span><br><span class="line">	out.write(flush,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-3-字符流"><a href="#5-3-字符流" class="headerlink" title="5.3 字符流"></a>5.3 字符流</h2><h3 id="5-3-1-文件字符输入流FileReader"><a href="#5-3-1-文件字符输入流FileReader" class="headerlink" title="5.3.1 文件字符输入流FileReader"></a>5.3.1 文件字符输入流FileReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reader input=<span class="keyword">null</span>;</span><br><span class="line">input=<span class="keyword">new</span> FileReader(file);</span><br><span class="line"><span class="comment">//读取操作，分段读取</span></span><br><span class="line"><span class="keyword">char</span>[] flush = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>] <span class="comment">//缓冲容器</span></span><br><span class="line"><span class="keyword">int</span> len=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>((temp=input.read(flush))!=-<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//字符数组--&gt;字符串 无解码过程</span></span><br><span class="line">    String str=<span class="keyword">new</span> String(flush,<span class="number">0</span>,len);</span><br><span class="line">	System.out.print(str);</span><br><span class="line">&#125;</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure>
<h2 id="5-3-2-文件字符输出流FileWriter"><a href="#5-3-2-文件字符输出流FileWriter" class="headerlink" title="5.3.2 文件字符输出流FileWriter"></a>5.3.2 文件字符输出流FileWriter</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Writer output=<span class="keyword">null</span>;</span><br><span class="line">input=<span class="keyword">new</span> FileWriter(file);</span><br><span class="line">String msg=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>[] datas=msg.toCharArray(); <span class="comment">//字符串--&gt;字符数组</span></span><br><span class="line"></span><br><span class="line">output.write(datas,<span class="number">0</span>,datas.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">或者：</span></span><br><span class="line"><span class="comment">output.write(msg); 可以直接传入字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">或者</span></span><br><span class="line"><span class="comment">output.append(msg);	可以进行多次追加</span></span><br><span class="line"><span class="comment">output.append(msg).append(msg);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">output.flush();</span><br><span class="line"></span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure>
<h1 id="五、多线程"><a href="#五、多线程" class="headerlink" title="五、多线程"></a>五、多线程</h1><h2 id="5-1-基本概念"><a href="#5-1-基本概念" class="headerlink" title="5.1 基本概念"></a>5.1 基本概念</h2><h3 id="5-1-1-程序-进程-线程"><a href="#5-1-1-程序-进程-线程" class="headerlink" title="5.1.1 程序/进程/线程"></a>5.1.1 程序/进程/线程</h3><ul>
<li>程序Program</li>
<li>进程Process</li>
<li>线程Thread</li>
<li>并行</li>
<li>并发</li>
</ul>
<h3 id="5-1-2-线程的分类"><a href="#5-1-2-线程的分类" class="headerlink" title="5.1.2 线程的分类"></a>5.1.2 线程的分类</h3><ul>
<li>守护线程</li>
<li>用户线程</li>
</ul>
<h3 id="5-1-3-线程的生命周期"><a href="#5-1-3-线程的生命周期" class="headerlink" title="5.1.3 线程的生命周期"></a>5.1.3 线程的生命周期</h3><img src="/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8/thread.png" class="" title="thread">
<h2 id="5-2-多线程创建方式"><a href="#5-2-多线程创建方式" class="headerlink" title="5.2 多线程创建方式"></a>5.2 多线程创建方式</h2><h3 id="5-2-1-方式一：继承Thread类"><a href="#5-2-1-方式一：继承Thread类" class="headerlink" title="5.2.1 方式一：继承Thread类"></a>5.2.1 方式一：继承Thread类</h3><ul>
<li>创建一个继承于Thread类的子类</li>
<li>重写Thread类的run方法，run()为线程执行的主要流程</li>
<li>创建子类对象</li>
<li>通过对象调用start()方法启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    TestThread(Integer num)&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">this</span>.num++;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThread thread1 = <span class="keyword">new</span> TestThread(<span class="number">0</span>);</span><br><span class="line">        TestThread thread2 = <span class="keyword">new</span> TestThread(<span class="number">0</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-2-方式二：创建Thread匿名子类"><a href="#5-2-2-方式二：创建Thread匿名子类" class="headerlink" title="5.2.2 方式二：创建Thread匿名子类"></a>5.2.2 方式二：创建Thread匿名子类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure>
<ul>
<li>Thread类方法</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>start()</td>
<td>启动线程</td>
</tr>
<tr>
<td>run()</td>
<td></td>
</tr>
<tr>
<td>getName()：String</td>
<td></td>
</tr>
<tr>
<td>setName()</td>
<td></td>
</tr>
<tr>
<td>static currentThread()：Thread</td>
<td>返回当前线程，在Thread子类中就是this，通常用于主线程和Runnable实现类</td>
</tr>
<tr>
<td>yield()</td>
<td>线程让步</td>
</tr>
<tr>
<td>join()</td>
<td>当前线程阻塞，并调用调用此方法的线程，直到线程执行完毕才切换cpu</td>
</tr>
<tr>
<td>sleep(long millis)</td>
<td>单位：毫秒</td>
</tr>
<tr>
<td>stop()</td>
<td></td>
</tr>
<tr>
<td>isAlive()</td>
<td>判断当前的线程是否处于活动状态，即就绪态和运行态</td>
</tr>
</tbody>
</table>
</div>
<h3 id="5-2-3-方式三：实现Runnable接口"><a href="#5-2-3-方式三：实现Runnable接口" class="headerlink" title="5.2.3 方式三：实现Runnable接口"></a>5.2.3 方式三：实现Runnable接口</h3><ul>
<li>创建一个MyRunnable实现接口的Runnable</li>
<li>创建多个Thread线程对象，接收MyRunnable对象作为参数，启动线程调用MyRunnable实现的run方法</li>
<li>MyRunnable类的中的数据天然的就可以被多个线程共享，而以第一种方式实现多线程的话，则必须将成员变量定义为<strong>静态成员变量</strong>才能保证多线程的数据共享</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">			<span class="comment">//因为Runnable中没有getName方法，故用Thread中方法获取当前线程对象来实现</span></span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num);</span><br><span class="line">            num--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//在这里只需创造一个接口子类对象，后面直接用mr就行了</span></span><br><span class="line">		MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		Thread t1 = new Thread(mr);</span></span><br><span class="line"><span class="comment">//		Thread t2 = new Thread(mr);</span></span><br><span class="line"><span class="comment">//		t1.setName(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//		t2.setName(&quot;java&quot;);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//上面这种方法不是很常用，可以用下面这个</span></span><br><span class="line">		Thread t1 = <span class="keyword">new</span> Thread(mr,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">		Thread t2 = <span class="keyword">new</span> Thread(mr,<span class="string">&quot;java&quot;</span>);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-4-两种方式的选择"><a href="#5-2-4-两种方式的选择" class="headerlink" title="5.2.4 两种方式的选择"></a>5.2.4 两种方式的选择</h3><ul>
<li>开发中优先选择实现Runnable接口的方式<ul>
<li>实现接口的方式没有类的单继承的局限</li>
<li>实现接口的方式更适合处理多个线程有共享数据的情况</li>
</ul>
</li>
</ul>
<h3 id="5-2-5-方式四：实现Callable接口"><a href="#5-2-5-方式四：实现Callable接口" class="headerlink" title="5.2.5 方式四：实现Callable接口"></a>5.2.5 方式四：实现Callable接口</h3><ul>
<li>多线程实现方法：继承Callable接口，重写call方法</li>
<li>call方法有返回值，返回值是一个泛型，并且可以抛出异常</li>
<li>我们可以通过futureTask.get()方法获取到线程执行结果，但注意此方法会阻塞主线程执行，知道子线程任务执行完成并返回结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">	<span class="meta">@override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		业务代码</span><br><span class="line">		<span class="keyword">return</span> xxx;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">	FutureTask futureTask = <span class="keyword">new</span> FutureTask(mt);</span><br><span class="line">	<span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 获取call()的返回值</span></span><br><span class="line">		xxx = futureTask.get();</span><br><span class="line">	&#125; <span class="keyword">catch</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名内部类方式</span></span><br><span class="line">FutureTask futureTask=<span class="keyword">new</span> FutureTask(<span class="keyword">new</span> Callable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;calld方法执行了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;call方法返回值&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">futureTask.run();</span><br><span class="line">System.out.println(<span class="string">&quot;获取返回值: &quot;</span> + futureTask.get());</span><br></pre></td></tr></table></figure>
<h3 id="5-2-6-Future接口"><a href="#5-2-6-Future接口" class="headerlink" title="5.2.6 Future接口"></a>5.2.6 Future接口</h3><p>在并发编程中，我们经常用到非阻塞的模型，在之前的多线程的三种实现中，不管是继承thread类还是实现runnable接口，都无法保证获取到之前的执行结果。通过实现Callback接口，并用Future可以来接收多线程的执行结果。</p>
<p>举个例子：比如去吃早点时，点了包子和凉菜，包子需要等3分钟，凉菜只需1分钟，如果是串行的一个执行，在吃上早点的时候需要等待4分钟，但是因为你在等包子的时候，可以同时准备凉菜，所以在准备凉菜的过程中，可以同时准备包子，这样只需要等待3分钟。那Future这种模式就是后面这种执行模式。</p>
<img src="/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8/futrue.png" class="" title="future">
<h2 id="5-3-线程优先级"><a href="#5-3-线程优先级" class="headerlink" title="5.3 线程优先级"></a>5.3 线程优先级</h2><h3 id="5-3-1-线程等级"><a href="#5-3-1-线程等级" class="headerlink" title="5.3.1 线程等级"></a>5.3.1 线程等级</h3><ul>
<li>MAX_PRIORITY：10</li>
<li>MIN_PRIORITY：1</li>
<li>NORM_PRIORITY：5（默认优先级）</li>
<li>以上均为Thread类的常量</li>
</ul>
<h3 id="5-3-2-方法"><a href="#5-3-2-方法" class="headerlink" title="5.3.2 方法"></a>5.3.2 方法</h3><ul>
<li>getPriority()：返回线程优先值</li>
<li>setPriority(int newPriority)：改变线程优先级</li>
</ul>
<h3 id="5-3-3-说明"><a href="#5-3-3-说明" class="headerlink" title="5.3.3 说明"></a>5.3.3 说明</h3><ul>
<li>线程创建时继承父线程的优先级</li>
<li>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</li>
</ul>
<h2 id="5-4-线程安全"><a href="#5-4-线程安全" class="headerlink" title="5.4 线程安全"></a>5.4 线程安全</h2><h3 id="5-4-1-问题"><a href="#5-4-1-问题" class="headerlink" title="5.4.1 问题"></a>5.4.1 问题</h3><ul>
<li>数据被多线程共享时，会存在数据不同步的问题</li>
<li>解决办法：同步代码块</li>
</ul>
<h3 id="5-4-2-方式一：同步代码块"><a href="#5-4-2-方式一：同步代码块" class="headerlink" title="5.4.2 方式一：同步代码块"></a>5.4.2 方式一：同步代码块</h3><ul>
<li>同步代码块使用<strong>synchronized</strong>语句，object对象为线程进入同步代码块所需要的锁，这个锁必须是共用的，否则把锁写进run方法体中，线程仍然是不安全的</li>
<li>以上卫生间为例，只用使用了<strong>（同步监视器）锁</strong>的人把门锁上才能使用卫生间，在此期间，任何人不能使用这间卫生间</li>
<li>将操作共享变量的部分放到同步代码块中即可保证线程安全</li>
<li>缺点：操作同步代码块时，只能有一个线程，无法完成线程切换，相当于单线程，效率不高</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">final</span> Object object = <span class="keyword">new</span> Object();	<span class="comment">// 锁</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 同步代码块</span></span><br><span class="line">            <span class="comment">// 如果是以继承Thread的方式，则锁可以用“类名.class”来使用</span></span><br><span class="line">            <span class="keyword">synchronized</span> (object)&#123;	<span class="comment">// 或者锁用this更方便</span></span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-2&quot;</span>);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-4-3-方式二：同步方法"><a href="#5-4-3-方式二：同步方法" class="headerlink" title="5.4.3 方式二：同步方法"></a>5.4.3 方式二：同步方法</h3><ul>
<li>如果操作共享数据的代码完整的声明在一个方法中，我们可以将此方法声明为同步的</li>
<li>在方法的返回类型前加上<strong>synchronized</strong>即可将此方法声明为同步方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步监视器（锁）默认为this</span></span><br><span class="line">    <span class="comment">// 使用继承Thread类的方式，还必须把方法声明为static的才能保证线程安全，它的锁是之前提到的类对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-2&quot;</span>);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-5-死锁"><a href="#5-5-死锁" class="headerlink" title="5.5 死锁"></a>5.5 死锁</h2><h3 id="5-5-1-概念"><a href="#5-5-1-概念" class="headerlink" title="5.5.1 概念"></a>5.5.1 概念</h3><p><strong>死锁</strong>是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于<strong>死锁</strong>状态或系统产生了<strong>死锁</strong>，这些永远在互相等待的进程称为<strong>死锁</strong>进程。</p>
<h3 id="5-5-2-死锁模拟"><a href="#5-5-2-死锁模拟" class="headerlink" title="5.5.2 死锁模拟"></a>5.5.2 死锁模拟</h3><ul>
<li>主线程===&gt;init()===&gt;同步监视器A===&gt;同步监视器B===&gt;last()方法</li>
<li>副线程===&gt;init()===&gt;同步监视器B===&gt;同步监视器A===&gt;last()方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="comment">// 同步监视器A</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">(B b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程名：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;进入了B实例的bar方法&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程名：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;企图调用B实例的last方法&quot;</span>);</span><br><span class="line">        b.last();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了A类的last方法内部&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="comment">// 同步监视器B</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">(A a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程名：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;进入了B实例的bar方法&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程名：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;企图调用A实例的last方法&quot;</span>);</span><br><span class="line">        a.last();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入了B类的last方法内部&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    A a = <span class="keyword">new</span> A();</span><br><span class="line">    B b = <span class="keyword">new</span> B();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">        a.foo(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;进入主线程之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;副线程&quot;</span>);</span><br><span class="line">        b.bar(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;进入副线程之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        DeadLock dl = <span class="keyword">new</span> DeadLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(dl).start();	<span class="comment">// 副线程</span></span><br><span class="line">        dl.init();	<span class="comment">// 主线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-5-3-Lock锁"><a href="#5-5-3-Lock锁" class="headerlink" title="5.5.3 Lock锁"></a>5.5.3 Lock锁</h3><ul>
<li><p>Lock是jdk5.0新增的特性</p>
</li>
<li><p>synchronized和lock的异同</p>
<ul>
<li>相同：二者都可以解决线程安全问题</li>
<li>不同：synchronized机制在执行完相应的同步代码之后，自动的释放同步监视器，Lock需要手动的启动同步（lock()），同时结束同步也需要手动实现（unlock()）</li>
</ul>
</li>
<li>优先使用顺序：Lock-&gt;同步代码块（已经进入方法体，分配了相应资源）-&gt;同步方法（在方法体之外）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 1. 生成lock对象</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// 2. 调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="comment">// 调用解锁方法unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable myRunnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-2&quot;</span>);</span><br><span class="line">        Thread thread3 = <span class="keyword">new</span> Thread(myRunnable,<span class="string">&quot;thread-3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-6-线程池"><a href="#5-6-线程池" class="headerlink" title="5.6 线程池"></a>5.6 线程池</h2><ul>
<li>背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程对性能影响很大</li>
<li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用；类似于共享单车</li>
<li>好处：提高相应速度（减少了创建新线程的时间）；降低资源消耗；便于线程管理：corePoolSize（核心池的大小）、maximumPoolSize（最大线程数）、keepAliveTime（线程没有任务时最长的保持时间）</li>
<li>JDK5提供了线程池API：ExecutorService和Executors</li>
<li>ExecutorService：真正的线程池接口，常见子类ThreadPoolExecutor<ul>
<li>void execute(Runnable command)：执行任务/命令，一般用来执行Runnable</li>
<li><code>&lt;T&gt; Future &lt;T&gt; submit(Callable&lt;T&gt; task)</code>：执行任务，有返回值，一般用来执行Callable</li>
<li>void shutdown()：关闭连接池</li>
</ul>
</li>
<li>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池<ul>
<li>Executors.newCacheThreadPool()：创建一个可以缓存的线程池，如果线程池长度超过处理需要，可以灵活回收空闲线程，没回收的话就新建线程</li>
<li>Executors.newFixedThreadPool(n)：创建一个可重用固定线程数的线程池，可控制最大并发数，超出的线程进行队列等待。</li>
<li>Executors.newSingleThreadExecutor()：创建一个单线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</li>
<li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">			<span class="comment">//因为Runnable中没有getName方法，故用Thread中方法获取当前线程对象来实现</span></span><br><span class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num);</span><br><span class="line">            num--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor)service;</span><br><span class="line">        service1.corePoolSize(<span class="number">15</span>);</span><br><span class="line">            </span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java容器</tag>
        <tag>Java泛型</tag>
        <tag>Java注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Java算法大全五-查找排序</title>
    <url>/2022/07/02/Java%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8-%E6%9F%A5%E6%89%BE%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="一、直接插入排序"><a href="#一、直接插入排序" class="headerlink" title="一、直接插入排序"></a>一、直接插入排序</h1><ul>
<li>插入排序基本思想是每次将一个待排序的记录按其关键字大小插入到前面已排好序的子序列中，直到全部记录插入完成</li>
<li>比较次数和移动次数取决于待排序表的初始状态</li>
<li>适用于顺序存储和链式存储的线性表</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;          <span class="comment">// 依次将A[2]~A[n]插入到前面已排序序列</span></span><br><span class="line">        <span class="keyword">if</span>(A[i]&lt;A[i-<span class="number">1</span>])&#123;        <span class="comment">// 若A[i]关键码小于其前驱，将A[i]插入有序表中</span></span><br><span class="line">            A[<span class="number">0</span>]=A[i];          <span class="comment">// 复制为哨兵，A[0]不存放元素</span></span><br><span class="line">            <span class="keyword">for</span>(j=i-<span class="number">1</span>;A[<span class="number">0</span>]&lt;A[j];--j)    <span class="comment">// 从后往前查找待插入位置</span></span><br><span class="line">                A[j+<span class="number">1</span>]=A[j];    <span class="comment">// 向后挪位</span></span><br><span class="line">            A[j+<span class="number">1</span>]=A[<span class="number">0</span>];        <span class="comment">// 复制到插入位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、折半插入排序"><a href="#二、折半插入排序" class="headerlink" title="二、折半插入排序"></a>二、折半插入排序</h1><ul>
<li>设在待排序表中有一个记录序列V[1], …,v[n]。其中V[1], …, v[i-1]是已经排好序的记录。在插入v[i]时，利用折半搜索法寻找 v[i] 的插入位置，并插入，直到所有记录插入完成</li>
<li>比较次数与待排序表的初始状态无关，仅取决于表中的元素个数n</li>
<li>元素的移动次数未改变，依赖于待排序表的初始状态</li>
<li>是一种稳定的排序算法</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(ElemType A[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,low,high,mid;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;          <span class="comment">// 依次将A[2]~A[n]插入前面的已排序序列</span></span><br><span class="line">        A[<span class="number">0</span>]=A[i];              <span class="comment">// 将A[i]暂存到A[0]</span></span><br><span class="line">        low=<span class="number">1</span>;high=i<span class="number">-1</span>;         <span class="comment">// 设置折半查找的范围</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;       <span class="comment">// 折半查找（，默认递增有序）</span></span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;   <span class="comment">// 取中间点</span></span><br><span class="line">            <span class="keyword">if</span>(A[mid]&gt;A[<span class="number">0</span>])     <span class="comment">// 查找左半子表</span></span><br><span class="line">                high=mid<span class="number">-1</span>;     <span class="comment">// 查找右半子表</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=high+<span class="number">1</span>;--j)</span><br><span class="line">            A[j+<span class="number">1</span>]=A[j];        <span class="comment">// 统一后移元素，空出插入位置</span></span><br><span class="line">        A[high+<span class="number">1</span>]=A[<span class="number">0</span>];         <span class="comment">// 插入操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、希尔排序"><a href="#三、希尔排序" class="headerlink" title="三、希尔排序"></a>三、希尔排序</h1><ul>
<li>先将待排序表分割成若干形如L[i,i+d,i+2d,…,i+kd]的“特殊”子表，即把相隔某个“增量”的记录组成一个子表，对各个子表分别进行直接插入排序，当整个表中的元素已呈“基本有序”时，再对全体记录进行一次直接插入排序</li>
<li>仅适用于线性表为顺序存储的情况</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(ElemType A[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// A[0]只是暂存单元，不是哨兵，当j&lt;=0时，插入位置已到</span></span><br><span class="line">    <span class="keyword">for</span>(dk=n/<span class="number">2</span>;dk&gt;=<span class="number">1</span>;dk=dk/<span class="number">2</span>)&#123;  <span class="comment">// 步长变化</span></span><br><span class="line">        <span class="keyword">for</span>(i=dk+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i]&lt;A[i-dk])&#123;       <span class="comment">// 需将A[i]插入有序增量子表</span></span><br><span class="line">                A[<span class="number">0</span>]=A[i];          <span class="comment">// 暂存在A[0]</span></span><br><span class="line">                <span class="keyword">for</span>(j=i-dk;j&gt;<span class="number">0</span>&amp;&amp;A[<span class="number">0</span>]&lt;A[j];i-=dk)</span><br><span class="line">                    A[j+dk]=A[j];       <span class="comment">// 记录后移，查找插入的位置</span></span><br><span class="line">                A[j+dk]=A[<span class="number">0</span>]            <span class="comment">// 插入</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、冒泡排序"><a href="#四、冒泡排序" class="headerlink" title="四、冒泡排序"></a>四、冒泡排序</h1><ul>
<li>从后往前（或从前往后）两两比较相邻元素的值，若为逆序（即A[i-1]&gt;A[i]），则交换它们，直到序列比较完。重复这一步骤，直到序列全部有序</li>
<li>每一趟排序都能使一个元素放置在其最终的位置上</li>
<li>比较次数和移动次数取决于待排序表的初始状态</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(ELemType A[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        flag=<span class="literal">false</span>;             <span class="comment">// 表示本趟冒泡是否发生交换的标志</span></span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)&#123;     <span class="comment">// 一趟冒泡国产</span></span><br><span class="line">            <span class="keyword">if</span>(A[j<span class="number">-1</span>]&gt;A[j])&#123;    <span class="comment">// 若为逆序</span></span><br><span class="line">                swap(A[j<span class="number">-1</span>],A[j]);  <span class="comment">// 交换</span></span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span>;         <span class="comment">// 本趟遍历后没有发生交换，说明表已经有序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、快速排序"><a href="#五、快速排序" class="headerlink" title="五、快速排序"></a>五、快速排序</h1><ul>
<li>在待排序表L[1,2,…,n]中任取一个元素pivot作为基准，通过一趟排序将待排序表划分为独立的两个部分L[1,…,k-1]和L[k+1,…,n]，使得L[1,…,k-1]中的所有元素小于pivot，L[k+1,…,n]中的所有元素大于等于pivot，则pivot放在了其最终位置L(k)上。然后分别递归地对两个子表重复上述过程，直到每个部分只有一个元素或为空为止，即所有元素放在了其最终位置上。</li>
<li>每一趟排序都能使一个元素放置在其最终的位置上</li>
<li>快速排序是所有内部排序算法中平均性能最优的排序算法</li>
<li>初始不够对称，会使得快速排序效率降低；元素基本有序，无法发挥长处</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(ElemType A[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;               <span class="comment">// 递归跳出的条件</span></span><br><span class="line">        <span class="keyword">int</span> pivotpos=Partition(A,low,high);     <span class="comment">// 划分</span></span><br><span class="line">        QuickSort(A,low,pivotpos<span class="number">-1</span>);        <span class="comment">// 依次对两个子表进行递归排序</span></span><br><span class="line">        QuickSort(A,pivot+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(ElemType A[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;   <span class="comment">// 一趟划分</span></span><br><span class="line">    ElemType pivot=A[low];      <span class="comment">// 将当前表中第一个元素设为枢轴，对表进行划分</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;        <span class="comment">// 循环跳出条件</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;A[high]&gt;=pivot) --high;</span><br><span class="line">        A[low]=A[high];         <span class="comment">// 将比枢轴小的元素移动到左端</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;A[low]&lt;pivot)   ++low;</span><br><span class="line">        A[high]=A[low];         <span class="comment">// 将比枢轴大的元素移动到右端</span></span><br><span class="line">    &#125;</span><br><span class="line">    A[low]=pivot;           <span class="comment">// 枢轴元素存放到最终位置</span></span><br><span class="line">    <span class="keyword">return</span> low;             <span class="comment">// 返回存放枢轴的最终位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="六、简单选择排序"><a href="#六、简单选择排序" class="headerlink" title="六、简单选择排序"></a>六、简单选择排序</h1><ul>
<li>每一趟（如第i趟）在后面n-i+1（i=1,2…,n-1）个待排序元素中选取关键字最小的元素，作为有序子序列的第i个元素，直到第n-1趟做完，待排序元素只剩下一个，就不用再选了</li>
<li>移动次数与序列的初始状态有关；比较次数与序列的初始状态无关</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(ElemType A[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;     <span class="comment">// 一共进行n-1趟</span></span><br><span class="line">        min=i;              <span class="comment">// 记录最小元素位置</span></span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)      <span class="comment">// 在A[i,...,n-1]中选择最小的元素</span></span><br><span class="line">            <span class="keyword">if</span>(A[j]&lt;A[min]) min=j;      <span class="comment">// 更新最小元素位置</span></span><br><span class="line">        <span class="keyword">if</span>(min!=i)  swap(A[i],A[min]);      <span class="comment">// 封装的swap()函数共移动元素3次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="七、堆排序"><a href="#七、堆排序" class="headerlink" title="七、堆排序"></a>七、堆排序</h1><h2 id="7-1-大根堆-小根堆的定义"><a href="#7-1-大根堆-小根堆的定义" class="headerlink" title="7.1 大根堆/小根堆的定义"></a>7.1 大根堆/小根堆的定义</h2><ul>
<li>n个关键字序列L[1…n]成为堆，当且仅当该序列满足：<ul>
<li>（1）L(i)&gt;=L(2i)且L(i)&gt;=L(2i+1)或</li>
<li>（2）L(i)&lt;=L(2i)且L(i)&lt;=L(2i+1) (1&lt;=i&lt;=n/2取上界)</li>
</ul>
</li>
<li>可以将一维数组视为一颗完全二叉树，满足条件（1）的称为大根堆，大根堆的最大元素放在根结点，且其任意非根结点值小于等于其双亲结点值</li>
<li>满足条件（2）的堆称为小根堆，小根堆的定义刚好相反，根结点是最小元素</li>
</ul>
<h2 id="7-2-堆排序的思路"><a href="#7-2-堆排序的思路" class="headerlink" title="7.2 堆排序的思路"></a>7.2 堆排序的思路</h2><ul>
<li>首先将存放L[1,…,n]中的n个元素建成初始堆，由于堆本身的特点（以大根堆为例），堆顶元素就是最大值。输出堆顶元素后，通常将堆底元素送入堆顶，此时根结点已不满足大根堆的形式，堆被破坏，将堆顶元素向下调整使其继续保持大根堆的性质，再输出堆顶元素。如此重复，知道堆中仅剩一个元素为止</li>
</ul>
<h1 id="八、归并排序"><a href="#八、归并排序" class="headerlink" title="八、归并排序"></a>八、归并排序</h1><h2 id="8-1-二路归并排序"><a href="#8-1-二路归并排序" class="headerlink" title="8.1 二路归并排序"></a>8.1 二路归并排序</h2><ul>
<li>假定待排序表含有n个记录，则可将其视为n个有序的子表，每个子表的长度为1，然后两两归并，得到n/2(取上限)个长度为2或1的有序表；继续两个归并，如此重复，直到合并为一个长度为n的有序表为止<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ElemType *B=(ElemType *)<span class="built_in">malloc</span>((n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(ElemType));     <span class="comment">// 辅助数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(ElemType A[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;   <span class="comment">// 从中间划分两个子序列</span></span><br><span class="line">        MergeSort(A,low,mid);   <span class="comment">// 从左侧子序列进行递归排序</span></span><br><span class="line">        MergeSort(A,mid+<span class="number">1</span>,high);    <span class="comment">// 对右侧子序列进行递归排序</span></span><br><span class="line">        Merge(A,low,mid,high);  <span class="comment">// 归并</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(ELemType A[],<span class="keyword">int</span> low,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 表A的两段A[low...mid]和A[mid+1...high]各自有序，将它们合并成一个有序表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=low;k&lt;=high;k++)</span><br><span class="line">        B[k]=A[k];          <span class="comment">// 将A中所有元素复制到B中</span></span><br><span class="line">    <span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i;i&lt;mid&amp;&amp;j&lt;high;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(B[i]&lt;=B[j])      <span class="comment">// 比较B的左右两段中的元素</span></span><br><span class="line">            A[k]=B[i++];        <span class="comment">// 将较小值复制到A中</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            A[k]=B[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">        A[k++]=B[i++];  <span class="comment">// 若第一个表未检测完，复制</span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high)</span><br><span class="line">        A[k++]=B[j++];  <span class="comment">// 若第二个表未检测完，复制</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="九、基数排序"><a href="#九、基数排序" class="headerlink" title="九、基数排序"></a>九、基数排序</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java进阶大全-反射</title>
    <url>/2022/09/28/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="一、反射的概念"><a href="#一、反射的概念" class="headerlink" title="一、反射的概念"></a>一、反射的概念</h1><p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为动态（或准动态，为啥要说是准动态，因为一般而言的动态语言定义是程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言。从这个观点看，Perl，Python，Ruby是动态语言，C++，Java，C#不是动态语言。）语言的一个关键性质。</p>
<h1 id="二、反射的作用"><a href="#二、反射的作用" class="headerlink" title="二、反射的作用"></a>二、反射的作用</h1><p>我们知道反射机制允许程序在运行时取得任何一个已知名称的class的内部信息，包括包括其modifiers(修饰符)，fields(属性)，methods(方法)等，并可于运行时改变fields内容或调用methods。那么我们便可以更灵活的编写代码，代码可以在运行时装配，无需在组件之间进行源代码链接，降低代码的耦合度；还有动态代理的实现等等；但是需要注意的是反射使用不当会造成很高的资源消耗！</p>
<h1 id="三、反射的实现"><a href="#三、反射的实现" class="headerlink" title="三、反射的实现"></a>三、反射的实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.reflex;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private say()...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;public work()...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、通过对象调用 getClass() 方法来获取,通常应用在：比如你传过来一个 Object</span></span><br><span class="line"><span class="comment">//  类型的对象，而我不知道你具体是什么类，用这种方法</span></span><br><span class="line">　　Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">　　Class c1 = p1.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、直接通过 类名.class 的方式得到,该方法最为安全可靠，程序性能更高</span></span><br><span class="line"><span class="comment">//  这说明任何一个类都有一个隐含的静态成员变量 class</span></span><br><span class="line">　　Class c2 = Person.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、通过 Class 对象的 forName() 静态方法来获取，用的最多，</span></span><br><span class="line"><span class="comment">//   但可能抛出 ClassNotFoundException 异常</span></span><br><span class="line">　　Class c3 = Class.forName(<span class="string">&quot;com.ys.reflex.Person&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="3-1-Class类的方法"><a href="#3-1-Class类的方法" class="headerlink" title="3.1 Class类的方法"></a>3.1 Class类的方法</h2><ul>
<li>getName()：获得类的完整名字。</li>
<li>getFields()：获得类的public类型的属性。</li>
<li>getDeclaredFields()：获得类的所有属性。包括private 声明的和继承类</li>
<li>getMethods()：获得类的public类型的方法。</li>
<li>getDeclaredMethods()：获得类的所有方法。包括private 声明的和继承类</li>
<li>getMethod(String name, Class[] parameterTypes)：获得类的特定方法，name参数指定方法的名字，parameterTypes 参数指定方法的参数类型。</li>
<li>getConstructors()：获得类的public类型的构造方法。</li>
<li>getConstructor(Class[] parameterTypes)：获得类的特定构造方法，parameterTypes 参数指定构造方法的参数类型。</li>
<li>newInstance()：通过类的不带参数的构造方法创建这个类的一个对象。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得类完整的名字</span></span><br><span class="line">String className = c2.getName();</span><br><span class="line">System.out.println(className);<span class="comment">//输出com.ys.reflex.Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的public类型的属性。</span></span><br><span class="line">Field[] fields = c2.getFields();</span><br><span class="line"><span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">   System.out.println(field.getName());<span class="comment">//age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的所有属性。包括私有的</span></span><br><span class="line">Field [] allFields = c2.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field field : allFields)&#123;</span><br><span class="line">    System.out.println(field.getName());<span class="comment">//name    age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的public类型的方法。这里包括 Object 类的一些方法</span></span><br><span class="line">Method [] methods = c2.getMethods();</span><br><span class="line"><span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">    System.out.println(method.getName());<span class="comment">//work waid equls toString hashCode等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的所有方法。</span></span><br><span class="line">Method [] allMethods = c2.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method method : allMethods)&#123;</span><br><span class="line">    System.out.println(method.getName());<span class="comment">//work say</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得指定的属性</span></span><br><span class="line">Field f1 = c2.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">System.out.println(f1);</span><br><span class="line"><span class="comment">//获得指定的私有属性</span></span><br><span class="line">Field f2 = c2.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//启用和禁用访问安全检查的开关，值为 true，则表示反射的对象在使用时应该取消 java 语言的访问检查；反之不取消</span></span><br><span class="line">f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(f2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建这个类的一个对象</span></span><br><span class="line">Object p2 =  c2.newInstance();</span><br><span class="line"><span class="comment">//将 p2 对象的  f2 属性赋值为 Bob，f2 属性即为 私有属性 name</span></span><br><span class="line">f2.set(p2,<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"><span class="comment">//使用反射机制可以打破封装性，导致了java对象的属性不安全。</span></span><br><span class="line">System.out.println(f2.get(p2)); <span class="comment">//Bob</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取构造方法</span></span><br><span class="line">Constructor [] constructors = c2.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor constructor : constructors)&#123;</span><br><span class="line">    System.out.println(constructor.toString());<span class="comment">//public com.ys.reflex.Person()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-1-获取父类属性"><a href="#3-1-获取父类属性" class="headerlink" title="3.1 获取父类属性"></a>3.1 获取父类属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String publicField = <span class="string">&quot;parent_publicField&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> String protectField = <span class="string">&quot;parent_protectField&quot;</span>;</span><br><span class="line">    String defaultField = <span class="string">&quot;parent_defaultField&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String privateField = <span class="string">&quot;parent_privateField&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetParentField</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;com.ys.model.Son&quot;</span>);</span><br><span class="line">        <span class="comment">//获取父类私有属性值</span></span><br><span class="line">        System.out.println(getFieldValue(c1.newInstance(),<span class="string">&quot;privateField&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">getDeclaredField</span><span class="params">(Object obj,String fieldName)</span> </span>&#123;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line">        Class c = obj.getClass();</span><br><span class="line">        <span class="keyword">for</span>(; c != Object.class ; c = c.getSuperclass())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = c.getDeclaredField(fieldName);</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> field;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="comment">//这里甚么都不要做！并且这里的异常必须这样写，不能抛出去。</span></span><br><span class="line">                <span class="comment">//如果这里的异常打印或者往外抛，则就不会执行c = c.getSuperclass(),最后就不会进入到父类中了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getFieldValue</span><span class="params">(Object object,String fieldName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = getDeclaredField(object,fieldName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> field.get(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过执行上述代码，我们获得了父类的私有属性值，这里要注意的是直接通过反射获取子类的对象是不能得到父类的属性值的，必须根据反射获得的子类 Class 对象在调用  getSuperclass() 方法获取父类对象，然后在通过父类对象去获取父类的属性值。</p>
<p>灵活使用反射能让我们代码更加灵活，这里比如JDBC原生代码注册驱动，hibernate 的实体类，Spring 的 AOP等等都有反射的实现。但是凡事都有两面性，反射也会消耗系统的性能，增加复杂性等，合理使用才是真！</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>说文解字</title>
    <url>/2022/10/07/%E8%AF%B4%E6%96%87%E8%A7%A3%E5%AD%97/</url>
    <content><![CDATA[<h1 id="一、滕王阁序"><a href="#一、滕王阁序" class="headerlink" title="一、滕王阁序"></a>一、滕王阁序</h1><h2 id="1-1-原文"><a href="#1-1-原文" class="headerlink" title="1.1 原文"></a>1.1 原文</h2><p>​    豫章故郡，洪都新府。星分翼轸（zhěn），地接衡庐。襟（jīn）三江而带五湖，控蛮荆而引瓯（ōu）越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍（huáng）枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨（qǐ）戟（jǐ）遥临；宇文新州之懿（yì）范，襜（chān）帷（wéi）暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯（jiàn）。(豫章故郡 一作：南昌故郡；青霜 一作：清霜)</p>
<p>​    时维九月，序属三秋。潦（lǎo）水尽而寒潭清，烟光凝而暮山紫。俨（yǎn）骖騑（cān fēi）于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦（luán）之体势。（天人 一作：仙人；层峦 一作：层台；即冈 一作：列冈；飞阁流丹 一作：飞阁翔丹）</p>
<p>​    披绣闼（tà），俯雕甍（méng），山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳（zhú）。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡（péng lǐ）之滨，雁阵惊寒，声断衡阳之浦。(轴 通：舳；迷津 一作：弥津；云销雨霁，彩彻区明 一作：虹销雨霁，彩彻云衢)</p>
<p>​    遥襟甫（fǔ）畅，逸（yì）兴遄（chuán）飞。爽籁（lài）发而清风生，纤歌凝而白云遏（è）。睢（suī ）园绿竹，气凌彭泽之樽；邺（yè）水朱华，光照临川之笔。四美具，二难并。穷睇眄（dì miǎn）于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟（míng）深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍（hūn）而不见，奉宣室以何年？(遥襟甫畅 一作：遥吟俯畅)</p>
<p>​    嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊（yì）于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙（hé zhé）以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆（sāng yú）非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！(见机 一作：安贫；以犹欢 一作：而相欢)</p>
<p>　　勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫（què）之长风。舍簪笏（zān hù）于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂（pěng mèi），喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</p>
<p>　　呜呼！胜地不常，盛筵（yán）难再；兰亭已矣，梓泽（zǐ zé）丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔。<br>　　滕王高阁临江渚，佩玉鸣鸾（luán）罢歌舞。<br>　　画栋朝飞南浦云，珠帘暮卷西山雨。<br>　　闲云潭影日悠悠，物换星移几度秋。<br>　　阁中帝子今何在？槛（jiàn）外长江空自流。</p>
<h2 id="2-2-解字"><a href="#2-2-解字" class="headerlink" title="2.2 解字"></a>2.2 解字</h2>]]></content>
      <categories>
        <category>文化艺术</category>
        <category>语言</category>
      </categories>
      <tags>
        <tag>文言文</tag>
        <tag>中华文化</tag>
      </tags>
  </entry>
  <entry>
    <title>C语法基础大全-容器</title>
    <url>/2022/10/10/C%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="一、序列式容器"><a href="#一、序列式容器" class="headerlink" title="一、序列式容器"></a>一、序列式容器</h1><h2 id="1-1-Vector"><a href="#1-1-Vector" class="headerlink" title="1.1 Vector"></a>1.1 Vector</h2><h3 id="1-1-1-引入"><a href="#1-1-1-引入" class="headerlink" title="1.1.1 引入"></a>1.1.1 引入</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt; vector&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-2-常用方法"><a href="#1-1-2-常用方法" class="headerlink" title="1.1.2 常用方法"></a>1.1.2 常用方法</h3><h4 id="（1）构造函数"><a href="#（1）构造函数" class="headerlink" title="（1）构造函数"></a>（1）构造函数</h4><ul>
<li>vector():创建一个空vector</li>
<li>vector(int nSize):创建一个vector,元素个数为nSize</li>
<li>vector(int nSize,const t&amp; t):创建一个vector，元素个数为nSize,且值均为t</li>
<li>vector(const vector&amp;):复制构造函数</li>
<li>vector(begin,end):复制[begin,end)区间内另一个数组的元素到vector中</li>
</ul>
<h4 id="（2）增加函数"><a href="#（2）增加函数" class="headerlink" title="（2）增加函数"></a>（2）增加函数</h4><ul>
<li>void push_back(const T&amp; x):向量尾部增加一个元素X</li>
<li>iterator insert(iterator it,const T&amp; x):向量中迭代器指向元素前增加一个元素x</li>
<li>iterator insert(iterator it,int n,const T&amp; x):向量中迭代器指向元素前增加n个相同的元素x</li>
<li>iterator insert(iterator it,const_iterator first,const_iterator last):向量中迭代器指向元素前插入另一个相同类型向量的[first,last)间的数据</li>
</ul>
<h4 id="（3）删除函数"><a href="#（3）删除函数" class="headerlink" title="（3）删除函数"></a>（3）删除函数</h4><ul>
<li>iterator erase(iterator it):删除向量中迭代器指向元素</li>
<li>iterator erase(iterator first,iterator last):删除向量中[first,last)中元素</li>
<li>void pop_back():删除向量中最后一个元素</li>
<li>void clear():清空向量中所有元素</li>
</ul>
<h4 id="（4）遍历函数"><a href="#（4）遍历函数" class="headerlink" title="（4）遍历函数"></a>（4）遍历函数</h4><ul>
<li>reference at(int pos):返回pos位置元素的引用</li>
<li>reference front():返回首元素的引用</li>
<li>reference back():返回尾元素的引用</li>
<li>iterator begin():返回向量头指针，指向第一个元素</li>
<li>iterator end():返回向量尾指针，指向向量最后一个元素的下一个位置</li>
<li>reverse_iterator rbegin():反向迭代器，指向最后一个元素</li>
<li>reverse_iterator rend():反向迭代器，指向第一个元素之前的位置</li>
</ul>
<h4 id="（5）判断函数"><a href="#（5）判断函数" class="headerlink" title="（5）判断函数"></a>（5）判断函数</h4><ul>
<li>bool empty() const:判断向量是否为空，若为空，则向量中无元素</li>
</ul>
<h4 id="（6）大小函数"><a href="#（6）大小函数" class="headerlink" title="（6）大小函数"></a>（6）大小函数</h4><ul>
<li>int size() const:返回向量中元素的个数</li>
<li>int capacity() const:返回当前向量张红所能容纳的最大元素值</li>
<li>int max_size() const:返回最大可允许的vector元素数量值</li>
</ul>
<h4 id="（7）其他函数"><a href="#（7）其他函数" class="headerlink" title="（7）其他函数"></a>（7）其他函数</h4><ul>
<li>void swap(vector&amp;):交换两个同类型向量的数据</li>
<li>void assign(int n,const T&amp; x):设置向量中第n个元素的值为x</li>
<li>void assign(const_iterator first,const_iterator last):向量中[first,last)中元素设置成当前向量元素</li>
</ul>
<h2 id="1-2-deque"><a href="#1-2-deque" class="headerlink" title="1.2 deque"></a>1.2 deque</h2><h3 id="1-2-1-引入与使用"><a href="#1-2-1-引入与使用" class="headerlink" title="1.2.1 引入与使用"></a>1.2.1 引入与使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span>  <span class="comment">// 头文件</span></span></span><br><span class="line">deque&lt;type&gt; deq;  <span class="comment">// 声明一个元素类型为type的双端队列que</span></span><br><span class="line"><span class="function">deque&lt;type&gt; <span class="title">deq</span><span class="params">(size)</span></span>;  <span class="comment">// 声明一个类型为type、含有size个默认值初始化元素的的双端队列que</span></span><br><span class="line"><span class="function">deque&lt;type&gt; <span class="title">deq</span><span class="params">(size, value)</span></span>;  <span class="comment">// 声明一个元素类型为type、含有size个value元素的双端队列que</span></span><br><span class="line"><span class="function">deque&lt;type&gt; <span class="title">deq</span><span class="params">(mydeque)</span></span>;  <span class="comment">// deq是mydeque的一个副本</span></span><br><span class="line"><span class="function">deque&lt;type&gt; <span class="title">deq</span><span class="params">(first, last)</span></span>;  <span class="comment">// 使用迭代器first、last范围内的元素初始化deq</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-常用方法"><a href="#1-2-2-常用方法" class="headerlink" title="1.2.2 常用方法"></a>1.2.2 常用方法</h3><ul>
<li>deq[]：用来访问双向队列中单个的元素。</li>
<li>deq.front()：返回第一个元素的引用。</li>
<li>deq.back()：返回最后一个元素的引用。</li>
<li>deq.push_front(x)：把元素x插入到双向队列的头部。</li>
<li>deq.pop_front()：弹出双向队列的第一个元素。</li>
<li>deq.push_back(x)：把元素x插入到双向队列的尾部。</li>
<li>deq.pop_back()：弹出双向队列的最后一个元素。</li>
</ul>
<h3 id="1-2-3-与Vector的区别"><a href="#1-2-3-与Vector的区别" class="headerlink" title="1.2.3 与Vector的区别"></a>1.2.3 与Vector的区别</h3><ul>
<li>Vector是单向开口的连续线性空间，deque则是一种双向开口的连续线性空间。</li>
<li>deque对象在队列的两端放置元素和删除元素是高效的，而向量vector只是在插入序列的末尾时操作才是高效的。</li>
<li>deque和vector的最大差异，一在于deque允许于常数时间内对头端进行元素的插入或移除操作，二在于deque没有所谓的capacity观念，因为它是动态地以分段连续空间组合而成，随时可以增加一段新的空间并链接起来。换句话说，像vector那样“因旧空间不足而重新配置一块更大空间，然后复制元素，再释放旧空间”这样的事情在deque中是不会发生的。也因此，deque没有必要提供所谓的空间预留（reserved）功能</li>
</ul>
<h2 id="1-3-queue"><a href="#1-3-queue" class="headerlink" title="1.3 queue"></a>1.3 queue</h2><ul>
<li>队列容器，只能在容器的末尾添加新元素，只能从头部移除元素</li>
</ul>
<img src="/2022/10/10/C%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8/queue.png" class="" title="queue">
<ul>
<li>front()：返回 queue 中第一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</li>
<li>back()：返回 queue 中最后一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</li>
<li>push(const T&amp; obj)：在 queue 的尾部添加一个元素的副本。这是通过调用底层容器的成员函数 push_back() 来完成的。</li>
<li>push(T&amp;&amp; obj)：以移动的方式在 queue 的尾部添加元素。这是通过调用底层容器的具有右值引用参数的成员函数 push_back() 来完成的。</li>
<li>pop()：删除 queue 中的第一个元素。</li>
<li>size()：返回 queue 中元素的个数。</li>
<li>empty()：如果 queue 中没有元素的话，返回 true。</li>
<li>emplace()：用传给 emplace() 的参数调用 T 的构造函数，在 queue 的尾部生成对象。</li>
<li>swap(queue\<T\> &amp;other_q)：将当前 queue 中的元素和参数 queue 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</li>
</ul>
<h2 id="1-4-stack"><a href="#1-4-stack" class="headerlink" title="1.4 stack"></a>1.4 stack</h2><img src="/2022/10/10/C%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E5%AE%B9%E5%99%A8/stack.png" class="" title="stack">
<ul>
<li>top()：返回一个栈顶元素的引用，类型为 T&amp;。如果栈为空，返回值未定义。</li>
<li>push(const T&amp; obj)：可以将对象副本压入栈顶。这是通过调用底层容器的 push_back() 函数完成的。</li>
<li>push(T&amp;&amp; obj)：以移动对象的方式将对象压入栈顶。这是通过调用底层容器的有右值引用参数的 push_back() 函数完成的。</li>
<li>pop()：弹出栈顶元素。</li>
<li>size()：返回栈中元素的个数。</li>
<li>empty()：在栈中没有元素的情况下返回 true。</li>
<li>emplace()：用传入的参数调用构造函数，在栈顶生成对象。</li>
<li>swap(stack\<T\> &amp; other_stack)：将当前栈中的元素和参数中的元素交换。参数所包含元素的类型必须和当前栈的相同。对于 stack 对象有一个特例化的全局函数 swap() 可以使用。</li>
</ul>
<h2 id="1-5-priority-queue"><a href="#1-5-priority-queue" class="headerlink" title="1.5 priority_queue"></a>1.5 priority_queue</h2><ul>
<li>维护一个堆的数据结构，可以是最大堆，也可以是最小堆</li>
<li><p>top() 访问队头元素</p>
</li>
<li><p>empty() 队列是否为空</p>
</li>
<li>size() 返回队列内元素个数</li>
<li>push() 插入元素到队尾 (并排序)</li>
<li>emplace() 原地构造一个元素并插入队列</li>
<li>pop() 弹出队头元素</li>
<li>swap() 交换内容</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//升序队列，小顶堆</span></span><br><span class="line">priority_queue &lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="comment">//降序队列，大顶堆</span></span><br><span class="line">priority_queue &lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,less&lt;<span class="keyword">int</span>&gt; &gt;q;</span><br></pre></td></tr></table></figure>
<h2 id="1-6-List"><a href="#1-6-List" class="headerlink" title="1.6 List"></a>1.6 List</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>assign() 给list赋值</li>
<li>back() 返回最后一个元素</li>
<li>begin() 返回指向第一个元素的迭代器</li>
<li>clear() 删除所有元素</li>
<li>empty() 如果list是空的则返回true</li>
<li>end() 返回末尾的迭代器</li>
<li>erase() 删除一个元素</li>
<li>front() 返回第一个元素</li>
<li>get_allocator() 返回list的配置器</li>
<li>insert() 插入一个元素到list中</li>
<li>max_size() 返回list能容纳的最大元素数量</li>
<li>merge() 合并两个list</li>
<li>pop_back() 删除最后一个元素</li>
<li>pop_front() 删除第一个元素</li>
<li>push_back() 在list的末尾添加一个元素</li>
<li>push_front() 在list的头部添加一个元素</li>
<li>rbegin() 返回指向第一个元素的逆向迭代器</li>
<li>remove() 从list删除元素</li>
<li>remove_if() 按指定条件删除元素</li>
<li>rend() 指向list末尾的逆向迭代器</li>
<li>resize() 改变list的大小</li>
<li>reverse() 把list的元素倒转</li>
<li>size() 返回list中的元素个数</li>
<li>sort() 给list排序</li>
<li>splice() 合并两个list</li>
<li>swap() 交换两个list</li>
<li>unique() 删除list中相邻重复的元素</li>
</ul>
<h1 id="二、关联式容器"><a href="#二、关联式容器" class="headerlink" title="二、关联式容器"></a>二、关联式容器</h1><h2 id="2-1-map"><a href="#2-1-map" class="headerlink" title="2.1 map"></a>2.1 map</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map和multimap都需要#include&lt;map&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>begin()：返回指向map头部的迭代器</li>
<li>clear()：删除所有元素</li>
<li>count()：返回指定元素出现的次数</li>
<li>empty()：如果map为空则返回true</li>
<li>end()：返回指向map末尾的迭代器</li>
<li>equal_range()：返回特殊条目的迭代器对</li>
<li>erase()：删除一个元素</li>
<li>find()：查找一个元素</li>
<li>get_allocator()：返回map的配置器</li>
<li>insert()：插入元素</li>
<li>key_comp()：返回比较元素key的函数</li>
<li>lower_bound()：返回键值&gt;=给定元素的第一个位置</li>
<li>max_size()：返回可以容纳的最大元素个数</li>
<li>rbegin()：返回一个指向map尾部的逆向迭代器</li>
<li>rend()：返回一个指向map头部的逆向迭代器</li>
<li>size()：返回map中元素的个数</li>
<li>swap()：交换两个map</li>
<li>upper_bound()：返回键值&gt;给定元素的第一个位置</li>
<li>value_comp()：返回比较元素value的函数</li>
</ul>
<h2 id="2-2-unordered-map"><a href="#2-2-unordered-map" class="headerlink" title="2.2 unordered_map"></a>2.2 unordered_map</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line">unordered_map&lt;string,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="comment">//迭代器遍历</span></span><br><span class="line">unordered_map&lt;string,<span class="keyword">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=mp.<span class="built_in">begin</span>();iter!=mp.<span class="built_in">end</span>();iter++)&#123;</span><br><span class="line">    cout&lt;&lt;iter-&gt;first&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//:遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[name,value]:mp)&#123;</span><br><span class="line">    cout&lt;&lt;name&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;value&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-set"><a href="#2-3-set" class="headerlink" title="2.3 set"></a>2.3 set</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constructing sets</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fncomp</span> <span class="params">(<span class="keyword">int</span> lhs, <span class="keyword">int</span> rhs)</span> </span>&#123;<span class="keyword">return</span> lhs&lt;rhs;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">classcomp</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; lhs, <span class="keyword">const</span> <span class="keyword">int</span>&amp; rhs)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;<span class="keyword">return</span> lhs&lt;rhs;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::set&lt;<span class="keyword">int</span>&gt; first;                           <span class="comment">// empty set of ints</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> myints[]= &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">  <span class="function">std::set&lt;<span class="keyword">int</span>&gt; <span class="title">second</span> <span class="params">(myints,myints+<span class="number">5</span>)</span></span>;        <span class="comment">// range</span></span><br><span class="line"></span><br><span class="line">  <span class="function">std::set&lt;<span class="keyword">int</span>&gt; <span class="title">third</span> <span class="params">(second)</span></span>;                  <span class="comment">// a copy of second</span></span><br><span class="line"></span><br><span class="line">  <span class="function">std::set&lt;<span class="keyword">int</span>&gt; <span class="title">fourth</span> <span class="params">(second.begin(), second.end())</span></span>;  <span class="comment">// iterator ctor.</span></span><br><span class="line"></span><br><span class="line">  std::set&lt;<span class="keyword">int</span>,classcomp&gt; fifth;                 <span class="comment">// class as Compare</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in"><span class="keyword">bool</span></span>(*fn_pt)(<span class="keyword">int</span>,<span class="keyword">int</span>) = fncomp;</span><br><span class="line">  <span class="function">std::set&lt;<span class="keyword">int</span>,<span class="title">bool</span><span class="params">(*)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span>&gt; <span class="title">sixth</span> <span class="params">(fn_pt)</span></span>;  <span class="comment">// function pointer as Compare</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>begin()：返回指向第一个元素的迭代器</li>
<li>clear()：清除所有元素</li>
<li>count()：返回某个值元素的个数</li>
<li>empty()：如果集合为空，返回true</li>
<li>end()：返回指向最后一个元素的迭代器</li>
<li>equal_range()：返回集合中与给定值相等的上下限的两个迭代器</li>
<li>erase()：删除集合中的元素</li>
<li>find()：返回一个指向被查找到元素的迭代器</li>
<li>get_allocator()：返回集合的分配器</li>
<li>insert()：在集合中插入元素</li>
<li>lower_bound()：返回指向大于（或等于）某值的第一个元素的迭代器</li>
<li>key_comp()：返回一个用于元素间值比较的函数</li>
<li>max_size()：返回集合能容纳的元素的最大限值</li>
<li>rbegin()：返回指向集合中最后一个元素的反向迭代器</li>
<li>rend()：返回指向集合中第一个元素的反向迭代器</li>
<li>size()：集合中元素的数目</li>
<li>swap()：交换两个集合变量</li>
<li>upper_bound()：返回大于某个值元素的迭代器</li>
<li>value_comp()：返回一个用于比较元素间的值的函数</li>
</ol>
<h2 id="2-4-unordered-set"><a href="#2-4-unordered-set" class="headerlink" title="2.4 unordered_set"></a>2.4 unordered_set</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// constructing unordered_sets</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">cmerge</span> <span class="params">(T a, T b)</span> </span>&#123; <span class="function">T <span class="title">t</span><span class="params">(a)</span></span>; t.<span class="built_in">insert</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>()); <span class="keyword">return</span> t; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::unordered_set&lt;std::string&gt; first;                                <span class="comment">// empty</span></span><br><span class="line">  <span class="function">std::unordered_set&lt;std::string&gt; <span class="title">second</span> <span class="params">( &#123;<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>&#125; )</span></span>;    <span class="comment">// init list</span></span><br><span class="line">  <span class="function">std::unordered_set&lt;std::string&gt; <span class="title">third</span> <span class="params">( &#123;<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;pink&quot;</span>,<span class="string">&quot;yellow&quot;</span>&#125; )</span></span>; <span class="comment">// init list</span></span><br><span class="line">  <span class="function">std::unordered_set&lt;std::string&gt; <span class="title">fourth</span> <span class="params">( second )</span></span>;                    <span class="comment">// copy</span></span><br><span class="line">  <span class="function">std::unordered_set&lt;std::string&gt; <span class="title">fifth</span> <span class="params">( cmerge(third,fourth) )</span></span>;       <span class="comment">// move</span></span><br><span class="line">  <span class="function">std::unordered_set&lt;std::string&gt; <span class="title">sixth</span> <span class="params">( fifth.begin(), fifth.end() )</span></span>; <span class="comment">// range</span></span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;sixth contains:&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> std::string&amp; x: sixth) std::cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x;</span><br><span class="line">  std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>主要方法与set类似</li>
<li>emplace(key)：插入元素</li>
</ul>
<h2 id="2-5-pair"><a href="#2-5-pair" class="headerlink" title="2.5 pair"></a>2.5 pair</h2><h3 id="2-5-1-概述"><a href="#2-5-1-概述" class="headerlink" title="2.5.1 概述"></a>2.5.1 概述</h3><ul>
<li>pair是c++的一种数据类型，在头文件utility中</li>
</ul>
<h3 id="2-5-2-使用"><a href="#2-5-2-使用" class="headerlink" title="2.5.2 使用"></a>2.5.2 使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">pair&lt;string, string&gt; <span class="title">a</span><span class="params">(<span class="string">&quot;James&quot;</span>, <span class="string">&quot;Joy&quot;</span>)</span></span>;</span><br><span class="line">string name,last;</span><br><span class="line">name = pair.first;</span><br><span class="line">lase = pair.second;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给属性赋值</span></span><br><span class="line">newone = <span class="built_in">make_pair</span>(name, last);</span><br></pre></td></tr></table></figure>
<h3 id="2-5-3-priority-queue中的pair"><a href="#2-5-3-priority-queue中的pair" class="headerlink" title="2.5.3 priority_queue中的pair"></a>2.5.3 priority_queue中的pair</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; a;</span><br><span class="line">	<span class="function">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">1</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">	<span class="function">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="function">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">6</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">	a.<span class="built_in">push</span>(d);</span><br><span class="line">	a.<span class="built_in">push</span>(c);</span><br><span class="line">	a.<span class="built_in">push</span>(b);</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span> (!a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		cout&lt;&lt;a.<span class="built_in">top</span>().first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a.<span class="built_in">top</span>().second&lt;&lt;endl;</span><br><span class="line">		a.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">比较第一个，若相同，则比较第2个</span></span><br><span class="line"><span class="comment">6 1</span></span><br><span class="line"><span class="comment">1 5</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-4-sort"><a href="#2-5-4-sort" class="headerlink" title="2.5.4 sort()"></a>2.5.4 sort()</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lambda表达式自定义排序，以下为降序排列</span></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),[](<span class="keyword">const</span> <span class="keyword">int</span> a,<span class="keyword">const</span> <span class="keyword">int</span> b)&#123;<span class="keyword">return</span> a&gt;b;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将自定义排序方式放在sort()外</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;<span class="comment">//从大到小排序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),cmp);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>unreal</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语法基础大全-面向对象</title>
    <url>/2022/10/10/C%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="一、结构体"><a href="#一、结构体" class="headerlink" title="一、结构体"></a>一、结构体</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>C++中的结构体可以定义函数，C语言中的结构体只能定义变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span>&#123;</span></span><br><span class="line">    <span class="built_in">Sales_data</span>() = <span class="keyword">default</span>;	<span class="comment">// = default表示默认的构造函数</span></span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="keyword">const</span> std::string &amp;s):<span class="built_in">bookNo</span>(s)&#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(<span class="keyword">const</span> std::string &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):<span class="built_in">bookNo</span>(s),<span class="built_in">units_sold</span>(n),<span class="built_in">revenue</span>(p*n)&#123;&#125;</span><br><span class="line">    <span class="built_in">Sales_data</span>(std::istream &amp;);	<span class="comment">// 没有加形参名表示只是声明类型，但没有实现，实现时需要加上形参名</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">std::string <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    std::string bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外实现</span></span><br><span class="line">Sales_data::<span class="built_in">Sales_data</span>(std::istream &amp;is)&#123;</span><br><span class="line">    <span class="built_in">read</span>(is, *<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="1-2-动态内存分配"><a href="#1-2-动态内存分配" class="headerlink" title="1.2 动态内存分配"></a>1.2 动态内存分配</h2><ul>
<li>new/delete分配堆空间可以调用类的构造函数/析构函数</li>
<li>malloc/free只是一个函数调用，不会调用构造函数/析构函数，malloc接受的参数是一个unsigned long类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Time *t2 = <span class="keyword">new</span> <span class="built_in">Time</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">delete</span> t2;</span><br><span class="line"></span><br><span class="line">Time *t1 = (Time*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Time));</span><br><span class="line"><span class="built_in">free</span>(t1);</span><br></pre></td></tr></table></figure>
<h1 id="二、类"><a href="#二、类" class="headerlink" title="二、类"></a>二、类</h1><h2 id="2-1-类的定义"><a href="#2-1-类的定义" class="headerlink" title="2.1 类的定义"></a>2.1 类的定义</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//公共的行为或属性</span></span><br><span class="line">    <span class="built_in">ClassName</span>();	<span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">ClassName</span>(string x);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string x)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    ~<span class="built_in">ClassName</span>();	<span class="comment">// 析构函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//私有成员</span></span><br><span class="line">    string x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外实现</span></span><br><span class="line">ClassName::<span class="built_in">ClassName</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;x = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;开始创建对象：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassName::<span class="built_in">ClassName</span>(string x) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClassName::setName</span><span class="params">(string x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">ClassName::getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassName::~<span class="built_in">ClassName</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;销毁对象：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassName *cn = <span class="keyword">new</span> <span class="built_in">ClassName</span>();</span><br><span class="line"></span><br><span class="line">    cn-&gt;<span class="built_in">setName</span>(<span class="string">&quot;hello gaoyue&quot;</span>);</span><br><span class="line">    cout&lt;&lt;cn-&gt;<span class="built_in">getName</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> cn;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">开始创建对象：hello world</span></span><br><span class="line"><span class="comment">hello gaoyue</span></span><br><span class="line"><span class="comment">销毁对象：hello gaoyue</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="2-1-1-对象的创建"><a href="#2-1-1-对象的创建" class="headerlink" title="2.1.1 对象的创建"></a>2.1.1 对象的创建</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认无参构造</span></span><br><span class="line"><span class="comment">// 显示使用</span></span><br><span class="line">ClassName cn = <span class="built_in">ClassName</span>();	<span class="comment">// 无法delete，会调用构造函数，程序结束后会调用析构函数</span></span><br><span class="line"><span class="comment">// 隐式使用</span></span><br><span class="line">ClassName cn;</span><br><span class="line"><span class="comment">// new创建</span></span><br><span class="line">ClassName *cn = <span class="keyword">new</span> ClassName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参构造</span></span><br><span class="line"><span class="comment">// 显示使用</span></span><br><span class="line">ClassName cn = <span class="built_in">ClassName</span>(<span class="string">&quot;hello gaoyue&quot;</span>);</span><br><span class="line"><span class="comment">// 隐式使用</span></span><br><span class="line"><span class="function">ClassName <span class="title">cn</span><span class="params">(<span class="string">&quot;hello gaoyue&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// new创建</span></span><br><span class="line">ClassName *cn = <span class="keyword">new</span> <span class="built_in">ClassName</span>(<span class="string">&quot;hello gaoyue&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-1-2-const成员函数"><a href="#2-1-2-const成员函数" class="headerlink" title="2.1.2 const成员函数"></a>2.1.2 const成员函数</h3><p>有时候，我们创建了一个对象，但是事实上，我们只希望这个对象初始化之后不被改变，它可以是一个真理或者是什么，就是不能被改变</p>
<p>然后我们就十分自然的想到<strong>const创建一个对象</strong>。以下面的代码为例,但是后面发现就算是调用对象中不会改变值的<code>showInfo()</code>函数的时候，也会报错。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ClassName *cn = <span class="keyword">new</span> <span class="built_in">ClassName</span>();</span><br></pre></td></tr></table></figure>
<p>如果这个常量对象想要调用不改变值的方法，那么这个方法上也必须加上const关键字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">ClassName::getName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-3-友元函数"><a href="#2-1-3-友元函数" class="headerlink" title="2.1.3 友元函数"></a>2.1.3 友元函数</h3><ul>
<li>某非成员函数在类中被声明为友元函数，其可以直接访问类中的成员变量（包括私有和保护）</li>
<li><strong>使普通函数能够访问类的友元</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">INTEGER</span>&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> INTEGER&amp; obj)</span></span>;<span class="comment">//声明友元函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> INTEGER&amp; obj）&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">　　 <span class="comment">//函数体</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">void</span> main()&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">　　INTEGER obj;</span></span></span><br><span class="line"><span class="params"><span class="function">　　Print(obj);<span class="comment">//直接调用</span></span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br></pre></td></tr></table></figure>
<h3 id="2-1-4-友元类"><a href="#2-1-4-友元类" class="headerlink" title="2.1.4 友元类"></a>2.1.4 友元类</h3><ul>
<li><strong>类Y的所有成员函数都为类X友元函数</strong></li>
<li>使用单个声明使Y类的所有函数成为类X的友元，它提供一种类之间合作的一种方式，使类Y的对象可以具有类X和类Y的功能。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">girl</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">boy</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">　　<span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">(girl &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">boy::disp</span><span class="params">(girl &amp;x)</span></span>&#123; <span class="comment">//函数disp()为类boy的成员函数，也是类girl的友元函数</span></span><br><span class="line">　　cout&lt;&lt;<span class="string">&quot;girl&#x27;s name is:&quot;</span>&lt;&lt;x.name&lt;&lt;<span class="string">&quot;,age:&quot;</span>&lt;&lt;x.age&lt;&lt;endl;<span class="comment">//借助友元，在boy的成员函数disp中，借助girl的对象，直接访问girl的私有变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">girl</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>：</span><br><span class="line">　　<span class="keyword">char</span> *name;</span><br><span class="line">　　<span class="keyword">int</span> age;</span><br><span class="line">　　<span class="keyword">friend</span> boy; <span class="comment">//声明类boy是类girl的友元</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>成员函数有this指针，而友元函数没有this指针</li>
<li>友元函数是不能被继承的，就像父亲的朋友未必是儿子的朋友</li>
<li>友元函数的调用无需通过对象调用，而是同调用普通函数一样被调用</li>
</ul>
<h2 id="2-2-构造函数与析构函数"><a href="#2-2-构造函数与析构函数" class="headerlink" title="2.2 构造函数与析构函数"></a>2.2 构造函数与析构函数</h2><h2 id="2-3-继承与多态"><a href="#2-3-继承与多态" class="headerlink" title="2.3 继承与多态"></a>2.3 继承与多态</h2>]]></content>
      <categories>
        <category>游戏开发</category>
        <category>unreal</category>
      </categories>
      <tags>
        <tag>结构体</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud基础大全-服务降级</title>
    <url>/2022/10/27/SpringCloud%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8-%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="一、Hystrix"><a href="#一、Hystrix" class="headerlink" title="一、Hystrix"></a>一、Hystrix</h1><h2 id="1-1-服务雪崩"><a href="#1-1-服务雪崩" class="headerlink" title="1.1 服务雪崩"></a>1.1 服务雪崩</h2><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p>
<p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p>
<p>通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</p>
<ul>
<li>服务降级：<ul>
<li>超时导致服务器变慢—-&gt;超时不再等待—-&gt;服务降级</li>
<li>出错（宕机或程序运行出错）—-&gt;出错有兜底—-&gt;服务降级</li>
</ul>
</li>
<li>服务熔断：</li>
<li>服务限流：</li>
</ul>
<h2 id="1-2-Hystrix概念"><a href="#1-2-Hystrix概念" class="headerlink" title="1.2 Hystrix概念"></a>1.2 Hystrix概念</h2><p>Hystrix是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</p>
<p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝)，向调用方返回一个符合预期的、可处理的备选响应（FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<p>Hystrix的作用：</p>
<ul>
<li>服务降级</li>
<li>服务熔断</li>
<li>接近实时监控</li>
</ul>
<h2 id="1-3-服务端实现"><a href="#1-3-服务端实现" class="headerlink" title="1.3 服务端实现"></a>1.3 服务端实现</h2><h3 id="1-3-1-依赖配置"><a href="#1-3-1-依赖配置" class="headerlink" title="1.3.1 依赖配置"></a>1.3.1 依赖配置</h3><ul>
<li>创建项目cloud-provider-hystrix-payment8001</li>
<li>引入Hystrix依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-hystrix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-2-创建业务类"><a href="#1-3-2-创建业务类" class="headerlink" title="1.3.2 创建业务类"></a>1.3.2 创建业务类</h3><ul>
<li>创建启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建service层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//正常访问，肯定不会报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池： &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  paymentInfo_OK,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟超时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);	<span class="comment">// 等待3秒</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池： &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  paymentInfo_OK,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="string">&quot;   耗时&quot;</span>+timeNumber+<span class="string">&quot;秒钟&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建controller层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*********result:&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*********result:&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-3-启动流程"><a href="#1-3-3-启动流程" class="headerlink" title="1.3.3 启动流程"></a>1.3.3 启动流程</h3><p>注意启动时先将eureka服务注册中心修改为单机版，主要是为了简单</p>
<ul>
<li>启动eureka7001</li>
<li>启动cloud-provider-hystrix-payment8001</li>
<li>访问接口</li>
</ul>
<h2 id="1-4-高并发测试"><a href="#1-4-高并发测试" class="headerlink" title="1.4 高并发测试"></a>1.4 高并发测试</h2><h2 id="1-5-客户端实现"><a href="#1-5-客户端实现" class="headerlink" title="1.5 客户端实现"></a>1.5 客户端实现</h2><ul>
<li>客户端和服务端的创建都是类似的</li>
<li>创建工程cloud-consumer-feign-hystrix-order8080</li>
<li>配置yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动类OrderHystrixMain8080</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain8080</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain8080.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>业务接口PaymentHystrixService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-HYSTRIX-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>请求类OrderHystrixController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-6-服务降级"><a href="#1-6-服务降级" class="headerlink" title="1.6 服务降级"></a>1.6 服务降级</h2><ul>
<li><p>服务降级可以配置在服务端，也可以配置客户端，一般会配置在客户端</p>
</li>
<li><p>主启动类使用@EnableCircuitBreaker开启降级，并添加@EnableHystrix开启Hystrix</p>
</li>
<li>方法上使用@HystrixCommand注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;,commandProperties=&#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value=&quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);	<span class="comment">// 等待3秒</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池： &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  paymentInfo_OK,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="string">&quot;   耗时&quot;</span>+timeNumber+<span class="string">&quot;秒钟&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;接口调用异常：\t&quot;</span>+<span class="string">&quot;当前线程名称\t&quot;</span>+Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>yml配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">	<span class="attr">hystrix:</span></span><br><span class="line">		<span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在接口类上添加注解@DefaultProperties启动默认服务降级方法配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;paymentInfo_TimeOutHandler&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>	<span class="comment">// HystrixCommand还是要在需要降级的请求方法上加上</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);	<span class="comment">// 等待3秒</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池： &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;  paymentInfo_OK,id:  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>+<span class="string">&quot;   耗时&quot;</span>+timeNumber+<span class="string">&quot;秒钟&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;接口调用异常：\t&quot;</span>+<span class="string">&quot;当前线程名称\t&quot;</span>+Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-7-服务降级解耦"><a href="#1-7-服务降级解耦" class="headerlink" title="1.7 服务降级解耦"></a>1.7 服务降级解耦</h2><ul>
<li>因为目前兜底方法和接口方法写在了同一个接口类中，这样如果为每一个接口方法添加一个兜底方法就会导致代码冗余</li>
<li>那么我们就可以考虑新建一个类用来实现业务接口，将兜底方法都写在这个类中，这样就解决了代码的冗余</li>
<li>接下来的服务降级都配置在客户端，创建PaymentFallbackService实现业务接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------PaymentHystrixService fall back-paymentInfo_OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------PaymentHystrixService fall back-paymentInfo_TimeOut&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在业务类上的@FeignClient上添加fallback属性，将上面的实现类注册进Feign中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-HYSTRIX-SERVICE&quot; fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
        <category>微服务</category>
      </categories>
  </entry>
  <entry>
    <title>乐理进阶大全-吉他练习</title>
    <url>/2022/11/13/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E5%90%89%E4%BB%96%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="一、基础练习"><a href="#一、基础练习" class="headerlink" title="一、基础练习"></a>一、基础练习</h1><h2 id="1-1-音阶练习"><a href="#1-1-音阶练习" class="headerlink" title="1.1 音阶练习"></a>1.1 音阶练习</h2><ul>
<li>指板音阶分布</li>
</ul>
<h2 id="1-2-节奏练习"><a href="#1-2-节奏练习" class="headerlink" title="1.2 节奏练习"></a>1.2 节奏练习</h2><ul>
<li>四分音符、八分音符、十六分音符、三十二分音符、休止符</li>
<li>切分音符、附点八分音符、延音、三连音</li>
<li>前八后十六、前十六后八</li>
<li>扫弦节奏型</li>
</ul>
<h2 id="1-3-和声练习"><a href="#1-3-和声练习" class="headerlink" title="1.3 和声练习"></a>1.3 和声练习</h2><ul>
<li>和弦转换、和弦转位、三和弦、七和弦</li>
<li>大小调音阶</li>
<li>分解和弦</li>
</ul>
<h2 id="1-3-技巧练习"><a href="#1-3-技巧练习" class="headerlink" title="1.3 技巧练习"></a>1.3 技巧练习</h2><ul>
<li>击弦、勾弦、滑弦、无尾滑音、闷弦、揉弦</li>
<li>打板</li>
</ul>
<h1 id="二、进阶练习"><a href="#二、进阶练习" class="headerlink" title="二、进阶练习"></a>二、进阶练习</h1>]]></content>
      <categories>
        <category>文化艺术</category>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>吉他</tag>
      </tags>
  </entry>
  <entry>
    <title>乐理进阶大全-流行音乐</title>
    <url>/2022/11/06/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E6%B5%81%E8%A1%8C%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<h1 id="一、常见和声套路"><a href="#一、常见和声套路" class="headerlink" title="一、常见和声套路"></a>一、常见和声套路</h1><h2 id="1-1-卡农和弦"><a href="#1-1-卡农和弦" class="headerlink" title="1.1 卡农和弦"></a>1.1 卡农和弦</h2><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">1<span class="number"> 5 </span>6<span class="number"> 3 </span>4<span class="number"> 1 </span>2(4) 5</span><br><span class="line"></span><br><span class="line">C    G    Am Em     F   C         F    G</span><br><span class="line">忽然 之间 天昏 地暗 世界可 以忽然什么 都没有</span><br><span class="line"></span><br><span class="line">1<span class="number"> 7 </span>6<span class="number"> 5 </span>4<span class="number"> 3 </span>2 1(5)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>和弦进行</tag>
        <tag>流行音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>乐理进阶大全-音乐史</title>
    <url>/2022/11/12/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E9%9F%B3%E4%B9%90%E5%8F%B2/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>音乐风格经历了许多艺术家的发展，到如今合成器的泛滥，让音乐制作的门槛降低了许多，音乐风格发展的脉络主要有以下几种：</p>
<ul>
<li>古典音乐</li>
<li>布鲁斯</li>
<li>爵士，爵士布鲁斯的结合</li>
<li>摇滚乐</li>
<li>重金属</li>
</ul>
<p>不同的音乐风格有着不同的特点，比如布鲁斯就用到了许多切分节奏，爵士乐则大量使用到了7和弦、9和弦等复杂和弦，听感上色彩比较丰富</p>
<h1 id="二、布鲁斯"><a href="#二、布鲁斯" class="headerlink" title="二、布鲁斯"></a>二、布鲁斯</h1><p>布鲁斯音阶：<em>1、b3、4、b5、5、b7</em>或者<em>6、1、2、b3、3、5</em></p>
<p>标准的12小节E调布鲁斯进行如下：</p>
<img src="/2022/11/12/%E4%B9%90%E7%90%86%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8-%E9%9F%B3%E4%B9%90%E5%8F%B2/norm12.png" class="" title="norm12">
<p>Shuffle、Swing、Riff节奏</p>
<p>Shuffle/Swing：一种摇摆的节奏型，具体来说就是将三连音中间的音符换成延音或者休止符</p>
<p>Riff：对某一特定片段的重复演奏，可以用来丰富Swing的节奏感</p>
<p>强力和弦，在很多人的理解中是由两个音组成的，一个是根音，一个是向上的五音。其实，重力和弦应该有一个更准确的叫法，以这里的E重力和弦为例，我们可以称它为E5和弦，因为它没有3音</p>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>文化艺术</tag>
      </tags>
  </entry>
</search>
