<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1、创建型模式概述</title>
    <url>/2021/07/09/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>创建型模式的主要关注点是“怎样创建对象”</li>
<li>将对象的创建与使用分离，这样可以降低系统耦合度，使用者不需要关注对象的创建细节</li>
<li>对象的创建由工厂来完成</li>
</ul>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul>
<li>单例模式Singleton</li>
<li>原型模式Prototype</li>
<li>工厂模式Factory Method</li>
<li>抽象工厂模式Abstract Factory</li>
<li>建造者模式Builder</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java设计模式</category>
      </categories>
      <tags>
        <tag>创建型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>2、单例模式</title>
    <url>/2021/07/09/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>一个类只有一个实例，且该类能自行创建这个实例的一种模式</li>
<li>比如windows的任务管理器、回收站、应用程序的日志对象、网站的计数器等等，一般都设计为单例</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>单例类只有一个实例对象</li>
<li>该单例对象必须由单例类自行创建</li>
<li>单例类对外提供一个访问该单例的全局访问点</li>
</ul>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul>
<li>单例类：包含一个实例且能自行创建这个实例的类</li>
<li>访问类：使用单例的类</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><ul>
<li>特点：类加载时没有生成实例，只有第一次调用getInstance方法时才去创建这个单例</li>
<li>编写多线程程序时，关键字volatile和synchronized不能删除，否则存在线程不安全的问题，但缺点是影响性能，会消耗更多的资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton instance=<span class="keyword">null</span>;  <span class="comment">//保证instance在所有线程中同步</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span></span>&#123;&#125;   <span class="comment">// private避免类在外部被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  <span class="comment">//getInstance方法前加同步</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</span><br><span class="line">            instance=<span class="keyword">new</span> LazySingleton();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h3><ul>
<li>特点：类一旦加载就创建一个单例，保证在调用getInstance方法之前单例就已经存在了</li>
<li>饿汉式由于其特点，所以是线程安全的，可以直接用于多线程而不会出现问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton instance=<span class="keyword">new</span> HungrySingleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>某类只要求生成一个对象的时候</li>
<li>当对象需要被共享的场合</li>
<li>当某类需要频繁实例化，而创建的对象又频繁被消耗的时候</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java设计模式</category>
      </categories>
      <tags>
        <tag>创建型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>3、原型模式</title>
    <url>/2021/07/09/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>通过传统的构造函数来创建对象，会比较复杂且耗时耗资源</li>
<li>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象</li>
<li>如：系统的复制</li>
</ul>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul>
<li>抽象原型类：规定了具体原型对象必须实现的接口</li>
<li>具体原型类：实现抽象原型类的clone()方法，它是可被复制的对象</li>
<li>访问类：使用具体原型类中的clone()方法来复制新的对象</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体原型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Realizetype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    Realizetype()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体原型创建成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体原型复制成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (Realizetype) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型模式的测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException</span>&#123;</span><br><span class="line">        Realizetype obj1=<span class="keyword">new</span> Realizetype();</span><br><span class="line">        Realizetype obj2=(Realizetype) obj1.clone();</span><br><span class="line">        System.out.println(<span class="string">&quot;obj1==obj2?&quot;</span>+(obj1==obj2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    运行结果：</span></span><br><span class="line"><span class="comment">    具体原型复制成功</span></span><br><span class="line"><span class="comment">    具体原型复制成功</span></span><br><span class="line"><span class="comment">    obj1==obj2?false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>对象之间相同或相似，即只是个别的几个属性不同的时候</li>
<li>对象的创建过程比较麻烦，但复制比较简单的时候</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java设计模式</category>
      </categories>
      <tags>
        <tag>创建型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>4、工厂方法模式</title>
    <url>/2021/07/09/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="定义与特点"><a href="#定义与特点" class="headerlink" title="定义与特点"></a>定义与特点</h2><ul>
<li>定义：定义一个创建产品对象 工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中</li>
<li>简单工厂模式：如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”， 它不属于 GoF 23 经典设计模式，它的缺点是增加新产品时会违背“开闭原则”</li>
</ul>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul>
<li>满足创建型模式中所要求<br>的“创建与使用相分离”的特点。我们把被创建的对象称为“产品”，把创建产品的对象称为“工厂”</li>
<li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程</li>
<li>在系统增加新的产品时只需要<br>添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改 ，满足开闭<br>原则。</li>
<li>缺点 每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类 ，这增加了系统<br>的复杂度</li>
</ul>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul>
<li>抽象工厂（Abstract Factory）：提供了创建产品的接口 ，调用者通过它访问具体工厂的工厂方法 newProduct（）来创建产品。</li>
<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法 完成具体产品的创建。</li>
<li>抽象产品（Product）：定义了产品的规范 描述了产品的主要特性和功能。</li>
<li>具体产品（Concrete Product）：：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FactoryMethod;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(string args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Product a;</span><br><span class="line">            AbstractFactory af;</span><br><span class="line">            af=(AbstractFactory) ReadXML1.getObject();</span><br><span class="line">            a=af.newProduct();</span><br><span class="line">            a.show();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象产品，提供了产品的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品1：实现抽象产品中的抽象方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体产品1显示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品2：实现抽象产品中的抽象方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体产品2显示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂1：提供了产品的生成方法</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">newProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂1：实现了产品的生成方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">newProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体工厂1生成-&gt;具体产品1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂2：实现了产品的生成方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">newProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体工厂2生成-&gt;具体产品2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteFactory2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="xml配置文件"><a href="#xml配置文件" class="headerlink" title="xml配置文件"></a>xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">className</span>&gt;</span>ConcreteFactory1<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对象生成器"><a href="#对象生成器" class="headerlink" title="对象生成器"></a>对象生成器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象生成器：从XML配置文件中提取具体工厂类的类名，并返回一个具体对象</span></span><br><span class="line"><span class="keyword">package</span> FactoryMethod</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.*;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadXML1</span></span>&#123;</span><br><span class="line">    <span class="comment">//该方法用于从xml配置文件中提取具体类类名，并返回一个实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建文档对象</span></span><br><span class="line">            DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder builder = dFactory.newDocumentBuilder();</span><br><span class="line">            Document doc = builder.parse(<span class="keyword">new</span> File(<span class="string">&quot;src/FactoryMethod/config1.xml&quot;</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获取包含类名的文本节点</span></span><br><span class="line">            NodeList n1 = doc.getElementByTagName(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">            Node classNode=n1.item(<span class="number">0</span>).getFirstChild();</span><br><span class="line">            String cName = <span class="string">&quot;FactoryMethod.&quot;</span>+classNode.getNodeValue();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//通过类名生成实例对象并将其返回</span></span><br><span class="line">            Class&lt;?&gt; c = Class.forName(cName);</span><br><span class="line">            Object obj = c.newInstance;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>客户只知道创建产品的工厂名，而不知道具体的产品名。如TCL电视工厂、海信电视工厂等。</li>
<li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口</li>
<li>客户不关心创建产品的细节，只关心产品的品牌</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java设计模式</category>
      </categories>
      <tags>
        <tag>创建型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>6、建造者模式</title>
    <url>/2021/07/09/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>它是将一个复杂的对象分解为多个简单的对 ，然后一步一步建而成。它将变与不变相分，即产品的组成部分是不变的，但每一部分是可以灵活选择的</li>
<li>计算机是由CPU、主板、内存、硬盘、显卡、机箱、显示器、键盘、鼠标等部件组装而成的，采购员不可能自己去组装计算机，而是将计算机的配置要求告诉计算书销售公司，计算机销售公司安排技术人员去组装计算机， 然后再交给要买计算机的采购员</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li> 具体的建造者相互独立，有利于系统的扩展。</li>
<li> 客户端不必知道产品内部组成的细节，便于控制细节风险。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>产品的组成部分必须相同，这限制了其使用范围。</li>
<li>如果产品的内部变化复杂，该模式会增加很多的建造者类。</li>
</ol>
<h2 id="与工厂模式的区别"><a href="#与工厂模式的区别" class="headerlink" title="与工厂模式的区别"></a>与工厂模式的区别</h2><ul>
<li>建造者模式和工厂模式的关注点不同，建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程，但两者可以结合使用。</li>
</ul>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul>
<li>产品角色Product：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个组成部件。</li>
<li>抽象建造者Builder：：它是 包含创建产品各个子部件的抽象方法的接口，通常还包个返回复杂产品的方法 getResult（）</li>
<li>具体建造者Concrete Builder：实现Builder接口，完成复杂产品的各个部件的具体创建方法</li>
<li>指挥者Director：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="产品角色：包含多个组成部件的复杂对象"><a href="#产品角色：包含多个组成部件的复杂对象" class="headerlink" title="产品角色：包含多个组成部件的复杂对象"></a>产品角色：包含多个组成部件的复杂对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String partA;</span><br><span class="line">    <span class="keyword">private</span> String partB;</span><br><span class="line">    <span class="keyword">private</span> String partC;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPartA</span><span class="params">(String partA)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.partA = partA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPartB</span><span class="params">(String partB)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.partB = partB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPartC</span><span class="params">(String partC)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.partC = partC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//显示产品的特性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象建造者：包含创建产品各个子部件的抽象方法"><a href="#抽象建造者：包含创建产品各个子部件的抽象方法" class="headerlink" title="抽象建造者：包含创建产品各个子部件的抽象方法"></a>抽象建造者：包含创建产品各个子部件的抽象方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建产品对象</span></span><br><span class="line">    <span class="keyword">protected</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回产品对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体建造者：实现了抽象建造者接口"><a href="#具体建造者：实现了抽象建造者接口" class="headerlink" title="具体建造者：实现了抽象建造者接口"></a>具体建造者：实现了抽象建造者接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        product.setPartA(<span class="string">&quot;建造PartA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        product.setPartB(<span class="string">&quot;建造PartB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        product.setPartC(<span class="string">&quot;建造PartC&quot;</span>);;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指挥者：调用建造者中的方法完成复杂对象的创建"><a href="#指挥者：调用建造者中的方法完成复杂对象的创建" class="headerlink" title="指挥者：调用建造者中的方法完成复杂对象的创建"></a>指挥者：调用建造者中的方法完成复杂对象的创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//产品构建与组装方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">        builder.buildPartC();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> builder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户类"><a href="#客户类" class="headerlink" title="客户类"></a>客户类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Builder builder = <span class="keyword">new</span> ConcreteBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(builder);</span><br><span class="line">        Product product = director.construct();</span><br><span class="line">        product.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是<br>稳定的。</li>
<li>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和<br>最终的表示是独立</li>
</ol>
<h2 id="模式的扩展"><a href="#模式的扩展" class="headerlink" title="模式的扩展"></a>模式的扩展</h2><ul>
<li>建造者模式在应用过程中可以根据需要改变，如果创建的产品种类只有一种，只需要一个具体<br>建造者时，可省略略掉抽象建造者，甚至可以省略掉指挥者角色。</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java设计模式</category>
      </categories>
      <tags>
        <tag>创建型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>5、抽象工厂模式</title>
    <url>/2021/07/09/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>抽象工厂模式将考虑多等级产品的生产 将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族</li>
<li>同等级：同种类称为同等级，也就是说 工厂方法模式只考虑生产同等级的产品</li>
<li>抽象工厂（Abstract Factory）模式：是一种为访问类提供一个创建一组相关或相互依赖对<br>象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机、计算机软件学院只培养计算机软件专业的学生等</li>
<li>在现实生活中许多工厂是综合型的工厂能生产多等级（种类）的产品，如农场里既养动物又种植物，电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等</li>
<li>工厂方法模式只生产一个等级的产品，而抽象工厂模式可生<br>产多个等级的产品。</li>
</ul>
<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ol>
<li>系统中有多个产品族，每个具体工厂 建同一族但属于不同等级结构的产品。</li>
<li>系统一次只可能消费其中某一族产品，即同族的产品一起使用。</li>
</ol>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进<br>行管理。</li>
<li>当增加一个新的产品族时不需要修改原代码， 满足开闭原则。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>当产品族 需要增加一个新的产品时，所有的工厂类都需要进行修改。</li>
</ul>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul>
<li>抽象工厂Abstract Factory：提供了创建产品的接口，它包含多个创建产品的方法<br>new Product（）， 以创建多个不同等级 产品。</li>
<li>具体工厂Concrete Factory：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建</li>
<li>抽象产品Product：：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>
<li>具体产品Concrete Product：）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li>
</ul>
<h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="/.com//2F019C268C7D4BBB87CB74DF341F3EC0" alt="image"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="抽象工厂：提供产品的生成方法"><a href="#抽象工厂：提供产品的生成方法" class="headerlink" title="抽象工厂：提供产品的生成方法"></a>抽象工厂：提供产品的生成方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product1 <span class="title">newProduct1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product2 <span class="title">newProduct2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体工厂：实现了产品的生成方法"><a href="#具体工厂：实现了产品的生成方法" class="headerlink" title="具体工厂：实现了产品的生成方法"></a>具体工厂：实现了产品的生成方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product1 <span class="title">newProduct1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体工厂1生成-&gt;具体产品11...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct11();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product2 <span class="title">newProduct2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体工厂1生成-&gt;具体产品21...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct21();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器 厂中的电视机衣机、空调等。</li>
<li>系统中有多个产品族 但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣<br>服和鞋</li>
<li>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构</li>
</ol>
<h2 id="模式的扩展"><a href="#模式的扩展" class="headerlink" title="模式的扩展"></a>模式的扩展</h2><ol>
<li>当增加一 新的产品族 只需增 一个<br>新的具体工厂，不需要修改原代码，满足开闭原则</li>
<li>当产品族中需要增加一 新种类的产品时，则所有的工厂类都需要进行修改，不满足开闭原则</li>
<li>当系统中只存在 个等级结构的产品时，抽象工厂模式将退化到工厂方法模式。</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java设计模式</category>
      </categories>
      <tags>
        <tag>创建型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>0、设计模式基础</title>
    <url>/2021/07/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="设计模式基础"><a href="#设计模式基础" class="headerlink" title="设计模式基础"></a>设计模式基础</h1><h2 id="一、GoF的23种设计模式及其功能"><a href="#一、GoF的23种设计模式及其功能" class="headerlink" title="一、GoF的23种设计模式及其功能"></a>一、GoF的23种设计模式及其功能</h2><ol>
<li>单例（ Singleton ）模式 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li>
<li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例</li>
<li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生存什么产品</li>
<li>抽象工厂（Abstract Factory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品</li>
<li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们</li>
<li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性</li>
<li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能在一起工作的那些类能一起工作</li>
<li>桥街（Bridge）模式：将抽象与实现分离，使它们可以独立变化，它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li>
<li>装饰（Decorator）模式：：动态的给对象增加一些职责，即增加其额外的功能</li>
<li>外观（ Facade ）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问</li>
<li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用</li>
<li>组合（ Composite ）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性</li>
<li>模板方法（ Templat Method ）模式：定义一个操作中的算法骨架 ，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</li>
<li>策略（ Strategy ）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户</li>
<li>命令（ Command ）模式：将一个请求封装为一个对象 ，使发出请求的责任和执行请求的责任分割开</li>
<li>职责链 （Chain of Responsibility ）模式：把请求从链中的一个对象传到下一个对象 ，直到请求被响应为止。通过这种方式去除对象之间的耦合</li>
<li>状态（ State ）模式：允许一个对象在其内部状态发生改变时改变其行为能力</li>
<li>观察者（ Observer 模式：多个对象间存在－对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为</li>
<li>中介者（ Mediator ）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解</li>
<li>迭代器 Iterator ）模式 提供一种方法来顺序访问聚合对象中的一系列数据 ，而不暴露聚合对象的内部表示</li>
<li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合种的每个元素提供多种访问方式，即每个元素有多个访问者对象访问</li>
<li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态以便以后恢复它</li>
<li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器</li>
</ol>
<h2 id="二、面向对象的设计原则"><a href="#二、面向对象的设计原则" class="headerlink" title="二、面向对象的设计原则"></a>二、面向对象的设计原则</h2><h3 id="2-1-开闭原则OCP"><a href="#2-1-开闭原则OCP" class="headerlink" title="2.1 开闭原则OCP"></a>2.1 开闭原则OCP</h3><ul>
<li>对扩展开放、对修改关闭</li>
<li>通过“抽象约束、封装变化”来实现开闭原则</li>
<li>抽象层设计的合理，可以基本保持软件架构的稳定</li>
<li>当软件需求发生变化时，只需要根据需求派生一个实现类来扩展就可以了</li>
</ul>
<h3 id="2-2-里氏替换原则LSP"><a href="#2-2-里氏替换原则LSP" class="headerlink" title="2.2 里氏替换原则LSP"></a>2.2 里氏替换原则LSP</h3><ul>
<li>子类可以扩展父类的功能，但不能改变父类原有的功能</li>
<li>简单来说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</li>
<li>作用：实现开闭原则的重要方式之一、提高父类可复用性、降低类的扩展出错的可能性</li>
<li>如果出现因重写父类方法而导致出错的情况，应该设计个更一般的类，重新组织类的继承关系</li>
</ul>
<h3 id="2-3-依赖倒置原则DIP"><a href="#2-3-依赖倒置原则DIP" class="headerlink" title="2.3 依赖倒置原则DIP"></a>2.3 依赖倒置原则DIP</h3><ul>
<li>要面向接口编程，不要面向实现编程</li>
<li>抽象层相对稳定，实现类较为多变</li>
<li>接口/抽象类的目的是制定好规范和契约，不去涉及任何具体的操作</li>
<li>具体细节的任务交给实现类完成</li>
<li>作用：降低了类间的耦合性、提高系统的稳定性、提高代码可读性和可维护性</li>
</ul>
<h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><ol>
<li>每个类尽量提供接口或抽象类，或者两者都具备</li>
<li>变量的声明类型尽量是接口或者是抽象类</li>
<li>任何类都不应该从具体类派生</li>
<li>使用继承时尽量遵循里氏替换原则</li>
</ol>
<h3 id="2-4-单一职责原则SRP"><a href="#2-4-单一职责原则SRP" class="headerlink" title="2.4 单一职责原则SRP"></a>2.4 单一职责原则SRP</h3><ul>
<li>一个类应该有且仅有一个引起它变化的原因，否则应该被拆分</li>
<li>承担太多职责的缺点：削弱类实现其他职责的能力、冗余代码</li>
<li>作用：降低类的复杂度、提高类的可读性、提高系统可维护性、变更引起的风险降低</li>
<li>实现方法：分析、设计、重构</li>
<li>同样适用于方法，方法应尽可能做好一件事情</li>
</ul>
<h3 id="2-5-接口隔离原则ISP"><a href="#2-5-接口隔离原则ISP" class="headerlink" title="2.5 接口隔离原则ISP"></a>2.5 接口隔离原则ISP</h3><ul>
<li>程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法</li>
<li>要为类建立它们需要的专用接口，而不要视图去建立一个很庞大的接口供所有依赖它的类去调用</li>
<li>作用：提高系统灵活性和可维护性、降低系统耦合性、提高系统内聚性、接口粒度大小要定义合理（太大太小都不好）、减少代码冗余、能够体现对象的层次<br>实现方法：一个接口只服务于一个子模块或业务逻辑、为依赖接口的类定制服务、深入了解环境/业务逻辑、使接口用最少的方法实现最多的事情</li>
</ul>
<h3 id="2-6-迪米特法则LKP"><a href="#2-6-迪米特法则LKP" class="headerlink" title="2.6 迪米特法则LKP"></a>2.6 迪米特法则LKP</h3><ul>
<li>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用</li>
<li>作用：降低类间耦合度、提高模块相对独立性、提高类的可复用性和系统的扩展性</li>
<li>过渡使用LKP会使系统产生大量的中介类，从而增加系统的复杂性，所以使用时要权衡好</li>
<li>实现方法：依赖者应该依赖应该依赖的对象、被依赖者只暴露应该暴露的方法</li>
<li>注意：应创建弱耦合的类、降低类成员的访问权限、优先考虑设计不变类、降低引用次数、不暴露属性成员（提供get和set）、进行使用序列化</li>
</ul>
<h3 id="2-7-合成复用原则CRP"><a href="#2-7-合成复用原则CRP" class="headerlink" title="2.7 合成复用原则CRP"></a>2.7 合成复用原则CRP</h3><ul>
<li>又称组合/聚合复用原则（CARP）</li>
<li>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</li>
<li>如果要使用继承关系，则必须严格遵循里氏代换原则</li>
<li>合成复用原则和里氏代换原则都是开闭原则的具体实现规范</li>
<li>类的复用包括：继承复用、合成复用</li>
</ul>
<h4 id="继承复用"><a href="#继承复用" class="headerlink" title="继承复用"></a>继承复用</h4><ul>
<li>破坏了类的封装性，父类暴露给子类</li>
<li>子类与父类耦合度高</li>
<li>限制了复用的灵活性，父类继承而来的实现是静态的，在编译时已经定义、所以在运行时不可能发生变化</li>
</ul>
<h4 id="合成复用"><a href="#合成复用" class="headerlink" title="合成复用"></a>合成复用</h4><ul>
<li>维持了类的封装性</li>
<li>新旧类之间的耦合度低</li>
<li>复用的灵活性高，可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java设计模式</category>
      </categories>
      <tags>
        <tag>设计模式原则</tag>
      </tags>
  </entry>
  <entry>
    <title>java面试宝典一</title>
    <url>/2022/02/22/java%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8%E4%B8%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>后端</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础大全</title>
    <url>/2022/02/22/js%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、JS基本操作"><a href="#一、JS基本操作" class="headerlink" title="一、JS基本操作"></a>一、JS基本操作</h1><h2 id="1-1-JS引入方式"><a href="#1-1-JS引入方式" class="headerlink" title="1.1 JS引入方式"></a>1.1 JS引入方式</h2><ul>
<li>第一种：内部标签<code>&lt;script&gt;&lt;/script&gt;</code></li>
<li>第二种：外部引入<code>&lt;script type=&quot;text/javascript&quot; src=&quot;./xxx.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
<h2 id="1-2-JS的6种数据类型"><a href="#1-2-JS的6种数据类型" class="headerlink" title="1.2 JS的6种数据类型"></a>1.2 JS的6种数据类型</h2><ul>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>object</li>
<li>function  函数</li>
</ul>
<h2 id="1-3-JS特殊值"><a href="#1-3-JS特殊值" class="headerlink" title="1.3 JS特殊值"></a>1.3 JS特殊值</h2><ul>
<li>Null      空值</li>
<li>Undefine  未定义</li>
<li>NAN       非数值</li>
</ul>
<h2 id="1-4-JS数组"><a href="#1-4-JS数组" class="headerlink" title="1.4 JS数组"></a>1.4 JS数组</h2><ul>
<li>var 数组名 = [1,’abc’]</li>
</ul>
<h2 id="1-5-JS循环"><a href="#1-5-JS循环" class="headerlink" title="1.5 JS循环"></a>1.5 JS循环</h2><h3 id="1-5-1-for"><a href="#1-5-1-for" class="headerlink" title="1.5.1 for"></a>1.5.1 for</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(语句<span class="number">1</span>;语句<span class="number">2</span>;语句<span class="number">3</span>)&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 对象名/数组名)&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5-2-while"><a href="#1-5-2-while" class="headerlink" title="1.5.2 while"></a>1.5.2 while</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;<span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure>
<h2 id="1-6-JS函数定义方式"><a href="#1-6-JS函数定义方式" class="headerlink" title="1.6 JS函数定义方式"></a>1.6 JS函数定义方式</h2><ul>
<li>第一种：function 函数名(形参列表){函数体}</li>
<li>第二种：var 函数名 = function(形参列表){函数体}</li>
<li>函数不允许重载</li>
<li>arguments：存放形参的数组，可以在函数体中直接调用，形参列表可以不写</li>
</ul>
<h2 id="1-7-JS对象的定义"><a href="#1-7-JS对象的定义" class="headerlink" title="1.7 JS对象的定义"></a>1.7 JS对象的定义</h2><h3 id="1-7-1-第一种"><a href="#1-7-1-第一种" class="headerlink" title="1.7.1 第一种"></a>1.7.1 第一种</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">变量名.属性名 = 值</span><br><span class="line">变量名.函数名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">this</span>关键字可以在函数体中使用</span><br></pre></td></tr></table></figure>
<h3 id="1-7-2-第二种"><a href="#1-7-2-第二种" class="headerlink" title="1.7.2 第二种"></a>1.7.2 第二种</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">    属性名:值,</span><br><span class="line">    属性名:值,</span><br><span class="line">    函数名:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="1-7-3-对象的访问"><a href="#1-7-3-对象的访问" class="headerlink" title="1.7.3 对象的访问"></a>1.7.3 对象的访问</h3><ul>
<li>对象名.属性名/函数名()</li>
</ul>
<h2 id="1-8-JS入口函数"><a href="#1-8-JS入口函数" class="headerlink" title="1.8 JS入口函数"></a>1.8 JS入口函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 开始编写JS代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-9-JS数组"><a href="#1-9-JS数组" class="headerlink" title="1.9 JS数组"></a>1.9 JS数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取不存在的索引，不会报错而会返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组长度，length表示最大的索引</span></span><br><span class="line"><span class="comment">//length可以修改，长了填充空值，短了截断</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="二、JS函数"><a href="#二、JS函数" class="headerlink" title="二、JS函数"></a>二、JS函数</h1><h2 id="2-1-函数的声明"><a href="#2-1-函数的声明" class="headerlink" title="2.1 函数的声明"></a>2.1 函数的声明</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参列表</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-函数对象"><a href="#2-2-函数对象" class="headerlink" title="2.2 函数对象"></a>2.2 函数对象</h2><ul>
<li>在JS中，函数名就代表了函数对象</li>
</ul>
<h2 id="2-3-匿名函数"><a href="#2-3-匿名函数" class="headerlink" title="2.3 匿名函数"></a>2.3 匿名函数</h2><h3 id="2-3-1-语法"><a href="#2-3-1-语法" class="headerlink" title="2.3.1 语法"></a>2.3.1 语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-4-立即执行函数"><a href="#2-4-立即执行函数" class="headerlink" title="2.4 立即执行函数"></a>2.4 立即执行函数</h2><h3 id="2-4-1-语法"><a href="#2-4-1-语法" class="headerlink" title="2.4.1 语法"></a>2.4.1 语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">形参列表</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;)(实参列表)</span><br></pre></td></tr></table></figure>
<h3 id="2-4-2-特性"><a href="#2-4-2-特性" class="headerlink" title="2.4.2 特性"></a>2.4.2 特性</h3><ul>
<li>立即执行函数只执行一次</li>
</ul>
<h2 id="2-5-回调函数"><a href="#2-5-回调函数" class="headerlink" title="2.5 回调函数"></a>2.5 回调函数</h2><h3 id="2-5-1-概念"><a href="#2-5-1-概念" class="headerlink" title="2.5.1 概念"></a>2.5.1 概念</h3><ul>
<li>并非自己调用，而是由浏览器自动调用的函数</li>
<li>一般是作为函数的参数进行使用，可以通过匿名函数的写法进行传递，也可以直接传递函数名</li>
</ul>
<h3 id="2-5-2-语法"><a href="#2-5-2-语法" class="headerlink" title="2.5.2 语法"></a>2.5.2 语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">注意到click方法中是一个函数而不是一个变量</span><br><span class="line"><span class="comment">//它就是回调函数</span></span><br><span class="line">$(<span class="string">&quot;#btn_1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;Btn 1 Clicked&quot;</span>);</span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 它就是回调函数</span></span><br><span class="line">    alert(<span class="string">&quot;Btn 1 Clicked&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="string">&quot;#btn_1&quot;</span>).click(click);  </span><br></pre></td></tr></table></figure>
<h1 id="三、JS对象"><a href="#三、JS对象" class="headerlink" title="三、JS对象"></a>三、JS对象</h1><h2 id="3-1-对象的分类"><a href="#3-1-对象的分类" class="headerlink" title="3.1 对象的分类"></a>3.1 对象的分类</h2><ul>
<li>内建对象</li>
<li>宿主对象</li>
<li>自定义对象</li>
</ul>
<h2 id="3-2-对象的定义"><a href="#3-2-对象的定义" class="headerlink" title="3.2 对象的定义"></a>3.2 对象的定义</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">变量名.属性名 = 值</span><br><span class="line">变量名.函数名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">this</span>关键字可以在函数体中使用</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">        属性名:值,</span><br><span class="line">        属性名:值,</span><br><span class="line">        函数名:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-this关键字"><a href="#3-3-this关键字" class="headerlink" title="3.3 this关键字"></a>3.3 this关键字</h2><ol>
<li>当以函数的形式调用时，this是window</li>
<li>当以方法的形式调用时，谁调用方法，this就是谁</li>
<li>当以构造函数的形式调用时，this就是新创建的那个对象</li>
</ol>
<h2 id="3-4-构造函数"><a href="#3-4-构造函数" class="headerlink" title="3.4 构造函数"></a>3.4 构造函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;    <span class="comment">//添加属性name</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>
<h3 id="3-4-1-执行流程"><a href="#3-4-1-执行流程" class="headerlink" title="3.4.1 执行流程"></a>3.4.1 执行流程</h3><ol>
<li>立刻创建一个新的对象</li>
<li>将新建的对象设置为函数中的this，在构造函数中可以使用this来引用新建的对象</li>
<li>执行函数中的代码</li>
<li>将新建的对象作为返回值返回</li>
</ol>
<h2 id="3-5-原型对象"><a href="#3-5-原型对象" class="headerlink" title="3.5 原型对象"></a>3.5 原型对象</h2><img src="/2022/02/22/js%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/prototype.png" class="" title="image">
<ul>
<li>JS中万物皆对象</li>
<li>每个对象都具有<strong>proto</strong>，用于指向其构造函数的原型，这也保证了实例能够访问在构造函数原型中定义的属性和方法</li>
<li>方法是一个特殊的对象（可以把方法的声明当作构造函数），它同时具有<strong>proto</strong>指针，以及属性prototype</li>
</ul>
<h1 id="四、Dom操作"><a href="#四、Dom操作" class="headerlink" title="四、Dom操作"></a>四、Dom操作</h1><h2 id="4-1-操作元素节点"><a href="#4-1-操作元素节点" class="headerlink" title="4.1 操作元素节点"></a>4.1 操作元素节点</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">getElementById()</td>
<td style="text-align:center">通过id属性获取一个元素节点对象</td>
</tr>
<tr>
<td style="text-align:center">getElementsByTagName()</td>
<td style="text-align:center">通过标签名获取一组元素节点对象</td>
</tr>
<tr>
<td style="text-align:center">getElementsByName()</td>
<td style="text-align:center">通过name属性获取一组元素节点对象</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>获取到元素对象/对象数组后，这些对象包含以下属性<ul>
<li>对象名.innerHtml</li>
<li>对象名.id</li>
<li>对象名.name</li>
<li>对象名.value</li>
<li>对象名.className</li>
<li>对象名.时间名=function(){}</li>
</ul>
</li>
</ul>
<h1 id="五、JS事件"><a href="#五、JS事件" class="headerlink" title="五、JS事件"></a>五、JS事件</h1><h2 id="5-1-事件的概念"><a href="#5-1-事件的概念" class="headerlink" title="5.1 事件的概念"></a>5.1 事件的概念</h2><ul>
<li>电脑输入设备与页面进行交互的响应</li>
</ul>
<h2 id="5-2-常用的事件"><a href="#5-2-常用的事件" class="headerlink" title="5.2 常用的事件"></a>5.2 常用的事件</h2><ul>
<li>onload：加载完成事件，页面加载完成之后，常用于做页面js代码初始化操作</li>
<li>onclick：单击事件，常用于按钮点击的响应操作</li>
<li>onblur：失去焦点事件，常用于输入框失去焦点后验证其输入内容是否合法</li>
<li>onchange：内容发生改变事件，常用于下拉列表和输入框内容发生改变后操作</li>
<li>onsubmit：表单提交事件，常用于表单提交前，验证所有表单是否合法</li>
</ul>
<h2 id="5-3-事件的注册"><a href="#5-3-事件的注册" class="headerlink" title="5.3 事件的注册"></a>5.3 事件的注册</h2><h3 id="5-3-1-静态注册"><a href="#5-3-1-静态注册" class="headerlink" title="5.3.1 静态注册"></a>5.3.1 静态注册</h3><ul>
<li>通过html标签的事件属性直接赋予事件响应后的代码</li>
</ul>
<h3 id="5-3-2-动态注册"><a href="#5-3-2-动态注册" class="headerlink" title="5.3.2 动态注册"></a>5.3.2 动态注册</h3><ul>
<li>是指先通过js代码得到标签的dom对象，然后再通过：dom对象.事件名=function(){}这种形式赋予事件响应后的代码</li>
</ul>
<h3 id="5-3-3-步骤"><a href="#5-3-3-步骤" class="headerlink" title="5.3.3 步骤"></a>5.3.3 步骤</h3><ol>
<li>获取标签对象</li>
<li>标签对象.事件名=function(){}</li>
</ol>
<h2 id="5-4-事件对象event"><a href="#5-4-事件对象event" class="headerlink" title="5.4 事件对象event"></a>5.4 事件对象event</h2><ul>
<li>在给元素绑定事件时，写上函数参数event</li>
<li>使用此event可以在触发事件时达到某些效果</li>
<li>为兼容IE8，函数体中可以写上此语句：event = event||window.event;</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">box1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;     <span class="comment">//参数名一般写做event或e</span></span><br><span class="line">    <span class="keyword">if</span>(event.target.className == <span class="string">&quot;link&quot;</span>)&#123;   <span class="comment">//判断子元素中是否有a链接元素</span></span><br><span class="line">        alert(<span class="string">&quot;我是box1的单击事件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-5-事件的冒泡"><a href="#5-5-事件的冒泡" class="headerlink" title="5.5 事件的冒泡"></a>5.5 事件的冒泡</h2><ul>
<li>给覆盖在父元素上的子元素都绑定上事件，点击子元素时，会先触发子元素的事件，然后再触发父元素的事件</li>
<li>event.cancelBubble = true;可以用来取消父元素的冒泡</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box1&quot;</span>);</span><br><span class="line">box1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//回调函数，无需自己调用</span></span><br><span class="line">    alert(<span class="string">&quot;我是div的单击响应函数&quot;</span>);</span><br><span class="line">    event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-6-事件的委派"><a href="#5-6-事件的委派" class="headerlink" title="5.6 事件的委派"></a>5.6 事件的委派</h2><ul>
<li>给各子元素共同的祖先元素绑定事件，这样后代元素上的事件触发时，则会统一触发祖先绑定的事件</li>
<li>这样做无需一个个给子元素单独绑定事件，比较方便</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsById(<span class="string">&quot;ul&quot;</span>);</span></span><br><span class="line"><span class="javascript">    ul.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;我是ul的单击事件&quot;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础大全一</title>
    <url>/2022/02/23/Spring%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><ul>
<li>轻量级的开源JavaEE框架</li>
<li>IOC：控制反转，把创建对象过程交给Spring进行管理</li>
<li>Aop：面向切面，不修改源代码进行功能增强</li>
</ul>
<h1 id="二、IOC容器"><a href="#二、IOC容器" class="headerlink" title="二、IOC容器"></a>二、IOC容器</h1><h2 id="2-1-IOC底层原理"><a href="#2-1-IOC底层原理" class="headerlink" title="2.1 IOC底层原理"></a>2.1 IOC底层原理</h2><ul>
<li>XML解析、工厂模式、反射</li>
</ul>
<h2 id="2-2-IOC容器实现方式"><a href="#2-2-IOC容器实现方式" class="headerlink" title="2.2 IOC容器实现方式"></a>2.2 IOC容器实现方式</h2><h3 id="2-2-1-两个接口"><a href="#2-2-1-两个接口" class="headerlink" title="2.2.1 两个接口"></a>2.2.1 两个接口</h3><ul>
<li>BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员使用</li>
<li>ApplicationContext：BeanFactory的子接口，提供更多更强大的功能，一般由开发人员进行使用<ul>
<li>ApplicationContext实现类：FileSystemApplicationContext/ClassPathXmlApplicationContext</li>
</ul>
</li>
</ul>
<h2 id="2-3-Bean管理"><a href="#2-3-Bean管理" class="headerlink" title="2.3 Bean管理"></a>2.3 Bean管理</h2><h3 id="2-3-1-两个操作"><a href="#2-3-1-两个操作" class="headerlink" title="2.3.1 两个操作"></a>2.3.1 两个操作</h3><ul>
<li>Spring创建对象</li>
<li>Spring注入属性</li>
</ul>
<h3 id="2-3-2-操作Bean管理对象（基础操作-基于XML）"><a href="#2-3-2-操作Bean管理对象（基础操作-基于XML）" class="headerlink" title="2.3.2 操作Bean管理对象（基础操作/基于XML）"></a>2.3.2 操作Bean管理对象（基础操作/基于XML）</h3><h4 id="（1）创建-获取对象"><a href="#（1）创建-获取对象" class="headerlink" title="（1）创建/获取对象"></a>（1）创建/获取对象</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在Spring配置文件中，使用bean标签，标签里面加对应属性，就可以实现对象创建</li>
<li>bean标签属性<ul>
<li>id：唯一标识，不可以加特殊符号</li>
<li>class：类全路径（包类路径）</li>
</ul>
</li>
<li>创建对象时候，默认也是执行无参数构造方法完成对象创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取XML文件名获取应用上下文</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据bean的name属性获取到对象</span></span><br><span class="line">User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象方法</span></span><br><span class="line">user.add();</span><br></pre></td></tr></table></figure>
<h4 id="（2）注入属性"><a href="#（2）注入属性" class="headerlink" title="（2）注入属性"></a>（2）注入属性</h4><ul>
<li>DI：依赖注入，就是注入对象属性值</li>
</ul>
<h4 id="（3）注入方式"><a href="#（3）注入方式" class="headerlink" title="（3）注入方式"></a>（3）注入方式</h4><ul>
<li>第一种：使用set方法进行注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 采用set方法进行属性注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bname=bname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bauthor=bauthor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	使用property完成属性注入</span></span><br><span class="line"><span class="comment">		name：类里面属性名称</span></span><br><span class="line"><span class="comment">		value：向属性注入的值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;活着&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二种：使用有参数构造进行注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参数构造进行属性注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname,String address)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	使用constructor-arg完成有参数构造注入</span></span><br><span class="line"><span class="comment">		name：类里面属性名称</span></span><br><span class="line"><span class="comment">		value：向属性注入的值</span></span><br><span class="line"><span class="comment">		index：类中属性的下标，如下里&quot;0&quot;表示oname，&quot;1&quot;表示address</span></span><br><span class="line"><span class="comment">	如果不在bean中添加属性注入标签，则表示默认按照无参构造方式注入对象</span></span><br><span class="line"><span class="comment">	所以如果不在类中显式的定义无参构造，则xml文件会报错，报错内容为bean中的class</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蛋炒饭&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;东华&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;constructor-arg index=&quot;1&quot; value=&quot;东华&quot;&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第三种：p名称空间注入（了解）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	在beans标签中添加p名称空间</span></span><br><span class="line"><span class="comment">		xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;gy&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-注入其他类型属性"><a href="#4-注入其他类型属性" class="headerlink" title="(4) 注入其他类型属性"></a>(4) 注入其他类型属性</h4><ul>
<li>字面量<ul>
<li>null值</li>
<li>属性值包含特殊符号</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  null标签为属性设置空值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	属性值包含特殊符号</span></span><br><span class="line"><span class="comment">	&lt;&lt;&gt;&gt;会让属性值内容表示为标签</span></span><br><span class="line"><span class="comment">	解决方法：</span></span><br><span class="line"><span class="comment">		1. 把&lt;&gt;进行转义，如&amp;lt、&amp;gt</span></span><br><span class="line"><span class="comment">		2. 把带特殊符号内容谢到CDATA</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-注入外部bean"><a href="#4-注入外部bean" class="headerlink" title="(4) 注入外部bean"></a>(4) 注入外部bean</h4><ul>
<li>比如Service层调用Dao层对象，需要在Bean中进行注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	在这里进行Service层对象的注入</span></span><br><span class="line"><span class="comment">	这样在Controller层，就可以调用userService对象提供的方法来处理我们的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.userService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	注入userDao对象</span></span><br><span class="line"><span class="comment">		name属性：类里面属性名称</span></span><br><span class="line"><span class="comment">		ref属性：创建userDao对象bean标签id值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.userDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="5-注入内部bean和级联赋值"><a href="#5-注入内部bean和级联赋值" class="headerlink" title="(5) 注入内部bean和级联赋值"></a>(5) 注入内部bean和级联赋值</h4><ul>
<li><p>一对多关系：部门和员工</p>
<ul>
<li>一个部门有多个员工，一个员工属于一个部门</li>
<li>在实体类之间表示一对多关系，员工表示所属部门，使用对象类型属性</li>
</ul>
</li>
<li><p>实体类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 部门类，生成set方法方便注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注入内部bean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!--内部注入部门属性，以嵌套bean的方式实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保安部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>级联赋值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jack&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!--引入外部bean的方式，为外部bean的属性赋值（级联赋值）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保安部&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jack&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!--引入外部bean的方式，为外部bean的属性赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要Dept类中属性有get方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Dept&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-3-操作Bean管理对象（注入集合类型）"><a href="#2-3-3-操作Bean管理对象（注入集合类型）" class="headerlink" title="2.3.3 操作Bean管理对象（注入集合类型）"></a>2.3.3 操作Bean管理对象（注入集合类型）</h3><h4 id="（1）注入数组-List-Map-Set类型"><a href="#（1）注入数组-List-Map-Set类型" class="headerlink" title="（1）注入数组/List/Map/Set类型"></a>（1）注入数组/List/Map/Set类型</h4><ul>
<li>为学生类注入集合属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Set类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 生成set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(String[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	数组对应array&gt;value标签</span></span><br><span class="line"><span class="comment">	List对应list&gt;value标签</span></span><br><span class="line"><span class="comment">	Map对应map&gt;entry[key,value]标签</span></span><br><span class="line"><span class="comment">	Set对应set&gt;value标签</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据结构<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;Java&quot;</span> <span class="attr">value</span>=<span class="string">&quot;世界上最好的语言&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;Php&quot;</span> <span class="attr">value</span>=<span class="string">&quot;世界上最好的语言&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Mysql<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="（2）集合中注入对象类型值"><a href="#（2）集合中注入对象类型值" class="headerlink" title="（2）集合中注入对象类型值"></a>（2）集合中注入对象类型值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 集合中对象类型注入</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courses;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//set方法注入属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	List中的对象属性</span></span><br><span class="line"><span class="comment">		list&gt;ref.bean标签引入外部的对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="（4）把集合注入部分提取出来（公共属性）"><a href="#（4）把集合注入部分提取出来（公共属性）" class="headerlink" title="（4）把集合注入部分提取出来（公共属性）"></a>（4）把集合注入部分提取出来（公共属性）</h4><ul>
<li>在spring配置文件中引入util名称空间</li>
<li>使用util:list创建属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	添加xmlns:util</span></span><br><span class="line"><span class="comment">	在xsi:schemaLocation中添加http://www.springframework.org/schema/util/spring-util.xsd</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--提取公共属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Java从入门到入土<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Php从入门到入土<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">			使用公共list实现属性注入，需要使用ref完成list引入</span></span><br><span class="line"><span class="comment">			ref对应到util的id属性</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-4-操作Bean管理对象（工厂Bean）"><a href="#2-3-4-操作Bean管理对象（工厂Bean）" class="headerlink" title="2.3.4 操作Bean管理对象（工厂Bean）"></a>2.3.4 操作Bean管理对象（工厂Bean）</h3><ol>
<li>Spring有两种类型bean，一种普通bean，另外一种工厂bean</li>
<li>普通bean：在配置文件中定义bean类型就是返回类型</li>
<li>工厂bean：在配置文件定义bean类型可以和返回类型不一样<ol>
<li>第一步：创建类，让这个类作为工厂bean，实现接口FactoryBean</li>
<li>第二步：实现接口里面的方法，在实现的方法中定义返回的bean类型</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建工厂类，实现接口FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 工厂可以获取到指定对象，这里获取的是User对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;gy&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	注入工厂对象，注入后会调用getObject方法获取到指定的对象</span></span><br><span class="line"><span class="comment">	所以才说这里定义的bean，在返回的时候获取的对象可以不一样</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.factorybean.MyBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试方法，根据applicationContext获取到的对象应该使用具体的类，这里使用的是User,所以根据注入的工厂bean获取到的的就是User对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    User myBean = applicationContext.getBean(<span class="string">&quot;myBean&quot;</span>, User.class);</span><br><span class="line">    System.out.println(myBean);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-5-操作Bean管理对象（Bean作用域）"><a href="#2-3-5-操作Bean管理对象（Bean作用域）" class="headerlink" title="2.3.5 操作Bean管理对象（Bean作用域）"></a>2.3.5 操作Bean管理对象（Bean作用域）</h3><h4 id="（1）bean的性质"><a href="#（1）bean的性质" class="headerlink" title="（1）bean的性质"></a>（1）bean的性质</h4><ul>
<li>Spring中，默认情况下，创建的bean是单实例对象，也就是注入的一个bean被两个引用变量获取到后，引用的地址都是相同的</li>
</ul>
<h4 id="（2）设置单实例-多实例"><a href="#（2）设置单实例-多实例" class="headerlink" title="（2）设置单实例/多实例"></a>（2）设置单实例/多实例</h4><ul>
<li>在spring配置文件标签里面有属性scope用于设置bean是单实例还是多实例</li>
<li>scope属性值<ul>
<li>第一个：默认值，singleton，表示实例为单实例对象</li>
<li>第二个：prototype，表示是多实例对象</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.company.spring5.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;活着&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="（3）singleton和prototype区别"><a href="#（3）singleton和prototype区别" class="headerlink" title="（3）singleton和prototype区别"></a>（3）singleton和prototype区别</h4><ul>
<li>singleton表示<strong>单实例</strong>，prototype表示<strong>多实例</strong></li>
<li>设置scope值是singleton时候，加载spring配置文件（java的ApplicationContext对象创建的时候）时，就会创建单实例对象，单实例对象<strong>不管获取多少次</strong>地址都是相同的</li>
<li>设置scope值是prototype时，不是在加载spring配置文件时创建，而是在调用getBean方法的时候才创建多实例对象，多实例对象的地址都是不一样的</li>
</ul>
<h3 id="2-3-6-操作Bean管理对象（Bean生命周期）"><a href="#2-3-6-操作Bean管理对象（Bean生命周期）" class="headerlink" title="2.3.6 操作Bean管理对象（Bean生命周期）"></a>2.3.6 操作Bean管理对象（Bean生命周期）</h3><h4 id="（1）生命周期"><a href="#（1）生命周期" class="headerlink" title="（1）生命周期"></a>（1）生命周期</h4><ul>
<li>从对象创建到对象销毁的过程</li>
</ul>
<h4 id="（2）bean生命周期"><a href="#（2）bean生命周期" class="headerlink" title="（2）bean生命周期"></a>（2）bean生命周期</h4><ul>
<li>通过构造器创建bean实例（无参数构造）</li>
<li>为bean的属性设置值和对其他bean的引用（调用set方法）</li>
<li>调用bean的初始化的方法（需要进行配置）</li>
<li>bean可以被获取到了</li>
<li>当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法）</li>
</ul>
<h4 id="（3）演示bean生命周期"><a href="#（3）演示bean生命周期" class="headerlink" title="（3）演示bean生命周期"></a>（3）演示bean生命周期</h4><h1 id="三、Aop"><a href="#三、Aop" class="headerlink" title="三、Aop"></a>三、Aop</h1><h1 id="四、JdbcTemplate"><a href="#四、JdbcTemplate" class="headerlink" title="四、JdbcTemplate"></a>四、JdbcTemplate</h1><h1 id="五、事物管理"><a href="#五、事物管理" class="headerlink" title="五、事物管理"></a>五、事物管理</h1><h1 id="六、Spring5新特性"><a href="#六、Spring5新特性" class="headerlink" title="六、Spring5新特性"></a>六、Spring5新特性</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2基础大全一</title>
    <url>/2022/02/23/Vue2%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、Vue-cli脚手架"><a href="#一、Vue-cli脚手架" class="headerlink" title="一、Vue-cli脚手架"></a>一、Vue-cli脚手架</h1><h2 id="1、Vue项目结构"><a href="#1、Vue项目结构" class="headerlink" title="1、Vue项目结构"></a>1、Vue项目结构</h2><h1 id="二、Vue组件结构"><a href="#二、Vue组件结构" class="headerlink" title="二、Vue组件结构"></a>二、Vue组件结构</h1>]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记1-徐增林-知识图谱技术综述</title>
    <url>/2022/02/24/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B01-%E5%BE%90%E5%A2%9E%E6%9E%97-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%8A%80%E6%9C%AF%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<blockquote>
<p>作者:    徐增林 盛泳潘 贺丽荣 王雅芳</p>
<p>发表时间:    2016-7</p>
<p>期刊:    电子科技大学学报</p>
</blockquote>
<h1 id="一、知识图谱的定义与架构"><a href="#一、知识图谱的定义与架构" class="headerlink" title="一、知识图谱的定义与架构"></a>一、知识图谱的定义与架构</h1><h2 id="1-1-知识图谱的定义"><a href="#1-1-知识图谱的定义" class="headerlink" title="1.1 知识图谱的定义"></a>1.1 知识图谱的定义</h2><h3 id="1-1-1-定义"><a href="#1-1-1-定义" class="headerlink" title="1.1.1 定义"></a>1.1.1 定义</h3><ul>
<li>知识图谱是Google用于增强其搜索功能的知识库，本质上，知识图谱是一种揭示实体之间关系的语义网络，可以对显示世界的事物及其相互关系进行形式化地描述</li>
</ul>
<h3 id="1-1-2-表示"><a href="#1-1-2-表示" class="headerlink" title="1.1.2 表示"></a>1.1.2 表示</h3><ul>
<li>三元组表示方式：$G=\{E,R,S\}$，<ul>
<li>其中$E = \{ e_1,e_2,…,e_{|E|} \}$是知识库的实体集合，$|E|$表示实体数</li>
<li>$R = \{ r_1,r_2,…,r_{|E|} \}$是知识库中的关系集合，$|R|$表示关系数</li>
</ul>
</li>
<li>三元组的基本形式（知识图谱的逻辑结构）<ul>
<li>（实体1，关系，实体2）</li>
<li>（实体，属性，属性值）</li>
</ul>
</li>
</ul>
<h2 id="1-2-知识图谱体系架构"><a href="#1-2-知识图谱体系架构" class="headerlink" title="1.2 知识图谱体系架构"></a>1.2 知识图谱体系架构</h2><h3 id="1-2-1-构建方式"><a href="#1-2-1-构建方式" class="headerlink" title="1.2.1 构建方式"></a>1.2.1 构建方式</h3><ul>
<li>自顶向下（top-down）：先构建本体和数据模式，再加入实体到知识库</li>
<li>自底向下（bottom-top）：先提取实体，将置信度较高的加入到知识库，再构建顶层的本体（大多数知识图谱采用）</li>
</ul>
<img src="/2022/02/24/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B01-%E5%BE%90%E5%A2%9E%E6%9E%97-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%8A%80%E6%9C%AF%E7%BB%BC%E8%BF%B0/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" class="" title="image">
<h1 id="二、大规模知识图谱"><a href="#二、大规模知识图谱" class="headerlink" title="二、大规模知识图谱"></a>二、大规模知识图谱</h1><h2 id="2-1-开放链接知识库"><a href="#2-1-开放链接知识库" class="headerlink" title="2.1 开放链接知识库"></a>2.1 开放链接知识库</h2><ul>
<li>Freebase：由人工构建，另外一部分数据则主要来源于维基百科、IMDB、Flickr等网站或语料库</li>
<li>Wikidata：自由的协作式多语言辅助知识库</li>
<li>DBpedia：由德国莱比锡大学和曼海姆大学的科研人员创建的多语言综合型知识库</li>
<li>YAGO：由德国马普所(max planck institute，MPI)的科研人员构建的综合型知识库</li>
</ul>
<h2 id="2-2-垂直行业知识库"><a href="#2-2-垂直行业知识库" class="headerlink" title="2.2 垂直行业知识库"></a>2.2 垂直行业知识库</h2><blockquote>
<p>行业知识库也可称为垂直型知识库，这类知识库的描述目标是特定的行业领域，</p>
<p>通常需要依靠特定行业的数据才能构建，因此其描述范围极为有限</p>
</blockquote>
<ul>
<li>IMDB：关于电影演员、电影、电视节目、电视明星以及电影制作的资料库</li>
<li>MusicBrainz：一个结构化的音乐维基百科，致力于收藏所有的音乐元数据，并向大众用户开放</li>
<li>ConceptNet：一个语义知识网络，主要由一系列的代表概念的结点构成，这些概念将主要采用自然语言单词或短语的表达形式，通过相互连接建立语义联系</li>
</ul>
<h1 id="三、知识图谱关键技术"><a href="#三、知识图谱关键技术" class="headerlink" title="三、知识图谱关键技术"></a>三、知识图谱关键技术</h1><h2 id="3-1-知识抽取"><a href="#3-1-知识抽取" class="headerlink" title="3.1 知识抽取"></a>3.1 知识抽取</h2><h3 id="3-1-1-实体抽取"><a href="#3-1-1-实体抽取" class="headerlink" title="3.1.1 实体抽取"></a>3.1.1 实体抽取</h3><ul>
<li>基于规则与词典</li>
<li>基于统计机器学习</li>
<li>面向开放域的抽取方法</li>
</ul>
<h3 id="3-1-2-关系抽取"><a href="#3-1-2-关系抽取" class="headerlink" title="3.1.2 关系抽取"></a>3.1.2 关系抽取</h3><ul>
<li>开放式实体关系抽取</li>
<li>基于联合推理的实体关系抽取</li>
</ul>
<h3 id="3-1-3-属性抽取"><a href="#3-1-3-属性抽取" class="headerlink" title="3.1.3 属性抽取"></a>3.1.3 属性抽取</h3><h2 id="3-2-知识表示"><a href="#3-2-知识表示" class="headerlink" title="3.2 知识表示"></a>3.2 知识表示</h2><h3 id="3-2-1-代表模型"><a href="#3-2-1-代表模型" class="headerlink" title="3.2.1 代表模型"></a>3.2.1 代表模型</h3><ul>
<li><p>距离模型</p>
</li>
<li><p>单层神经网络模型</p>
</li>
<li><p>双线性模型</p>
</li>
<li><p>神经张量模型</p>
</li>
<li><p>矩阵分解模型</p>
</li>
<li><p>翻译模型</p>
</li>
</ul>
<h3 id="3-2-2-复杂关系模型"><a href="#3-2-2-复杂关系模型" class="headerlink" title="3.2.2 复杂关系模型"></a>3.2.2 复杂关系模型</h3><ul>
<li><p>TransH模型</p>
</li>
<li><p>TransR模型 </p>
</li>
<li><p>TransD模型 </p>
</li>
<li><p>TransG模型</p>
</li>
<li><p>KG2E模型</p>
</li>
</ul>
<h2 id="3-3-知识融合"><a href="#3-3-知识融合" class="headerlink" title="3.3 知识融合"></a>3.3 知识融合</h2><h3 id="3-3-1-实体对齐"><a href="#3-3-1-实体对齐" class="headerlink" title="3.3.1 实体对齐"></a>3.3.1 实体对齐</h3><ul>
<li>成对实体对齐方法</li>
<li>局部集体实体对齐方法</li>
<li>全局集体实体对齐方法</li>
</ul>
<h3 id="3-3-2-知识加工"><a href="#3-3-2-知识加工" class="headerlink" title="3.3.2 知识加工"></a>3.3.2 知识加工</h3><h4 id="（1）本体构建"><a href="#（1）本体构建" class="headerlink" title="（1）本体构建"></a>（1）本体构建</h4><ul>
<li>手动构建</li>
<li>数据驱动自动构建</li>
</ul>
<h4 id="（2）质量评估"><a href="#（2）质量评估" class="headerlink" title="（2）质量评估"></a>（2）质量评估</h4><h3 id="3-3-3-知识更新"><a href="#3-3-3-知识更新" class="headerlink" title="3.3.3 知识更新"></a>3.3.3 知识更新</h3><h2 id="3-4-知识推理"><a href="#3-4-知识推理" class="headerlink" title="3.4 知识推理"></a>3.4 知识推理</h2><h3 id="3-4-1-基于逻辑的推理"><a href="#3-4-1-基于逻辑的推理" class="headerlink" title="3.4.1 基于逻辑的推理"></a>3.4.1 基于逻辑的推理</h3><h3 id="3-4-2-基于图的推理"><a href="#3-4-2-基于图的推理" class="headerlink" title="3.4.2 基于图的推理"></a>3.4.2 基于图的推理</h3><h1 id="四、知识图谱的应用"><a href="#四、知识图谱的应用" class="headerlink" title="四、知识图谱的应用"></a>四、知识图谱的应用</h1><h2 id="4-1-智能搜索"><a href="#4-1-智能搜索" class="headerlink" title="4.1 智能搜索"></a>4.1 智能搜索</h2><h2 id="4-2-深度问答"><a href="#4-2-深度问答" class="headerlink" title="4.2 深度问答"></a>4.2 深度问答</h2><h2 id="4-3-社交网络"><a href="#4-3-社交网络" class="headerlink" title="4.3 社交网络"></a>4.3 社交网络</h2><h2 id="4-4-垂直行业应用"><a href="#4-4-垂直行业应用" class="headerlink" title="4.4 垂直行业应用"></a>4.4 垂直行业应用</h2><h1 id="五、知识图谱的挑战"><a href="#五、知识图谱的挑战" class="headerlink" title="五、知识图谱的挑战"></a>五、知识图谱的挑战</h1>]]></content>
      <categories>
        <category>文献阅读</category>
        <category>综述</category>
      </categories>
      <tags>
        <tag>论文阅读</tag>
        <tag>知识图谱</tag>
      </tags>
  </entry>
  <entry>
    <title>individual项目开发1-axios请求数据</title>
    <url>/2022/02/24/individual%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%911-axios%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>individual项目开发1-前后端数据请求实现</title>
    <url>/2022/02/25/individual%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%911-%E5%89%8D%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="一、前端工作"><a href="#一、前端工作" class="headerlink" title="一、前端工作"></a>一、前端工作</h1><h2 id="1-1-项目结构"><a href="#1-1-项目结构" class="headerlink" title="1.1 项目结构"></a>1.1 项目结构</h2><ul>
<li>在初始的项目结构的src目录下新建以下目录<ul>
<li>views：组合组件的页面</li>
<li>store/modules：供view层使用，封装数据以供view层显示</li>
<li>api：封装请求地址以及端口</li>
<li>utils：js工具包，提供常用的操作，比如创建axios请求</li>
</ul>
</li>
</ul>
<h3 id="1-1-1-utils层"><a href="#1-1-1-utils层" class="headerlink" title="1.1.1 utils层"></a>1.1.1 utils层</h3><ul>
<li>创建axios请求，命名为request.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span> <span class="comment">//引入 axios</span></span><br><span class="line"><span class="keyword">import</span> baseUrl <span class="keyword">from</span> <span class="string">&#x27;../api/baseUrl&#x27;</span> <span class="comment">//使用环境变量 + 模式的方式定义基础URL</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建 axios 实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: baseUrl, <span class="comment">// api 的 base_url</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">15000</span>, <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>
<h3 id="1-1-2-api层"><a href="#1-1-2-api层" class="headerlink" title="1.1.2 api层"></a>1.1.2 api层</h3><ul>
<li>创建baseUrl.js，设置请求地址和端口</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> baseUrl = <span class="string">&quot;http://localhost:8080/&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> baseUrl;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建login.js，调用util层，设置请求方法和请求参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span> <span class="comment">//引入封装好的 axios 请求</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">userName, password</span>) </span>&#123; <span class="comment">//登录接口</span></span><br><span class="line">  <span class="keyword">return</span> request(&#123; <span class="comment">//使用封装好的 axios 进行网络请求</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="comment">//提交的数据</span></span><br><span class="line">      userName,</span><br><span class="line">      password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-3-store层"><a href="#1-1-3-store层" class="headerlink" title="1.1.3 store层"></a>1.1.3 store层</h3><ul>
<li>在store/modules下创建user.js，调用api层请求方法，返回请求数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;login&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/login&#x27;</span><span class="comment">//引入登录 api 接口</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="function"><span class="title">Login</span>(<span class="params">&#123; commit &#125;, userInfo</span>)</span> &#123; <span class="comment">//定义 Login 方法，在组件中使用 this.$store.dispatch(&quot;Login&quot;) 调用</span></span><br><span class="line">      <span class="keyword">const</span> userName = userInfo.userName.trim()</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">//封装一个 Promise</span></span><br><span class="line">        login(userName, userInfo.password).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//使用 login 接口进行网络请求</span></span><br><span class="line">          commit(<span class="string">&#x27;increment&#x27;</span>) <span class="comment">//提交一个 mutation，通知状态改变</span></span><br><span class="line">          resolve(response) <span class="comment">//将结果封装进 Promise</span></span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> user</span><br></pre></td></tr></table></figure>
<ul>
<li>在store下创建index.js，使用store封装modules模块下的数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">//引入 Vue</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span> <span class="comment">//引入 Vuex</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span> <span class="comment">//引入 user module</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    user <span class="comment">//使用 user.js 中的 action</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    increment (state) &#123; </span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>
<h3 id="1-1-4-views层"><a href="#1-1-4-views层" class="headerlink" title="1.1.4 views层"></a>1.1.4 views层</h3><ul>
<li>创建登录页Login.vue，调用store验证登录用户</li>
<li>可以创建Success.vue和Error.vue来进行页面跳转</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">        &lt;el-form :model=&quot;ruleForm2&quot; :rules=&quot;rules2&quot;</span><br><span class="line">         status-icon</span><br><span class="line">         ref=&quot;ruleForm2&quot; </span><br><span class="line">         label-position=&quot;left&quot; </span><br><span class="line">         label-width=&quot;0px&quot; </span><br><span class="line">         class=&quot;demo-ruleForm login-page&quot;&gt;</span><br><span class="line">            &lt;h3 class=&quot;title&quot;&gt;系统登录&lt;/h3&gt;</span><br><span class="line">            &lt;el-form-item prop=&quot;userName&quot;&gt;</span><br><span class="line">                &lt;el-input type=&quot;text&quot; </span><br><span class="line">                    v-model=&quot;ruleForm2.userName&quot; </span><br><span class="line">                    auto-complete=&quot;off&quot; </span><br><span class="line">                    placeholder=&quot;用户名&quot;</span><br><span class="line">                &gt;&lt;/el-input&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">                &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">                    &lt;el-input type=&quot;password&quot; </span><br><span class="line">                        v-model=&quot;ruleForm2.password&quot; </span><br><span class="line">                        auto-complete=&quot;off&quot; </span><br><span class="line">                        placeholder=&quot;密码&quot;</span><br><span class="line">                    &gt;&lt;/el-input&gt;</span><br><span class="line">                &lt;/el-form-item&gt;</span><br><span class="line">            &lt;el-checkbox </span><br><span class="line">                v-model=&quot;checked&quot;</span><br><span class="line">                class=&quot;rememberme&quot;</span><br><span class="line">            &gt;记住密码&lt;/el-checkbox&gt;</span><br><span class="line">            &lt;el-form-item style=&quot;width:100%;&quot;&gt;</span><br><span class="line">                &lt;el-button type=&quot;primary&quot; style=&quot;width:100%;&quot; @click=&quot;handleSubmit&quot; :loading=&quot;logining&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">            &lt;/el-form-item&gt;</span><br><span class="line">        &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            logining: false,</span><br><span class="line">            ruleForm2: &#123;</span><br><span class="line">                userName: &#x27;&#x27;,</span><br><span class="line">                password: &#x27;&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            rules2: &#123;</span><br><span class="line">                userName: [&#123;required: true, message: &#x27;please enter your account&#x27;, trigger: &#x27;blur&#x27;&#125;],</span><br><span class="line">                password: [&#123;required: true, message: &#x27;enter your password&#x27;, trigger: &#x27;blur&#x27;&#125;]</span><br><span class="line">            &#125;,</span><br><span class="line">            checked: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleSubmit(event)&#123;</span><br><span class="line">            this.$refs.ruleForm2.validate((valid) =&gt; &#123;</span><br><span class="line">                if(valid)&#123;</span><br><span class="line">                    this.logining = true;</span><br><span class="line">                    this.$store</span><br><span class="line">                        .dispatch(&quot;Login&quot;, this.ruleForm2)</span><br><span class="line">                        .then(response =&gt; &#123;</span><br><span class="line">                            this.loading = false;</span><br><span class="line">                            let code = response.data.code;</span><br><span class="line">                            if (code == 200) &#123;</span><br><span class="line">                                this.$router.push(&#123;</span><br><span class="line">                                path: &quot;/success&quot;,</span><br><span class="line">                                query: &#123; data: response.data.data &#125;</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                this.$router.push(&#123;</span><br><span class="line">                                path: &quot;/error&quot;,</span><br><span class="line">                                query: &#123; message: response.data.msg &#125;</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.login-container &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.login-page &#123;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    margin: 180px auto;</span><br><span class="line">    width: 350px;</span><br><span class="line">    padding: 35px 35px 15px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    border: 1px solid #eaeaea;</span><br><span class="line">    box-shadow: 0 0 25px #cac6c6;</span><br><span class="line">&#125;</span><br><span class="line">label.el-checkbox.rememberme &#123;</span><br><span class="line">    margin: 0px 0px 15px;</span><br><span class="line">    text-align: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h1 id="二、后端工作"><a href="#二、后端工作" class="headerlink" title="二、后端工作"></a>二、后端工作</h1><h2 id="2-1-跨域问题"><a href="#2-1-跨域问题" class="headerlink" title="2.1 跨域问题"></a>2.1 跨域问题</h2><ul>
<li>浏览器的跨域问题</li>
</ul>
<h2 id="2-2-Springboot解决跨域问题"><a href="#2-2-Springboot解决跨域问题" class="headerlink" title="2.2 Springboot解决跨域问题"></a>2.2 Springboot解决跨域问题</h2><ul>
<li>创建在config层下配置类CorsConfig，使用以下代码即可解决跨问问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//这里：是否允许证书 不再默认开启</span></span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//设置允许的方法</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、项目启动"><a href="#三、项目启动" class="headerlink" title="三、项目启动"></a>三、项目启动</h1><ul>
<li>先启动Springboot</li>
<li>再启动Vue，在config/index.js中可以修改vue访问端口号，要避免和Springboot项目端口冲突的情况</li>
</ul>
]]></content>
      <categories>
        <category>项目开发</category>
        <category>individual项目开发</category>
      </categories>
      <tags>
        <tag>前后端分离</tag>
        <tag>个人项目</tag>
        <tag>vue</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>individual项目开发1-访问权限管理</title>
    <url>/2022/02/24/individual%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%911-%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、拦截器"><a href="#一、拦截器" class="headerlink" title="一、拦截器"></a>一、拦截器</h1><h2 id="1-1-定义拦截器"><a href="#1-1-定义拦截器" class="headerlink" title="1.1 定义拦截器"></a>1.1 定义拦截器</h2><ul>
<li>编写拦截器实现类，实现接口<strong>HandlerIntercepter</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span>  <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在请求处理之前进行调用（Controller方法调用之前）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;执行了TestInterceptor的preHandle方法&quot;);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//统一拦截（查询当前session是否存在user）(这里user会在每次登陆成功后，写入session)</span></span><br><span class="line">            User user=(User)request.getSession().getAttribute(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;你的登陆页地址&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//如果设置为false时，被请求时，拦截器执行到此处将不会继续操作</span></span><br><span class="line">                      <span class="comment">//如果设置为true时，请求将会继续执行后面的操作</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line"><span class="comment">//         System.out.println(&quot;执行了TestInterceptor的postHandle方法&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;执行了TestInterceptor的afterCompletion方法&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-2-拦截器配置"><a href="#1-2-拦截器配置" class="headerlink" title="1.2 拦截器配置"></a>1.2 拦截器配置</h2><ul>
<li>创建配置类，继承<strong>WebMvcConfigurer</strong>接口，必须添加<strong>@Configuration</strong>注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注册TestInterceptor拦截器</span></span><br><span class="line">        InterceptorRegistration registration = registry.addInterceptor(<span class="keyword">new</span> AdminInterceptor());</span><br><span class="line">        registration.addPathPatterns(<span class="string">&quot;/**&quot;</span>);                      <span class="comment">//所有路径都被拦截</span></span><br><span class="line">        registration.excludePathPatterns(                         <span class="comment">//添加不拦截路径</span></span><br><span class="line">                                         <span class="string">&quot;你的登陆路径&quot;</span>,            <span class="comment">//登录</span></span><br><span class="line">                                         <span class="string">&quot;/**/*.html&quot;</span>,            <span class="comment">//html静态资源</span></span><br><span class="line">                                         <span class="string">&quot;/**/*.js&quot;</span>,              <span class="comment">//js静态资源</span></span><br><span class="line">                                         <span class="string">&quot;/**/*.css&quot;</span>,             <span class="comment">//css静态资源</span></span><br><span class="line">                                         <span class="string">&quot;/**/*.woff&quot;</span>,</span><br><span class="line">                                         <span class="string">&quot;/**/*.ttf&quot;</span></span><br><span class="line">                                         );    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>项目开发</category>
        <category>individual项目开发</category>
      </categories>
      <tags>
        <tag>前后端分离</tag>
        <tag>个人项目</tag>
        <tag>vue</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础大全一</title>
    <url>/2022/02/26/Java%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、-Java变量"><a href="#一、-Java变量" class="headerlink" title="一、 Java变量"></a>一、 Java变量</h1><ul>
<li>局部变量：存储在方法的栈内存中<ul>
<li>形参</li>
<li>方法内的局部变量</li>
<li>代码块的局部变量</li>
<li>无法用static修饰</li>
</ul>
</li>
<li>类变量（静态变量）：用static修饰的变量，调用时使用类名.变量名（static可以修饰方法名）</li>
<li>成员变量（非静态变量）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RightDef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1 = num2 + <span class="number">5</span>;  <span class="comment">// 静态变量无需考虑声明的位置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num2 = <span class="number">20</span>; <span class="comment">// 静态变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、Java访问控制权限"><a href="#二、Java访问控制权限" class="headerlink" title="二、Java访问控制权限"></a>二、Java访问控制权限</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th>private</th>
<th>default</th>
<th>protected</th>
<th>public</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">同一类</td>
<td>y</td>
<td>y</td>
<td>y</td>
<td>y</td>
</tr>
<tr>
<td style="text-align:left">同一包内的类</td>
<td></td>
<td>y</td>
<td>y</td>
<td>y</td>
</tr>
<tr>
<td style="text-align:left">子类</td>
<td></td>
<td></td>
<td>y</td>
<td>y</td>
</tr>
<tr>
<td style="text-align:left">其他包内的类</td>
<td></td>
<td></td>
<td>需要继承</td>
<td>y</td>
</tr>
</tbody>
</table>
</div>
<h1 id="三、Java源程序与编译型运行区别"><a href="#三、Java源程序与编译型运行区别" class="headerlink" title="三、Java源程序与编译型运行区别"></a>三、Java源程序与编译型运行区别</h1><img src="/2022/02/26/Java%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/java%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png" class="" title="img">
<h1 id="四、程序控制"><a href="#四、程序控制" class="headerlink" title="四、程序控制"></a>四、程序控制</h1><h2 id="4-1-循环"><a href="#4-1-循环" class="headerlink" title="4.1 循环"></a>4.1 循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Foreach语法，用于数组和容器</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">float</span> x : f)&#123;           <span class="comment">// f是数组或容器</span></span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-条件"><a href="#4-2-条件" class="headerlink" title="4.2 条件"></a>4.2 条件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-3-选择"><a href="#4-3-选择" class="headerlink" title="4.3 选择"></a>4.3 选择</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value1: <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2: <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="五、数组"><a href="#五、数组" class="headerlink" title="五、数组"></a>五、数组</h1><h2 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h2><ul>
<li>数组属于引用数据类型</li>
<li>包含：数组名、下标、元素</li>
</ul>
<h2 id="5-2-特点"><a href="#5-2-特点" class="headerlink" title="5.2 特点"></a>5.2 特点</h2><ol>
<li>数组是有序排列的</li>
<li>数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</li>
<li>创建数组对象会在内存中开辟一整块连续的空间</li>
<li>数组的长度一旦确定，就不能修改</li>
</ol>
<h2 id="5-3-操作"><a href="#5-3-操作" class="headerlink" title="5.3 操作"></a>5.3 操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ids;  <span class="comment">//数组声明</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">//静态初始化，初始化同时进行赋值，new int[]不能省略</span></span><br><span class="line"><span class="keyword">int</span>[] ids = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态初始化，初始化与元素赋值分开</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="keyword">int</span> len = ids.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组元素的调用</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">&quot;ls&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="5-4-数组元素的默认初始化值"><a href="#5-4-数组元素的默认初始化值" class="headerlink" title="5.4 数组元素的默认初始化值"></a>5.4 数组元素的默认初始化值</h2><ul>
<li>整型：0</li>
<li>浮点型：0</li>
<li>char：0或’\u0000’，而非’0’</li>
<li>boolean：false</li>
<li>数组元素是引用数据类型时：null</li>
</ul>
<h2 id="5-5-多维数组"><a href="#5-5-多维数组" class="headerlink" title="5.5 多维数组"></a>5.5 多维数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二维数组静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr1[] = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr1[] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态初始化1</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态初始化2</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">0</span>]); <span class="comment">//由于没有初始化，所以会报空指针异常</span></span><br><span class="line"></span><br><span class="line">arr2[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">4</span>];    <span class="comment">// 给arr[1]初始化后，再来输出就不会报错</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误形式</span></span><br><span class="line"><span class="comment">// int[][] arr3 = new int[4][3]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-5-1-多维数组的默认初始值"><a href="#5-5-1-多维数组的默认初始值" class="headerlink" title="5.5.1 多维数组的默认初始值"></a>5.5.1 多维数组的默认初始值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);     <span class="comment">// 地址值</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);      <span class="comment">// null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-6-数组的遍历"><a href="#5-6-数组的遍历" class="headerlink" title="5.6 数组的遍历"></a>5.6 数组的遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foreach方式</span></span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element:a)</span><br><span class="line">    System.out.println(element);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-7-Array类"><a href="#5-7-Array类" class="headerlink" title="5.7 Array类"></a>5.7 Array类</h2><h3 id="5-7-1-常用方法"><a href="#5-7-1-常用方法" class="headerlink" title="5.7.1 常用方法"></a>5.7.1 常用方法</h3><ul>
<li>java.util.Array类的所有方法均为静态方法</li>
<li>boolean equals(int[] a,int[] b)：判断两个数组是否相等</li>
<li>String toString(int[] a)：输出数组信息</li>
<li>void fill(int[] a,int val)：将指定值填充到数组中</li>
<li>void sort(int[] a)：对数组进行排序（快速排序）</li>
<li>int binarySearch(int[] a,int key)：对排序后的数进行二分法检索指定的值</li>
</ul>
<h2 id="5-8-数组常见异常"><a href="#5-8-数组常见异常" class="headerlink" title="5.8 数组常见异常"></a>5.8 数组常见异常</h2><ul>
<li>空指针：NullPointerException</li>
<li>数组下标越界：ArrayIndexOutOfBoundsException</li>
</ul>
<h1 id="六、类和对象"><a href="#六、类和对象" class="headerlink" title="六、类和对象"></a>六、类和对象</h1><h2 id="6-1-类"><a href="#6-1-类" class="headerlink" title="6.1 类"></a>6.1 类</h2><h3 id="6-1-1-构造器"><a href="#6-1-1-构造器" class="headerlink" title="6.1.1 构造器"></a>6.1.1 构造器</h3><ul>
<li>一个在创建对象时被自动调用的特殊方法</li>
<li>名称必须要和类名相同</li>
<li>构造器调用顺序是客-&gt;主</li>
<li>每个类都有构造方法，没有显示的为类定义构造方法，Java编译器会提供一个默认的构造方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rock2</span></span>&#123;</span><br><span class="line">    Rock(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Rock&quot;</span>+i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">SimpleConstructor2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">            <span class="keyword">new</span> Rock2(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Rock 0 Rock 1 Rock 2 Rock 3 Rock 4 Rock 5 Rock 6 Rock 7</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-1-2-类的定义"><a href="#6-1-2-类的定义" class="headerlink" title="6.1.2 类的定义"></a>6.1.2 类的定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  String breed;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-1-3-类中的变量类型"><a href="#6-1-3-类中的变量类型" class="headerlink" title="6.1.3 类中的变量类型"></a>6.1.3 类中的变量类型</h3><ul>
<li>局部变量</li>
<li>成员变量</li>
<li>类变量</li>
</ul>
<h2 id="6-2-对象"><a href="#6-2-对象" class="headerlink" title="6.2 对象"></a>6.2 对象</h2><ul>
<li>声明：声明一个对象，包括对象名和对象类型</li>
<li>实例化：使用new来创建一个对象</li>
<li>初始化：new创建对象时，会调用构造函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">&quot;tommy&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="七、面向对象特性"><a href="#七、面向对象特性" class="headerlink" title="七、面向对象特性"></a>七、面向对象特性</h2><h2 id="7-1-封装"><a href="#7-1-封装" class="headerlink" title="7.1 封装"></a>7.1 封装</h2><ul>
<li>创建类以实现现实中抽象事物属性以及方法的封装</li>
</ul>
<h2 id="7-2-继承"><a href="#7-2-继承" class="headerlink" title="7.2 继承"></a>7.2 继承</h2><h3 id="7-2-1-继承的实现"><a href="#7-2-1-继承的实现" class="headerlink" title="7.2.1 继承的实现"></a>7.2.1 继承的实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span> <span class="keyword">extends</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-2-2-继承的特性"><a href="#7-2-2-继承的特性" class="headerlink" title="7.2.2 继承的特性"></a>7.2.2 继承的特性</h3><ul>
<li>子类拥有父类非private的属性、方法</li>
<li>所有的类都继承于java.lang.Object</li>
</ul>
<h3 id="7-2-3-Super关键字"><a href="#7-2-3-Super关键字" class="headerlink" title="7.2.3 Super关键字"></a>7.2.3 Super关键字</h3><ol>
<li>在子类的成员方法中，访问父类的成员变量。</li>
<li>在子类的成员方法中，访问父类的成员方法。</li>
<li>在子类的构造方法中，访问父类的构造方法。</li>
</ol>
<h2 id="7-3-多态"><a href="#7-3-多态" class="headerlink" title="7.3 多态"></a>7.3 多态</h2><h3 id="7-3-1-多态实现的必要条件"><a href="#7-3-1-多态实现的必要条件" class="headerlink" title="7.3.1 多态实现的必要条件"></a>7.3.1 多态实现的必要条件</h3><ul>
<li>继承</li>
<li>重写</li>
<li>父类引用指向子类对象</li>
</ul>
<h3 id="7-3-2-多态的实现方式"><a href="#7-3-2-多态的实现方式" class="headerlink" title="7.3.2 多态的实现方式"></a>7.3.2 多态的实现方式</h3><ul>
<li>重写</li>
<li>接口</li>
<li>抽象类和抽象方法</li>
</ul>
<h1 id="八、抽象类和抽象方法"><a href="#八、抽象类和抽象方法" class="headerlink" title="八、抽象类和抽象方法"></a>八、抽象类和抽象方法</h1><h2 id="8-1-抽象类"><a href="#8-1-抽象类" class="headerlink" title="8.1 抽象类"></a>8.1 抽象类</h2><ul>
<li>抽象类用来描述一种类型应该具备的基本特征与功能，具体如何去完成这些行为由子类通过方法重写来完成</li>
<li>抽象方法指只有功能声明，没有功能主体实现的方法</li>
<li>有抽象方法的类一定是抽象类</li>
<li>抽象类无法直接创建对象，只能被子类继承后，创建子类对象</li>
<li>抽象方法必须被子类重写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String address, <span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Constructing an Employee&quot;</span>);</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.address = address;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Inside Employee computePay&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mailing a check to &quot;</span> + <span class="keyword">this</span>.name</span><br><span class="line">       + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>.address);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name + <span class="string">&quot; &quot;</span> + address + <span class="string">&quot; &quot;</span> + number;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> address;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String newAddress)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      address = newAddress;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> number;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-3-抽象方法"><a href="#8-3-抽象方法" class="headerlink" title="8.3 抽象方法"></a>8.3 抽象方法</h2><ul>
<li>抽象方法没有方法体，子类继承后必须重写该方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//其余代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="九、Java接口"><a href="#九、Java接口" class="headerlink" title="九、Java接口"></a>九、Java接口</h1><h2 id="9-1-接口与类的区别"><a href="#9-1-接口与类的区别" class="headerlink" title="9.1 接口与类的区别"></a>9.1 接口与类的区别</h2><ul>
<li>接口不能用于实例化对象。</li>
<li>接口没有构造方法。</li>
<li>接口中所有的方法必须是抽象方法。</li>
<li>接口中的成员变量只能是 public static final 类型。</li>
<li>接口不是被类继承了，而是要被类实现。</li>
<li>接口支持多继承</li>
</ul>
<h2 id="9-2-接口的实现"><a href="#9-2-接口的实现" class="headerlink" title="9.2 接口的实现"></a>9.2 接口的实现</h2><ul>
<li><p>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。</p>
</li>
<li><p>类使用implements关键字实现接口。在类声明中，Implements关键字放在class声明后面。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MammalInt</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">noOfLegs</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      MammalInt m = <span class="keyword">new</span> MammalInt();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-4-接口的特性"><a href="#9-4-接口的特性" class="headerlink" title="9.4 接口的特性"></a>9.4 接口的特性</h2><ul>
<li>接口是隐式抽象的，当声明一个接口的时候，不必使用abstract关键字。</li>
<li>接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键字。</li>
<li>接口中的方法都是公有的。</li>
</ul>
<h2 id="9-5-接口的继承"><a href="#9-5-接口的继承" class="headerlink" title="9.5 接口的继承"></a>9.5 接口的继承</h2><ul>
<li>一个接口能继承另一个接口，和类之间的继承方式比较相似。接口的继承使用extends关键字，子接口继承父接口的方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHomeTeam</span><span class="params">(String name)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisitingTeam</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件名: Football.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Football</span> <span class="keyword">extends</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">homeTeamScored</span><span class="params">(<span class="keyword">int</span> points)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitingTeamScored</span><span class="params">(<span class="keyword">int</span> points)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endOfQuarter</span><span class="params">(<span class="keyword">int</span> quarter)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件名: Hockey.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">homeGoalScored</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitingGoalScored</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endOfPeriod</span><span class="params">(<span class="keyword">int</span> period)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">overtimePeriod</span><span class="params">(<span class="keyword">int</span> ot)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Hockey接口自己声明了四个方法，从Sports接口继承了两个方法，这样，实现Hockey接口的类需要实现六个方法。</li>
<li>相似的，实现Football接口的类需要实现五个方法，其中两个来自于Sports接口。</li>
</ul>
<h2 id="9-6-接口的多继承"><a href="#9-6-接口的多继承" class="headerlink" title="9.6 接口的多继承"></a>9.6 接口的多继承</h2><ul>
<li><p>在Java中，类的多继承是不合法，但接口允许多继承。</p>
</li>
<li><p>在接口的多继承中extends关键字只需要使用一次，在其后跟着继承接口。 如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span>, <span class="title">Event</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="十、Java枚举"><a href="#十、Java枚举" class="headerlink" title="十、Java枚举"></a>十、Java枚举</h1><h2 id="10-1-枚举的实现"><a href="#10-1-枚举的实现" class="headerlink" title="10.1 枚举的实现"></a>10.1 枚举的实现</h2><ul>
<li><p>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。</p>
</li>
<li><p>Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 , 来分割。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 执行输出结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Color c1 = Color.RED;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果为RED</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="10-2-迭代枚举元素"><a href="#10-2-迭代枚举元素" class="headerlink" title="10.2 迭代枚举元素"></a>10.2 迭代枚举元素</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Color myVar : Color.values()) &#123;</span><br><span class="line">      System.out.println(myVar);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-3-枚举中的方法"><a href="#10-3-枚举中的方法" class="headerlink" title="10.3 枚举中的方法"></a>10.3 枚举中的方法</h2><ul>
<li>values() 返回枚举类中所有的值。</li>
<li>ordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。</li>
<li>valueOf()方法返回指定字符串值的枚举常量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 values()</span></span><br><span class="line">        Color[] arr = Color.values();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 迭代枚举</span></span><br><span class="line">        <span class="keyword">for</span> (Color col : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查看索引</span></span><br><span class="line">            System.out.println(col + <span class="string">&quot; at index &quot;</span> + col.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 使用 valueOf() 返回枚举常量，不存在的会报错 IllegalArgumentException</span></span><br><span class="line">        System.out.println(Color.valueOf(<span class="string">&quot;RED&quot;</span>));</span><br><span class="line">        <span class="comment">// System.out.println(Color.valueOf(&quot;WHITE&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果</span></span><br><span class="line"><span class="comment">RED at index 0</span></span><br><span class="line"><span class="comment">GREEN at index 1</span></span><br><span class="line"><span class="comment">BLUE at index 2</span></span><br><span class="line"><span class="comment">RED</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="十一、Java异常"><a href="#十一、Java异常" class="headerlink" title="十一、Java异常"></a>十一、Java异常</h1><img src="/2022/02/26/Java%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/Java%E5%BC%82%E5%B8%B8.png" class="" title="image1">
<h2 id="11-1-异常分类"><a href="#11-1-异常分类" class="headerlink" title="11.1 异常分类"></a>11.1 异常分类</h2><ol>
<li>检查性异常: 不处理编译不能通过</li>
<li>非检查性异常:不处理编译可以通过，如果有抛出直接抛到控制台</li>
<li>运行时异常: 就是非检查性异常</li>
<li>非运行时异常: 就是检查性异常</li>
</ol>
<blockquote>
<p>所有的异常类是从 java.lang.Exception 类继承的子类</p>
</blockquote>
<h2 id="11-2-异常捕获"><a href="#11-2-异常捕获" class="headerlink" title="11.2 异常捕获"></a>11.2 异常捕获</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单捕获</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Catch 块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多异常捕获</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 异常的变量名<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-3-异常抛出"><a href="#11-3-异常抛出" class="headerlink" title="11.3 异常抛出"></a>11.3 异常抛出</h2><h3 id="11-3-1-throws关键字"><a href="#11-3-1-throws关键字" class="headerlink" title="11.3.1 throws关键字"></a>11.3.1 throws关键字</h3><ul>
<li>用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上传，需要由方法的调用者进行异常处理</li>
<li>用在方法声明后面，跟的是异常类名</li>
<li>可以跟多个异常类名，用逗号隔开</li>
<li>表示抛出异常，由该方法的调用者来处理</li>
<li>throws表示出现异常的一种可能性，并不一定会发生这些异常</li>
</ul>
<h3 id="11-3-2-throw关键字"><a href="#11-3-2-throw关键字" class="headerlink" title="11.3.2 throw关键字"></a>11.3.2 throw关键字</h3><ul>
<li><p>用来抛出一个具体的异常类型。</p>
</li>
<li><p>用在方法体内，跟的是异常对象名</p>
</li>
<li>只能抛出一个异常对象名</li>
<li>表示抛出异常，由方法体内的语句处理</li>
<li>throw则是抛出了异常，执行throw则一定抛出了某种异常  </li>
<li>如果异常对象是非 RuntimeException 则需要在方法申明时加上该异常的抛出 即需要加上 throws 语句 或者 在方法体内 try catch 处理该异常，否则编译报错</li>
<li>执行到 throw 语句则后面的语句块不再执行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> constxiong.interview;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThrowsThrow</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		testThrows();</span><br><span class="line">		</span><br><span class="line">		Integer i = <span class="keyword">null</span>;</span><br><span class="line">		testThrow(i);</span><br><span class="line">		</span><br><span class="line">		String filePath = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			testThrow(filePath);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试 throws 关键字</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> NullPointerException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testThrows</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">		Integer i = <span class="keyword">null</span>;</span><br><span class="line">		System.out.println(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试 throw 关键字抛出 运行时异常</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testThrow</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();<span class="comment">//运行时异常不需要在方法上申明</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试 throw 关键字抛出 非运行时异常，需要方法体需要加 throws 异常抛出申明</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testThrow</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (filePath == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IOException();<span class="comment">//运行时异常不需要在方法上申明</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-4-自定义异常类"><a href="#11-4-自定义异常类" class="headerlink" title="11.4 自定义异常类"></a>11.4 自定义异常类</h2><ul>
<li>所有异常都必须是 Throwable 的子类。</li>
<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>
<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名InsufficientFundsException.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//自定义异常类，继承Exception类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsufficientFundsException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">InsufficientFundsException</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> amount;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件名称 CheckingAccount.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//此类模拟银行账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckingAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//balance为余额，number为卡号</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CheckingAccount</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：存钱</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      balance += amount;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：取钱</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">                              InsufficientFundsException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(amount &lt;= balance)</span><br><span class="line">      &#123;</span><br><span class="line">         balance -= amount;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">double</span> needs = amount - balance;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> InsufficientFundsException(needs);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：返回余额</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> balance;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：返回卡号</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法</span></span><br><span class="line"><span class="comment">//文件名称 BankDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      CheckingAccount c = <span class="keyword">new</span> CheckingAccount(<span class="number">101</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Depositing $500...&quot;</span>);</span><br><span class="line">      c.deposit(<span class="number">500.00</span>);</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;\nWithdrawing $100...&quot;</span>);</span><br><span class="line">         c.withdraw(<span class="number">100.00</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;\nWithdrawing $600...&quot;</span>);</span><br><span class="line">         c.withdraw(<span class="number">600.00</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(InsufficientFundsException e)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Sorry, but you are short $&quot;</span></span><br><span class="line">                                  + e.getAmount());</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">Depositing $500...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Withdrawing $100...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Withdrawing $600...</span></span><br><span class="line"><span class="comment">Sorry, but you are short $200.0</span></span><br><span class="line"><span class="comment">InsufficientFundsException</span></span><br><span class="line"><span class="comment">        at CheckingAccount.withdraw(CheckingAccount.java:25)</span></span><br><span class="line"><span class="comment">        at BankDemo.main(BankDemo.java:13)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>H5C3基础大全一</title>
    <url>/2022/03/01/H5C3%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、HTML基础"><a href="#一、HTML基础" class="headerlink" title="一、HTML基础"></a>一、HTML基础</h1><h2 id="1-1-基础网页结构"><a href="#1-1-基础网页结构" class="headerlink" title="1.1 基础网页结构"></a>1.1 基础网页结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>day01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-1-1-结构"><a href="#1-1-1-结构" class="headerlink" title="1.1.1 结构"></a>1.1.1 结构</h3><ul>
<li>头部：<code>&lt;header&gt;</code></li>
<li>主体：<code>&lt;main&gt;</code></li>
<li>底部：<code>&lt;footer&gt;</code></li>
</ul>
<h3 id="1-1-2-内容区"><a href="#1-1-2-内容区" class="headerlink" title="1.1.2 内容区"></a>1.1.2 内容区</h3><ul>
<li>导航：<code>&lt;nav&gt;</code></li>
<li>侧边栏：<code>&lt;aside&gt;</code></li>
<li>文章区：<code>&lt;artical&gt;</code></li>
<li>读取区块：<code>&lt;section&gt;</code></li>
</ul>
<h3 id="1-1-3-注意"><a href="#1-1-3-注意" class="headerlink" title="1.1.3 注意"></a>1.1.3 注意</h3><ul>
<li>1.1.1和1.1.2的标签是h5新增的标签，使用的不多，一般使用div和span</li>
<li>div没有语义，就用来表示一个区域，目前来讲div还是我们主要的布局元素</li>
<li>span是一个行内元素，没有任何的语义，一般用于在网页中选中文字</li>
</ul>
<h2 id="1-2-实体符号"><a href="#1-2-实体符号" class="headerlink" title="1.2 实体符号"></a>1.2 实体符号</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">实体符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\&amp;nbsp</td>
<td style="text-align:center">表示空格</td>
</tr>
<tr>
<td style="text-align:center">\&amp;gt</td>
<td style="text-align:center">大于号</td>
</tr>
<tr>
<td style="text-align:center">&amp;lt</td>
<td style="text-align:center">小于号</td>
</tr>
<tr>
<td style="text-align:center">&amp;copy</td>
<td style="text-align:center">版权符号</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-3-块元素与行内元素"><a href="#1-3-块元素与行内元素" class="headerlink" title="1.3 块元素与行内元素"></a>1.3 块元素与行内元素</h2><h3 id="1-3-1-块元素（block-element）"><a href="#1-3-1-块元素（block-element）" class="headerlink" title="1.3.1 块元素（block element）"></a>1.3.1 块元素（block element）</h3><ul>
<li>在页面中独占一行的元素</li>
<li>块元素基本上什么都能放</li>
</ul>
<h3 id="1-3-2-行内元素（inline-element）"><a href="#1-3-2-行内元素（inline-element）" class="headerlink" title="1.3.2 行内元素（inline element）"></a>1.3.2 行内元素（inline element）</h3><ul>
<li>在页面中不会独占一行的元素，且该元素的宽高由其内容撑开</li>
<li>行内元素主要用来包裹文字</li>
<li>一般情况下会在块元素中放行内元素，而不会在行内元素中放块元素</li>
<li>浏览器对网页进行解析时，会自动对网页中不符合规范的内容进行修正</li>
</ul>
<h1 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h1><h2 id="2-1-网页组成部分"><a href="#2-1-网页组成部分" class="headerlink" title="2.1 网页组成部分"></a>2.1 网页组成部分</h2><ul>
<li>结构（HTML）</li>
<li>表现（CSS）</li>
<li>行为（JS）</li>
</ul>
<h2 id="2-2-CSS介绍"><a href="#2-2-CSS介绍" class="headerlink" title="2.2 CSS介绍"></a>2.2 CSS介绍</h2><ul>
<li>网页实际上是一个多层的结构，通过CSS可以分别为网页的每一层来设置样式</li>
<li>而最终我们能看到的知识网页的最上边一层</li>
<li>总之一句话，CSS用来设置网页中元素的样式</li>
</ul>
<h2 id="2-3-使用方式"><a href="#2-3-使用方式" class="headerlink" title="2.3 使用方式"></a>2.3 使用方式</h2><h3 id="2-3-1-第一种：内联样式，行内样式"><a href="#2-3-1-第一种：内联样式，行内样式" class="headerlink" title="2.3.1 第一种：内联样式，行内样式"></a>2.3.1 第一种：内联样式，行内样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在标签内部通过style属性来设置元素的样式</span></span><br><span class="line"><span class="comment">问题：</span></span><br><span class="line"><span class="comment">    1. 使用内联样式，样式只能对一个标签生效</span></span><br><span class="line"><span class="comment">    2. 如果希望影响到多个元素必须在每个元素中都复制一遍</span></span><br><span class="line"><span class="comment">    3. 并且当样式发生变化时，我们必须要一个一个的修改，非常的不方便</span></span><br><span class="line"><span class="comment">注意：开发时绝对不要使用内联样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 20px;&quot;</span>&gt;</span>少小离家老大回，乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-2-第二种：内部样式表"><a href="#2-3-2-第二种：内部样式表" class="headerlink" title="2.3.2 第二种：内部样式表"></a>2.3.2 第二种：内部样式表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    第二种方式（内部样式表）</span></span><br><span class="line"><span class="comment">        将样式编写到head钟的style标签里</span></span><br><span class="line"><span class="comment">            然后通过CSS的选择器来选中元素并为其设置各种样式</span></span><br><span class="line"><span class="comment">            可以同时为多个标签设置样式，并且修改时只需要修改一处即可全部应用</span></span><br><span class="line"><span class="comment">        内部样式表更加方便对样式进行复用</span></span><br><span class="line"><span class="comment">        问题：</span></span><br><span class="line"><span class="comment">            我们的内部样式表只能对一个网页起作用</span></span><br><span class="line"><span class="comment">                它里面的样式不能跨页面进行复用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">         <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">         <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h3 id="2-3-3-第三种：外部样式表（推荐）"><a href="#2-3-3-第三种：外部样式表（推荐）" class="headerlink" title="2.3.3 第三种：外部样式表（推荐）"></a>2.3.3 第三种：外部样式表（推荐）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    第三种方式（外部样式表）推荐方式</span></span><br><span class="line"><span class="comment">        可以将CSS样式编写到一个外部的CSS文件中</span></span><br><span class="line"><span class="comment">            然后通过link标签来引入外部的CSS文件</span></span><br><span class="line"><span class="comment">        外部样式表需要通过link标签进行引入</span></span><br><span class="line"><span class="comment">            意味着只要想使用这些样式的网页都可以对其进行引用</span></span><br><span class="line"><span class="comment">            使样式可以在不同页面之间进行复用</span></span><br><span class="line"><span class="comment">        将样式编写到外部的CSS文件中，可以最大限度的使用到浏览器的缓存机制</span></span><br><span class="line"><span class="comment">            从而加快网页的加载速度，提高用户的体验</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-基本语法"><a href="#2-4-基本语法" class="headerlink" title="2.4 基本语法"></a>2.4 基本语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">    样式:样式值;</span><br><span class="line">    样式:样式值;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-5-样式的继承"><a href="#2-5-样式的继承" class="headerlink" title="2.5 样式的继承"></a>2.5 样式的继承</h2><h3 id="2-5-1-概念"><a href="#2-5-1-概念" class="headerlink" title="2.5.1 概念"></a>2.5.1 概念</h3><ul>
<li>样式的继承：我们为一个元素设置的样式同时也会应用到它的后代元素上</li>
<li>继承是发生在祖先和后代之间的</li>
</ul>
<h3 id="2-5-2-作用"><a href="#2-5-2-作用" class="headerlink" title="2.5.2 作用"></a>2.5.2 作用</h3><ul>
<li>继承的设计是为了方便我们的开发，</li>
<li>利用继承我们可以将一些通用的样式统一设置到共同的祖先元素上，</li>
<li>这样只需要设置一次即可让所有的元素都具有该样式</li>
</ul>
<h3 id="2-5-3-注意"><a href="#2-5-3-注意" class="headerlink" title="2.5.3 注意"></a>2.5.3 注意</h3><ul>
<li>注意：并不是所有的样式都会被继承</li>
<li>比如    背景相关的，布局相关等的这些样式都不会被继承</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/*p元素设置的颜色也会作用到子元素span上*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    我是一个p元素</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素中的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是p元素外的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、CSS选择器"><a href="#三、CSS选择器" class="headerlink" title="三、CSS选择器"></a>三、CSS选择器</h1><h2 id="3-1-基本选择器"><a href="#3-1-基本选择器" class="headerlink" title="3.1 基本选择器"></a>3.1 基本选择器</h2><ul>
<li>元素选择器：标签名{}</li>
<li>id选择器：#id值{}</li>
<li>类选择器：.类名{}</li>
<li>通配选择器：*{}</li>
</ul>
<h2 id="3-2-复合选择器"><a href="#3-2-复合选择器" class="headerlink" title="3.2 复合选择器"></a>3.2 复合选择器</h2><h3 id="3-2-1-交集选择器"><a href="#3-2-1-交集选择器" class="headerlink" title="3.2.1 交集选择器"></a>3.2.1 交集选择器</h3><ul>
<li>作用：选中同时符合多个条件的元素</li>
<li>语法：选择器1 选择器2 … 选择器n{}</li>
<li>注意点：<ul>
<li>交集选择器中如果有元素选择器， 必须使用元素选择器开头</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 要求带有class为red的div */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span><span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 要求同时具有a b c三个类 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.c</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-并集选择器"><a href="#3-2-2-并集选择器" class="headerlink" title="3.2.2 并集选择器"></a>3.2.2 并集选择器</h3><ul>
<li>作用：同时选择多个选择器对应的元素</li>
<li>语法：选择器1,选择器2,…,选择器n{}<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span>, <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: blueviolet;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-3-关系选择器"><a href="#3-3-关系选择器" class="headerlink" title="3.3 关系选择器"></a>3.3 关系选择器</h2><h3 id="3-3-1-元素关系"><a href="#3-3-1-元素关系" class="headerlink" title="3.3.1 元素关系"></a>3.3.1 元素关系</h3><ul>
<li>父元素：直接包含子元素的元素叫父元素</li>
<li>子元素：直接被父元素包含的元素是子元素</li>
<li>祖先元素：直接或简介包含后代元素的元素叫做祖先元素<ul>
<li>一个元素的父元素也是它的祖先元素</li>
</ul>
</li>
<li>后代元素：直接或间接被祖先元素包含的元素<ul>
<li>子元素也是后代元素</li>
</ul>
</li>
<li>兄弟元素：拥有相同父元素的元素是兄弟元素</li>
</ul>
<h3 id="3-3-2-子元素选择器"><a href="#3-3-2-子元素选择器" class="headerlink" title="3.3.2 子元素选择器"></a>3.3.2 子元素选择器</h3><ul>
<li>作用：选中指定父元素的指定子元素</li>
<li>语法：父元素&gt;子元素<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-3-后代选择器"><a href="#3-3-3-后代选择器" class="headerlink" title="3.3.3 后代选择器"></a>3.3.3 后代选择器</h3><ul>
<li>作用：选中指定元素内的指定后代元素</li>
<li>语法：祖先 后代<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">     <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css"> &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-4-兄弟选择器：选择下一个兄弟"><a href="#3-3-4-兄弟选择器：选择下一个兄弟" class="headerlink" title="3.3.4 兄弟选择器：选择下一个兄弟"></a>3.3.4 兄弟选择器：选择下一个兄弟</h3><ul>
<li>语法：前一个 + 下一个</li>
<li>只对下一个兄弟起作用，其他兄弟不起作用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> + <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3-5-兄弟选择器：选择下面所有兄弟"><a href="#3-3-5-兄弟选择器：选择下面所有兄弟" class="headerlink" title="3.3.5 兄弟选择器：选择下面所有兄弟"></a>3.3.5 兄弟选择器：选择下面所有兄弟</h3><ul>
<li>语法：前一个 ~ 下一个</li>
<li>只对下面所有的兄弟起作用，前面的兄弟不起作用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> ~ <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-4-属性选择器"><a href="#3-4-属性选择器" class="headerlink" title="3.4 属性选择器"></a>3.4 属性选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名]    选择含有指定属性的元素*/</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名=属性值] 选择含有指定属性和属性值的元素*/</span></span><br><span class="line"><span class="xml">p[title=abc]&#123;</span></span><br><span class="line"><span class="xml">    color: orange;</span></span><br><span class="line"><span class="xml">&#125; </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名^=属性值]    选择属性值以指定值开头的元素*/</span></span><br><span class="line"><span class="xml">p[title^=abc]&#123;</span></span><br><span class="line"><span class="xml">    color: orange;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名$=属性值]    选择属性值以指定值结尾的元素*/</span></span><br><span class="line"><span class="xml">p[title$=abc]&#123;</span></span><br><span class="line"><span class="xml">    color: orange;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/*[属性名*=属性值]    选择属性值中含有某值的元素*/</span></span><br><span class="line"><span class="xml">p[title*=e]&#123;</span></span><br><span class="line"><span class="xml">    color: orange;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- title表示鼠标悬停时显示的文字 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>少小离家老大回<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;abcdef&quot;</span>&gt;</span>乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;helloabc&quot;</span>&gt;</span>乡音无改鬓毛衰<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>儿童相见不相识<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>秋水共长天一色<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 落霞与孤鹜齐飞<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-5-伪类选择器"><a href="#3-5-伪类选择器" class="headerlink" title="3.5 伪类选择器"></a>3.5 伪类选择器</h2><h3 id="3-5-1-概念"><a href="#3-5-1-概念" class="headerlink" title="3.5.1 概念"></a>3.5.1 概念</h3><ul>
<li>伪类（不存在的类，特殊的类）</li>
<li>伪类用来描述一个元素的特殊状态</li>
<li>比如：第一个子元素，被点击的元素、鼠标移入的元素</li>
</ul>
<h3 id="3-5-2-常用的伪类选择器"><a href="#3-5-2-常用的伪类选择器" class="headerlink" title="3.5.2 常用的伪类选择器"></a>3.5.2 常用的伪类选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>-child    第一个子元素</span><br><span class="line"><span class="selector-pseudo">:last-child</span>     最后一个子元素</span><br><span class="line"><span class="selector-pseudo">:nth-child</span>()    选中第n个子元素</span><br><span class="line">特殊值：</span><br><span class="line">        n   第n个 n的范围<span class="number">0</span>到正无穷</span><br><span class="line">        <span class="number">2</span>n 或 even  选中偶数位的元素</span><br><span class="line">        <span class="number">2</span>n+<span class="number">1</span> 或 odd     都表示奇数位元素</span><br><span class="line">以上这些伪类都是根据所有子元素进行排序</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:first</span>-of-type </span><br><span class="line"><span class="selector-pseudo">:last-of-type</span></span><br><span class="line"><span class="selector-pseudo">:nth-of-type</span>()</span><br><span class="line">这几个伪类的功能和上述的类似，不同点是他们是在同类型元素中进行排序</span><br><span class="line">                </span><br><span class="line"><span class="selector-pseudo">:not</span>()  否定伪类</span><br><span class="line">        将符合条件的元素从选择器中去除</span><br></pre></td></tr></table></figure>
<h3 id="3-5-3-使用"><a href="#3-5-3-使用" class="headerlink" title="3.5.3 使用"></a>3.5.3 使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 选中所有元素*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n)&#123;  </span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125; </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 选中偶数位元素元素*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n)&#123;  </span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125; </span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* 如果要选择li中的第三个需要用:nth-of-type(3) */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>))&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        &lt;span&gt;我是span&lt;/span&gt;   </span></span><br><span class="line"><span class="comment">        加上这句话，first-child就不能选中第一个li，</span></span><br><span class="line"><span class="comment">        可以使用first-of-type</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第四个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第五个<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-5-4-a元素的伪类"><a href="#3-5-4-a元素的伪类" class="headerlink" title="3.5.4 a元素的伪类"></a>3.5.4 a元素的伪类</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    :link   用来表示没访问过的链接（正常的链接）</span></span></span><br><span class="line"><span class="comment"><span class="css"> */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    :visited    用来表示访问过的链接</span></span></span><br><span class="line"><span class="comment"><span class="css">    </span></span></span><br><span class="line"><span class="comment"><span class="css">    由于隐私的原因，所以visited这个伪类只能修改链接的颜色</span></span></span><br><span class="line"><span class="comment"><span class="css">*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    :hover  用来表示鼠标移入的状态</span></span></span><br><span class="line"><span class="comment"><span class="css">*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css"> <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css"> <span class="attribute">color</span>: aqua;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">    :active 用来表示鼠标点击的状态</span></span></span><br><span class="line"><span class="comment"><span class="css">*/</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* hover和active    别的标签也能使用 */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1. 没有访问过的链接</span></span><br><span class="line"><span class="comment">    2. 访问过的链接</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-6-伪元素选择器"><a href="#3-6-伪元素选择器" class="headerlink" title="3.6 伪元素选择器"></a>3.6 伪元素选择器</h2><h3 id="3-6-1-概念"><a href="#3-6-1-概念" class="headerlink" title="3.6.1 概念"></a>3.6.1 概念</h3><ul>
<li>表示页面中一些并不真实的存在的元素（特殊的位置）</li>
<li>位元素使用  ::  开头</li>
<li>::first-letter  表示第一个字母</li>
<li>::first-line    表示第一行</li>
<li>::selection 表示鼠标拖动选中的内容</li>
<li>::before    表示元素的开始位置</li>
<li>::after     表示元素结尾的位置<ul>
<li>before和after必须结合content属性来使用</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&#x27;abc&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&#x27;123&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello How are you<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit, amet consectetur adipisicing elit. Consequuntur necessitatibus eaque cupiditate! Eum fuga eos nam placeat magnam libero quia suscipit? Provident natus iste perspiciatis voluptas animi impedit sint? Eius.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-7-选择器的权重"><a href="#3-7-选择器的权重" class="headerlink" title="3.7 选择器的权重"></a>3.7 选择器的权重</h2><h3 id="3-7-1-样式的冲突"><a href="#3-7-1-样式的冲突" class="headerlink" title="3.7.1 样式的冲突"></a>3.7.1 样式的冲突</h3><ul>
<li>当我们通过不同的选择器，选中一个相同的元素，并且为相同的样式设置不同的值，此时就发生了样式的冲突</li>
<li>发生样式冲突时，应用哪个样式由选择器的优先级（权重）决定</li>
</ul>
<h3 id="3-7-2-权重"><a href="#3-7-2-权重" class="headerlink" title="3.7.2 权重"></a>3.7.2 权重</h3><div class="table-container">
<table>
<thead>
<tr>
<th>样式</th>
<th>权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>内联样式</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>id选择器</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>类和伪类选择器</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>元素选择器</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>通配选择器</td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>继承的样式</td>
<td>没有优先级</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-7-3-注意"><a href="#3-7-3-注意" class="headerlink" title="3.7.3 注意"></a>3.7.3 注意</h3><ul>
<li>比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，则越优先显示</li>
<li>分组选择器是单独计算<ul>
<li>选择器的累加不会超过其最大的数量级，类选择器再高也不会超过id选择器</li>
<li>如果优先级计算后相同，则优先使用靠下的样式</li>
</ul>
</li>
<li>可以再某一个样式的后边添加!important，则此时该样式获取到最高的优先级，甚至超过内联样式<ul>
<li>注意：在开发中一定要慎用</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">*&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 因为span是继承div的，没有优先级，所有span使用的是通配中的样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>我是一个div <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div中的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、CSS单位与颜色"><a href="#四、CSS单位与颜色" class="headerlink" title="四、CSS单位与颜色"></a>四、CSS单位与颜色</h1><h2 id="4-1-长度单位"><a href="#4-1-长度单位" class="headerlink" title="4.1 长度单位"></a>4.1 长度单位</h2><h3 id="4-1-1-像素与百分比"><a href="#4-1-1-像素与百分比" class="headerlink" title="4.1.1 像素与百分比"></a>4.1.1 像素与百分比</h3><ul>
<li>像素：同样的200px在不同的设备下显示效果不一样</li>
<li>百分比：也可以将属性值设置为相对于其父元素属性的百分比<br>；可以使子元素跟随父元素的改变而改变</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-1-2-em和rem"><a href="#4-1-2-em和rem" class="headerlink" title="4.1.2 em和rem"></a>4.1.2 em和rem</h3><ul>
<li>em：em是相对于元素的字体大小来计算的；<ul>
<li>1em=1font-size</li>
<li>em会根据字体大小的改变而改变</li>
</ul>
</li>
<li>rem：rem是相对于根元素的字体大小来计算</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">10em</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">10rem</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">10rem</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-1-3-颜色单位"><a href="#4-1-3-颜色单位" class="headerlink" title="4.1.3 颜色单位"></a>4.1.3 颜色单位</h2><ul>
<li>RGB值：RGB通过三种颜色的不同浓度来调配出不同的颜色<ul>
<li>语法:rgb(红色,绿色,蓝色)</li>
</ul>
</li>
<li>RGBA：A表示透明度<ul>
<li>值为1表示不透明</li>
<li>值为0表示透明</li>
<li>值为.5表示半透明</li>
</ul>
</li>
<li>十六进制RGB值：<ul>
<li>语法：#红色绿色蓝色</li>
<li>如：#FFFFFF     表示白色</li>
</ul>
</li>
<li>HSL/HSLA值：<ul>
<li>H：色相 （0 - 360）</li>
<li>S：饱和度（0 - 100%）</li>
<li>L：亮度（0 - 100%）</li>
</ul>
</li>
</ul>
<h1 id="五、CSS盒子模型"><a href="#五、CSS盒子模型" class="headerlink" title="五、CSS盒子模型"></a>五、CSS盒子模型</h1><h2 id="5-1-文档流（normal-flow）"><a href="#5-1-文档流（normal-flow）" class="headerlink" title="5.1 文档流（normal flow）"></a>5.1 文档流（normal flow）</h2><p>网页是一个多层的结构<br>通过css可以分别为每一层来设置样式<br>作为用户只能看到最顶上一层<br>这些层中，最底下的一层称为文档流，文档流是网页的基础</p>
<h3 id="5-1-2-元素的状态"><a href="#5-1-2-元素的状态" class="headerlink" title="5.1.2 元素的状态"></a>5.1.2 元素的状态</h3><p>在文档流中<br>不在文档流中（脱离文档流）</p>
<h3 id="5-1-3-元素在文档流的特点"><a href="#5-1-3-元素在文档流的特点" class="headerlink" title="5.1.3 元素在文档流的特点"></a>5.1.3 元素在文档流的特点</h3><ul>
<li>块元素：<ul>
<li>块元素会在页面中独占一行（自上向下垂直排列）</li>
<li>默认宽度是父元素的全部（会把父元素撑满）</li>
<li>默认高度是被内容撑开（子元素）</li>
</ul>
</li>
<li>行内元素：<ul>
<li>行内元素不会独占页面的一行，只占自身的大小</li>
<li>行内元素在页面中自左向右水平排列，如果一行之中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（书写习惯一致）</li>
<li>行内元素的默认宽度和高度都是被内容撑开</li>
</ul>
</li>
</ul>
<h2 id="5-2-盒模型"><a href="#5-2-盒模型" class="headerlink" title="5.2 盒模型"></a>5.2 盒模型</h2><h3 id="5-2-1-概念"><a href="#5-2-1-概念" class="headerlink" title="5.2.1 概念"></a>5.2.1 概念</h3><ul>
<li>CSS将页面中的所有元素都设置为了一个矩形的盒子</li>
<li>将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置</li>
<li>每一个盒子都由以下几个部分组成：<ul>
<li>内容区（content）</li>
<li>内边距（padding）</li>
<li>边框（border）</li>
<li>外边距（margin）</li>
</ul>
</li>
</ul>
<img src="/2022/03/01/H5C3%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%B8%80/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" class="" title="image">
<h3 id="5-2-2-内容区"><a href="#5-2-2-内容区" class="headerlink" title="5.2.2 内容区"></a>5.2.2 内容区</h3><ul>
<li>内容区（content），元素中的所有的子元素和文本内容都在内容区中排列</li>
<li>内容区的大小由width和height两个属性来设置<ul>
<li>width   设置内容去的宽度</li>
<li>height  设置内容区的高度</li>
</ul>
</li>
</ul>
<h3 id="5-2-3-边框border"><a href="#5-2-3-边框border" class="headerlink" title="5.2.3 边框border"></a>5.2.3 边框border</h3><ul>
<li>边框（border），边框属于盒子边缘，边框里面属于盒子内部，出了边框都是盒子的外部</li>
<li>边框的大小会影响到整个盒子的大小</li>
<li>要设置边框，需要至少设置三个样式：<ul>
<li>边框的宽度：border-widht</li>
<li>边框的颜色：border-color</li>
<li>边框的风格：border-style</li>
</ul>
</li>
<li>属性值设置：见附录</li>
</ul>
<h3 id="5-2-4-内边距padding"><a href="#5-2-4-内边距padding" class="headerlink" title="5.2.4 内边距padding"></a>5.2.4 内边距padding</h3><ul>
<li>内边距：内容区和边框之间的距离是内边距</li>
<li>一共有四个方向的内边距：<ul>
<li>padding-top</li>
<li>padding-right</li>
<li>padding-bottom</li>
<li>padding-left</li>
</ul>
</li>
<li>内边距的设置会影响到盒子的大小</li>
<li>背景颜色会延伸到内边距上</li>
<li>一共盒子的可见框的大小，由内容区、内边距 和 边框共同决定</li>
<li>padding 内边距的简写属性，可以同时指定四个方向的内边距，规则和border-width一样</li>
</ul>
<h3 id="5-2-5-外边距margin"><a href="#5-2-5-外边距margin" class="headerlink" title="5.2.5 外边距margin"></a>5.2.5 外边距margin</h3><ul>
<li>外边距不会影响盒子可见框的大小</li>
<li>但是外边距会影响盒子的位置</li>
<li>一共有四个方向的外边距：<ul>
<li>margin-top      上外边距，设置一个正值，元素会向下移动</li>
<li>margin-right    默认情况下设置margin-right不会产生任何效果</li>
<li>margin-bottom   下外边距，设置一个正值，下面的元素会向下移动</li>
<li>margin-left     上外边距，设置一个正值，元素会向右移动</li>
</ul>
</li>
<li>margin也可以设置负值，如果是负值则元素会向相反的方向移动</li>
<li>元素在页面中是按照自左向右顺序排列的</li>
<li>所有默认情况下如果我们设置的左和上外边距则会移动元素自身；而设置下和右外边距会移动其他元素</li>
<li>margin的简写属性：margin  可以同时设置四个方向的外边距，用法和padding一样</li>
<li>margin会影响到盒子实际占用空间</li>
</ul>
<h2 id="5-3-盒子的尺寸"><a href="#5-3-盒子的尺寸" class="headerlink" title="5.3 盒子的尺寸"></a>5.3 盒子的尺寸</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--box-sizing  用来设置盒子尺寸的计算方式（设置width和height的作用）</span></span><br><span class="line"><span class="comment">    可选值</span></span><br><span class="line"><span class="comment">        content-box 默认值，宽度和高度用来设置内容区的大小</span></span><br><span class="line"><span class="comment">        bordor-box  宽度和高度用来设置整个盒子可见框的大小</span></span><br><span class="line"><span class="comment">            width 和 height 指的是内容区 和 内边距 和边框的总大小--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">                默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定</span></span></span><br><span class="line"><span class="comment"><span class="css"></span></span></span><br><span class="line"><span class="comment"><span class="css">                box-sizing  用来设置盒子尺寸的计算方式（设置width和height的作用）</span></span></span><br><span class="line"><span class="comment"><span class="css">                    可选值</span></span></span><br><span class="line"><span class="comment"><span class="css">                        content-box 默认值，宽度和高度用来设置内容区的大小</span></span></span><br><span class="line"><span class="comment"><span class="css">                        bordor-box  宽度和高度用来设置整个盒子可见框的大小</span></span></span><br><span class="line"><span class="comment"><span class="css">                            width 和 height 指的是内容区 和 内边距 和边框的总大小</span></span></span><br><span class="line"><span class="comment"><span class="css">             */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="六、布局"><a href="#六、布局" class="headerlink" title="六、布局"></a>六、布局</h1><h2 id="6-1-水平布局"><a href="#6-1-水平布局" class="headerlink" title="6.1 水平布局"></a>6.1 水平布局</h2><ul>
<li>元素在其父元素中水平方向的位置由以下几个属性共同决定<ul>
<li>margin-left</li>
<li>border-left</li>
<li>padding-left</li>
<li>width</li>
<li>padding-right</li>
<li>border-right</li>
<li>margin-right</li>
</ul>
</li>
<li>一个元素在其父元素中，水平布局必须满足以下的等式<ul>
<li>margin-left+border-left+padding-left+width+padding-right+border-right+margin-right等于其父元素内容区的宽度</li>
</ul>
</li>
</ul>
<h3 id="6-1-2-过度约束"><a href="#6-1-2-过度约束" class="headerlink" title="6.1.2 过度约束"></a>6.1.2 过度约束</h3><ul>
<li>0 + 0 + 0 + 200 + 0 + 0 + 0 = 800</li>
<li>0 + 0 + 0 + 200 + 0 + 0 + 600 = 800</li>
<li>以上等式必须满足，如果相加结果使等式不成立，则称为过度约束，则等式会自动调整</li>
<li>调整的情况：<ul>
<li>如果这七个值中没有为 auto 的情况，则浏览器会自动调整margin-right值，以使等式满足</li>
</ul>
</li>
</ul>
<h3 id="6-1-3-可以设置为auto的值"><a href="#6-1-3-可以设置为auto的值" class="headerlink" title="6.1.3 可以设置为auto的值"></a>6.1.3 可以设置为auto的值</h3><ul>
<li>width</li>
<li>margin-left</li>
<li>margin-right</li>
<li>如果某个值为auto，会自动调整为auto的那个值以使等式成立</li>
<li>比如：0 + 0 + 0 + auto + 0 + 0 + 0 = 800，会让auto为800</li>
<li>如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0</li>
<li>如果将三个值都设置为auto，则外边距都是0，宽度最大</li>
</ul>
<h3 id="6-1-4-元素居中效果"><a href="#6-1-4-元素居中效果" class="headerlink" title="6.1.4 元素居中效果"></a>6.1.4 元素居中效果</h3><ul>
<li>如果将两个外边距设置为auto，宽度值固定，则会将外边距设置为相同的值</li>
<li>元素居中效果：auto + 0 + 0 + 200 + 0 + 0 + auto = 800</li>
<li>所以我们经常利用这个特点来使一个元素在其父元素中水平居中</li>
<li>示例：<ul>
<li>width:xxx px;</li>
<li>margin:0 auto;</li>
</ul>
</li>
<li>如果width超过内容区，则会设置margin-right为负值，以使得等式成立<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">10px</span> red solid;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#dfa</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: auto;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="6-2-垂直布局"><a href="#6-2-垂直布局" class="headerlink" title="6.2 垂直布局"></a>6.2 垂直布局</h2><ul>
<li>默认情况下父元素的高度被内容撑开</li>
<li>子元素是在父元素的内容区中排列的</li>
<li>如果子元素的大小超过了父元素，则子元素会从父元素中溢出</li>
<li>使用 overflow 属性来设置父元素如何处理溢出的子元素</li>
<li>overflow属性可选值<ul>
<li>visible 默认值，子元素会从父元素中溢出，在父元素外部的位置显示</li>
<li>hidden  溢出的内容将会被裁剪不会显示</li>
<li>scroll  生成两个滚动条，通过滚动条来查看完整的内容</li>
<li>auto    根据需要生成滚动条</li>
</ul>
</li>
<li>overflow-x：      设置水平方向</li>
<li>overflow-y：      设置垂直方向</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    </span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* height: 100px; */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">overflow</span>: scroll;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="七、外边距的重叠"><a href="#七、外边距的重叠" class="headerlink" title="七、外边距的重叠"></a>七、外边距的重叠</h1><h2 id="7-1-概念"><a href="#7-1-概念" class="headerlink" title="7.1 概念"></a>7.1 概念</h2><ul>
<li>相邻的垂直方向外边距会发生重叠现象</li>
</ul>
<h2 id="7-2-兄弟元素"><a href="#7-2-兄弟元素" class="headerlink" title="7.2 兄弟元素"></a>7.2 兄弟元素</h2><ul>
<li>兄弟元素间的相邻垂直外边距会取两者之间的较大值（两者都是正值）</li>
<li>特殊情况：<ul>
<li>如果相邻的外边距一正一负，则取两者的和</li>
<li>如果相邻的外边距都是负值，则取两者中绝对值较大的</li>
</ul>
</li>
</ul>
<h2 id="7-3-父子元素"><a href="#7-3-父子元素" class="headerlink" title="7.3 父子元素"></a>7.3 父子元素</h2><ul>
<li>父子元素间相邻外边距，子元素的会传递给父元素（上外边距）</li>
<li>父子外边距的折叠会影响到页面的布局，必须要进行处理</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>,<span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 设置一个下外边距 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/* 设置一个上外边距 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* padding-top: 100px; */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">border-top</span>: <span class="number">1px</span> <span class="number">#bfa</span> solid;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin-top</span>: <span class="number">99px</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="八、行内元素的盒模型"><a href="#八、行内元素的盒模型" class="headerlink" title="八、行内元素的盒模型"></a>八、行内元素的盒模型</h1><h2 id="8-1-特点"><a href="#8-1-特点" class="headerlink" title="8.1 特点"></a>8.1 特点</h2><ul>
<li>行内元素不支持设置宽度和高度</li>
<li>行内元素可以设置padding，但是垂直方向的padding不会影响页面的布局</li>
<li>行内元素可以设置border，垂直方向的border不会影响页面的布局</li>
<li>行内元素可以设置margin，垂直方向的margin不会影响布局</li>
</ul>
<h2 id="8-2-display"><a href="#8-2-display" class="headerlink" title="8.2 display"></a>8.2 display</h2><ul>
<li>display：用来设置元素显示的类型</li>
<li>属性可选值：<ul>
<li>inline ： 将元素设置为行内元素</li>
<li>block ：  将元素设置为块元素</li>
<li>inline-block   ： 将元素设置为行内块元素；行内块，既可以设置宽度和高度又不会独占一行</li>
<li>table ：  将元素设置为表格</li>
<li>none  ：  元素不在页面中显示</li>
</ul>
</li>
</ul>
<h2 id="8-3-visibility"><a href="#8-3-visibility" class="headerlink" title="8.3 visibility"></a>8.3 visibility</h2><ul>
<li>visibility ： 用来设置元素的显示状态</li>
<li>属性可选值：<ul>
<li>visible ： 默认值，元素在页面中正常显示</li>
<li>hidden ： 元素在页面中隐藏    不显示，但是依然占据页面中的位置</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.s1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">    <span class="comment">/* width: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">     height: 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">     <span class="comment">/* padding: 100px; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">     <span class="comment">/* border: 100px solid red; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">     <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* display: inline; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* display: block; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* display: inline-block; */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* display: none; */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="九、默认样式"><a href="#九、默认样式" class="headerlink" title="九、默认样式"></a>九、默认样式</h1><h2 id="9-1-概念"><a href="#9-1-概念" class="headerlink" title="9.1 概念"></a>9.1 概念</h2><ul>
<li>通常情况下，浏览器都会为元素设置一些默认样式</li>
<li>默认样式的存在会影响到页面的布局，通常情况下编写网页时必须要去除掉浏览器的默认样式（pc端的页面）</li>
</ul>
<h2 id="9-2-重置样式表reset-css"><a href="#9-2-重置样式表reset-css" class="headerlink" title="9.2 重置样式表reset.css"></a>9.2 重置样式表reset.css</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,pre,hr,<span class="selector-tag">figure</span>,<span class="selector-tag">table</span>,<span class="selector-tag">caption</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">menu</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">header</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">section</span>,<span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">hgroup</span>,<span class="selector-tag">address</span>,<span class="selector-tag">figure</span>,<span class="selector-tag">figcaption</span>,<span class="selector-tag">menu</span>,<span class="selector-tag">details</span>&#123;<span class="attribute">display</span>:block;&#125;</span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">caption</span>,<span class="selector-tag">th</span>&#123;<span class="attribute">text-align</span><span class="selector-pseudo">:left</span>;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">img</span>,<span class="selector-tag">iframe</span>,<span class="selector-tag">abbr</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">i</span>,<span class="selector-tag">cite</span>,<span class="selector-tag">em</span>,<span class="selector-tag">var</span>,<span class="selector-tag">address</span>,<span class="selector-tag">dfn</span>&#123;<span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"><span class="selector-attr">[hidefocus]</span>,<span class="selector-tag">summary</span>&#123;<span class="attribute">outline</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,small&#123;<span class="attribute">font-size</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-tag">sup</span>,sub&#123;<span class="attribute">font-size</span>:<span class="number">83%</span>;&#125;</span><br><span class="line">pre,<span class="selector-tag">code</span>,<span class="selector-tag">kbd</span>,<span class="selector-tag">samp</span>&#123;<span class="attribute">font-family</span>:inherit;&#125;</span><br><span class="line"><span class="selector-tag">q</span>:before,q:after&#123;content:none;&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;<span class="attribute">overflow</span>:auto;<span class="attribute">resize</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">label</span>,<span class="selector-tag">summary</span>&#123;<span class="attribute">cursor</span><span class="selector-pseudo">:default</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>&#123;<span class="attribute">cursor</span>:pointer;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">em</span>,<span class="selector-tag">strong</span>,<span class="selector-tag">b</span>&#123;<span class="attribute">font-weight</span>:bold;&#125;</span><br><span class="line"><span class="selector-tag">del</span>,<span class="selector-tag">ins</span>,u,s,<span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,select,keygen,<span class="selector-tag">legend</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.14</span> arial,\<span class="number">5</span>b8b\<span class="number">4</span>f53;<span class="attribute">color</span>:<span class="number">#333</span>;<span class="attribute">outline</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#333</span>;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>H5C3</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>H5C3进阶一</title>
    <url>/2022/03/01/H5C3%E8%BF%9B%E9%98%B6%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、浮动"><a href="#一、浮动" class="headerlink" title="一、浮动"></a>一、浮动</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><ul>
<li>通过浮动可以使一个元素向其父元素的左侧或右侧移动</li>
<li>使用 float 属性来设置于元素的浮动，可选值：<ul>
<li>none 默认值 元素不浮动</li>
<li>left 元素向右浮动</li>
<li>right 元素向右浮动</li>
</ul>
</li>
</ul>
<h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ol>
<li>浮动的元素会完全脱离文档流，不再占据文档流中的位置</li>
<li>设置浮动以后元素回向父元素的左侧或右侧移动</li>
<li>浮动元素默认不会从父元素中移出</li>
<li>浮动元素向左或向右移动时，不会超过它前边的其他浮动元素</li>
<li>如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移</li>
<li>浮动元素不会超过它上边的浮动的兄弟元素，最多就是和它一样高</li>
</ol>
<h2 id="1-3-注意"><a href="#1-3-注意" class="headerlink" title="1.3 注意"></a>1.3 注意</h2><ol>
<li>元素设置浮动以后，水平布局的等式便不需要强制成立</li>
<li>元素设置浮动以后，会完全从文档流中脱离，不在占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动</li>
</ol>
<h2 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4 总结"></a>1.4 总结</h2><ul>
<li>浮动目前来讲它的主要作用就是让页面中的元素可以水平排列</li>
<li>通过浮动可以制作一些水平方向的布局<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">             <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="1-5-浮动与文字"><a href="#1-5-浮动与文字" class="headerlink" title="1.5 浮动与文字"></a>1.5 浮动与文字</h2><ul>
<li>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来设置文字环绕图片的效果</li>
</ul>
<h2 id="1-6-脱离文档流"><a href="#1-6-脱离文档流" class="headerlink" title="1.6 脱离文档流"></a>1.6 脱离文档流</h2><h3 id="1-6-1-概念"><a href="#1-6-1-概念" class="headerlink" title="1.6.1 概念"></a>1.6.1 概念</h3><ul>
<li>元素设置浮动以后，将会从文档流中脱离后，元素的一些特点也会发生变化</li>
</ul>
<h3 id="1-6-2-特点"><a href="#1-6-2-特点" class="headerlink" title="1.6.2 特点"></a>1.6.2 特点</h3><h4 id="（1）块元素"><a href="#（1）块元素" class="headerlink" title="（1）块元素"></a>（1）块元素</h4><ol>
<li>块元素不再独占页面的一行</li>
<li>脱离文档流以后，块元素的宽度和高度默认都被内容撑开</li>
</ol>
<h4 id="（2）行内元素"><a href="#（2）行内元素" class="headerlink" title="（2）行内元素"></a>（2）行内元素</h4><ul>
<li>行内元素脱离文档流以后变成块元素，特点和块元素一样</li>
<li>脱离文档流以后，不需要再区分块和行内了</li>
</ul>
<h1 id="二、网页布局"><a href="#二、网页布局" class="headerlink" title="二、网页布局"></a>二、网页布局</h1><h2 id="2-1-结构"><a href="#2-1-结构" class="headerlink" title="2.1 结构"></a>2.1 结构</h2><ul>
<li>头部</li>
<li>主体</li>
<li>左侧导航</li>
<li>中间的内容</li>
<li>右边的边栏</li>
<li>网页的底部</li>
</ul>
<h2 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2 实现"></a>2.2 实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>, <span class="selector-tag">main</span>, <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置头部 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: silver;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置主体 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">main</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>, <span class="selector-tag">article</span>, <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置左侧的导航 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">nav</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置中间的内容 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">article</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置右侧的内容 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">aside</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">190px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 设置底部 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">footer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建网页的主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧导航 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 中间的内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 右边的边栏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 网页的底部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、BFC"><a href="#三、BFC" class="headerlink" title="三、BFC"></a>三、BFC</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><ul>
<li>BFC(Block Formatting Context)   块级格式化环境</li>
<li>BFC是CSS中的一个隐含的属性,可以为一个元素开启BFC</li>
<li>开启BFC,该元素会变成一个独立的布局区域</li>
</ul>
<h2 id="3-2-特点"><a href="#3-2-特点" class="headerlink" title="3.2 特点"></a>3.2 特点</h2><ol>
<li>开启BFC的元素不会被浮动元素所覆盖</li>
<li>开启BFC的元素子元素和父元素外边距不会重叠</li>
<li>开启BFC的元素怒可以包含浮动的子元素</li>
</ol>
<h2 id="3-3-BFC开启方式"><a href="#3-3-BFC开启方式" class="headerlink" title="3.3 BFC开启方式"></a>3.3 BFC开启方式</h2><ol>
<li>设置元素的浮动(不推荐)</li>
<li>将元素设置为行内块元素(不推荐)</li>
<li>将元素的overflow设置为一个非visible的值</li>
<li>常用的方式 为元素设置overflow:hidden    开启其BFC,以使其可以包含浮动元素</li>
</ol>
<h2 id="3-4-示例"><a href="#3-4-示例" class="headerlink" title="3.4 示例"></a>3.4 示例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box2&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、高度塌陷"><a href="#四、高度塌陷" class="headerlink" title="四、高度塌陷"></a>四、高度塌陷</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><ul>
<li>在浮动布局中,父元素的高度默认被子元素撑开</li>
<li>当子元素浮动后,其会完全脱离文档流,子元素从文档流中脱离</li>
<li>将会无法撑起父元素的高度,导致父元素的高度丢失</li>
<li>父元素高度丢失以后,其下的元素会自动上移,导致页面布局混乱</li>
<li>所以高度塌陷使浮动布局中比较常见的问题,这个问题必须要进行处理</li>
</ul>
<h2 id="4-2-示例"><a href="#4-2-示例" class="headerlink" title="4.2 示例"></a>4.2 示例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: red solid <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 开启BFC */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="css">             <span class="comment">/* display: inline-block; */</span></span></span><br><span class="line"><span class="css">             <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 高度塌陷的问题 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-3-解决方法"><a href="#4-3-解决方法" class="headerlink" title="4.3 解决方法"></a>4.3 解决方法</h2><h3 id="4-3-1-方法一：clear"><a href="#4-3-1-方法一：clear" class="headerlink" title="4.3.1 方法一：clear"></a>4.3.1 方法一：clear</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="css">                由于box1的浮动,导致box3位置上移</span></span></span><br><span class="line"><span class="comment"><span class="css">                    也就是box3收到了box1浮动的影响,位置发生了变化</span></span></span><br><span class="line"><span class="comment"><span class="css">                </span></span></span><br><span class="line"><span class="comment"><span class="css">                如果我们不希望某个元素因为其他元素浮动的影响而改变位置,</span></span></span><br><span class="line"><span class="comment"><span class="css">                    可以通过clear属性来清楚浮动元素对当前元素所产生的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                </span></span></span><br><span class="line"><span class="comment"><span class="css">                clear</span></span></span><br><span class="line"><span class="comment"><span class="css">                    作用:清除浮动元素对当前元素所产生的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                    可选值</span></span></span><br><span class="line"><span class="comment"><span class="css">                        left:清除左侧浮动元素对当前元素的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                        right:清除左侧浮动元素对当前元素的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                        both:清除两侧影响最大的那侧</span></span></span><br><span class="line"><span class="comment"><span class="css">                    </span></span></span><br><span class="line"><span class="comment"><span class="css">                    原理:</span></span></span><br><span class="line"><span class="comment"><span class="css">                        设置清除浮动以后,浏览器会自动为元素添加一个上外边距,</span></span></span><br><span class="line"><span class="comment"><span class="css">                            以使其位置不受其他元素的影响</span></span></span><br><span class="line"><span class="comment"><span class="css">                        </span></span></span><br><span class="line"><span class="comment"><span class="css">             */</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-2-方法二：伪类"><a href="#4-3-2-方法二：伪类" class="headerlink" title="4.3.2 方法二：伪类"></a>4.3.2 方法二：伪类</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 解决外边距重叠,父元素会继承第一个子元素的外边距 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* .box1::before&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">            content: &#x27;&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="css">            display: table;</span></span></span><br><span class="line"><span class="comment"><span class="css">        &#125; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="comment">/* clearfix可以同时解决高度塌陷和外边距重叠的问题,</span></span></span><br><span class="line"><span class="comment"><span class="css">            当遇到这些问题时,直接使用clearfix这个类即可 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1 clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="五、定位"><a href="#五、定位" class="headerlink" title="五、定位"></a>五、定位</h1><h2 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h2><ul>
<li>定位是一种更加高级的布局手段</li>
<li>通过定位可以将元素摆放到页面的任意位置</li>
<li>使用position来设置定位<ul>
<li>static  默认值，元素是静止的，没有开启定位</li>
<li>ralative    开启元素的相对定位</li>
<li>absolute    开启元素的绝对定位</li>
<li>fixed   开启元素的固定定位</li>
<li>sticky  开启元素的粘滞定位</li>
</ul>
</li>
</ul>
<h2 id="5-2-相对定位"><a href="#5-2-相对定位" class="headerlink" title="5.2 相对定位"></a>5.2 相对定位</h2><h3 id="5-2-1-概念"><a href="#5-2-1-概念" class="headerlink" title="5.2.1 概念"></a>5.2.1 概念</h3><ul>
<li>当元素的position属性值设置为relative时，则开启了元素的相对定位</li>
</ul>
<h3 id="5-2-2-特点"><a href="#5-2-2-特点" class="headerlink" title="5.2.2 特点"></a>5.2.2 特点</h3><ol>
<li>元素开启相对定位以后，如果不设置偏移量，元素不会发生任何的变化</li>
<li>相对定位是参照于元素在文档流中的位置进行定位</li>
<li>相对定位会提升元素的层级</li>
<li>相对定位不会使元素脱离文档流</li>
<li>相对定位不会改变元素的性质，块还是块，行内还是行内</li>
</ol>
<h2 id="5-3-偏移量"><a href="#5-3-偏移量" class="headerlink" title="5.3 偏移量"></a>5.3 偏移量</h2><ul>
<li>当元素开启了定位以后，可以通过偏移量来设置元素的位置</li>
<li>top：定位元素和定位位置上边的距离</li>
<li>bottom：定位元素和定位位置下边的距离<ul>
<li>定位元素垂直方向的位置由top和bottom两个属性来控制，通常情况下只会使用其中之一</li>
<li>top值越大，定位元素越向下移动</li>
<li>bottom值越大，定位元素越向上移动</li>
</ul>
</li>
<li>left：定位元素和定位位置左边的距离</li>
<li>right：定位元素和定位位置右边的距离<ul>
<li>定位元素水平方向的位置由left和right两个属性来控制，通常情况下只会使用其中之一</li>
<li>left值越大，定位元素越向右移动</li>
<li>right值越大，定位元素越向左移动</li>
</ul>
</li>
</ul>
<h2 id="5-4-绝对定位"><a href="#5-4-绝对定位" class="headerlink" title="5.4 绝对定位"></a>5.4 绝对定位</h2><h3 id="5-4-1-概念"><a href="#5-4-1-概念" class="headerlink" title="5.4.1 概念"></a>5.4.1 概念</h3><ul>
<li>当元素的position属性值设置威absolute时，则开启了元素的绝对定位</li>
</ul>
<h3 id="5-4-2-特点"><a href="#5-4-2-特点" class="headerlink" title="5.4.2 特点"></a>5.4.2 特点</h3><ol>
<li>开启绝对定位后，如果不设置偏移量，元素的位置不会发生变化</li>
<li>开启绝对定位后，元素会从文档流中脱离</li>
<li>绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开</li>
<li>绝对定位会使元素提升一个层级</li>
<li>绝对定位元素是相对于其包含块进行定位的</li>
</ol>
<h3 id="5-4-3-绝对定位元素的布局"><a href="#5-4-3-绝对定位元素的布局" class="headerlink" title="5.4.3 绝对定位元素的布局"></a>5.4.3 绝对定位元素的布局</h3><ul>
<li>水平布局：<ul>
<li>left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right= 父元素内容区宽度</li>
</ul>
</li>
<li>当我们开启了绝对定位后，水平方向的布局等式就需要添加 left 和 right 两个值</li>
<li>此时规则和之前一样，只是多添加了两个值<ul>
<li>当发生过渡约束，</li>
<li>如果9个值中没有auto，则自动调整right值，以使等式成立</li>
<li>如果由auto，则自动调整auto值，以使等式成立</li>
</ul>
</li>
<li>可设置auto的值<ul>
<li>margin width left right</li>
<li>因为left 和 right的值默认是auto，所以如果不知道left和right，则等式满足时，会自动调整这两个值</li>
</ul>
</li>
<li>垂直方向布局的等式也必须满足：<ul>
<li>top + margin-top/bottom + padding-top/bottom +border-top/bottom + bottom = 包含块的高度</li>
</ul>
</li>
</ul>
<h2 id="5-5-包含块（containing-block）"><a href="#5-5-包含块（containing-block）" class="headerlink" title="5.5 包含块（containing block）"></a>5.5 包含块（containing block）</h2><ul>
<li>正常情况下，包含块就是离当前元素最近的祖先块元素<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>绝对定位的包含块<ul>
<li>包含快就是离它最近的开启了定位的祖先元素</li>
<li>如果所有的祖先元素都没有开启定位，则相对于根元素进行定位：html（根元素、初始包含块）</li>
</ul>
</li>
</ul>
<h2 id="5-6-固定定位"><a href="#5-6-固定定位" class="headerlink" title="5.6 固定定位"></a>5.6 固定定位</h2><h3 id="5-6-1-概念"><a href="#5-6-1-概念" class="headerlink" title="5.6.1 概念"></a>5.6.1 概念</h3><ul>
<li>将元素的position属性设置为fixed，则开启了元素的固定定位</li>
<li>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样<ul>
<li>唯一不同的是固定定位永远参照于浏览器的视口进行定位</li>
<li>固定定位的元素不会随网页的滚动条滚动</li>
</ul>
</li>
</ul>
<h2 id="5-7-粘滞定位"><a href="#5-7-粘滞定位" class="headerlink" title="5.7 粘滞定位"></a>5.7 粘滞定位</h2><h3 id="5-7-1-概念"><a href="#5-7-1-概念" class="headerlink" title="5.7 1 概念"></a>5.7 1 概念</h3><ul>
<li>当元素的position属性设置为sticky时，则开启了元素的粘滞定位</li>
<li>粘滞定位和相对定位的特点基本一致<ul>
<li>不同的是粘滞定位可以在元素到达某个位置时将其固定</li>
</ul>
</li>
</ul>
<h2 id="5-8-元素的层级"><a href="#5-8-元素的层级" class="headerlink" title="5.8 元素的层级"></a>5.8 元素的层级</h2><ul>
<li>对于开启了定位元素，可以通过z-index属性来指定元素的层级</li>
<li>z-index需要一个整数作为参数，值越大的元素层级越高，元素的层级越高越优先显示</li>
<li>如果元素层级一样，优先显示靠下的元素</li>
<li>祖先元素的层级再高也不会盖住后代元素</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>H5C3</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>诗词韵律解析</title>
    <url>/2022/03/02/%E8%AF%97%E8%AF%8D%E9%9F%B5%E5%BE%8B%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="一、诗体简介"><a href="#一、诗体简介" class="headerlink" title="一、诗体简介"></a>一、诗体简介</h1><h2 id="1-1-近体诗格律"><a href="#1-1-近体诗格律" class="headerlink" title="1.1 近体诗格律"></a>1.1 近体诗格律</h2><ol>
<li>诗句数固定</li>
<li>字数为五言或七言</li>
<li>一般押平声韵，不允许换韵，韵脚位置固定</li>
<li>平仄有规定</li>
<li>五七言律诗中间两联原则上必须对仗</li>
</ol>
<h2 id="1-2-绝句和律诗"><a href="#1-2-绝句和律诗" class="headerlink" title="1.2 绝句和律诗"></a>1.2 绝句和律诗</h2><h1 id="二、声律"><a href="#二、声律" class="headerlink" title="二、声律"></a>二、声律</h1><h2 id="2-1-声调"><a href="#2-1-声调" class="headerlink" title="2.1 声调"></a>2.1 声调</h2><ul>
<li>古汉语四声调：平、上、去、入</li>
<li>相间律：平仄交替使用</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>古声调</th>
<th>普通话声调</th>
</tr>
</thead>
<tbody>
<tr>
<td>平</td>
<td>阴平、阳平</td>
</tr>
<tr>
<td>上</td>
<td>去（第三声）</td>
</tr>
<tr>
<td>去</td>
<td>去（第四声）</td>
</tr>
<tr>
<td>入</td>
<td>融合到了平/上/去</td>
</tr>
</tbody>
</table>
</div>
<h2 id="2-2-五言律诗的平仄"><a href="#2-2-五言律诗的平仄" class="headerlink" title="2.2 五言律诗的平仄"></a>2.2 五言律诗的平仄</h2><h3 id="2-2-1-起声-收声"><a href="#2-2-1-起声-收声" class="headerlink" title="2.2.1 起声/收声"></a>2.2.1 起声/收声</h3><ul>
<li>仄起：第一句的第二个字为仄声</li>
<li>平起：第一句的第二个字为平声</li>
<li>仄收：第一句的第五字为仄声</li>
<li>平收：第一句的第五字为平声</li>
</ul>
<h3 id="2-2-2-平仄格式"><a href="#2-2-2-平仄格式" class="headerlink" title="2.2.2 平仄格式"></a>2.2.2 平仄格式</h3><h4 id="（1）仄起仄收"><a href="#（1）仄起仄收" class="headerlink" title="（1）仄起仄收"></a>（1）仄起仄收</h4><blockquote>
<p>加下划线表示可平可仄</p>
</blockquote>
<p>$\underline{仄}仄平平仄，平平仄仄平$</p>
<p>$\underline{平}平仄仄平，\underline{仄}仄仄平平$</p>
<p>$\underline{仄}仄平平仄，平平仄仄平$</p>
<p>$\underline{平}平仄仄平，\underline{仄}仄仄平平$</p>
<h4 id="（2）仄起平收"><a href="#（2）仄起平收" class="headerlink" title="（2）仄起平收"></a>（2）仄起平收</h4><p>$\underline{仄}仄仄平平，平平仄仄平$</p>
<p>$\underline{平}平平仄仄，\underline{仄}仄仄平平$</p>
<p>$\underline{仄}仄平平仄，平平仄仄平$</p>
<p>$\underline{平}平平仄仄，\underline{仄}仄仄平平$</p>
<h4 id="（3）平起仄收"><a href="#（3）平起仄收" class="headerlink" title="（3）平起仄收"></a>（3）平起仄收</h4><p>$\underline{平}平平仄仄，仄仄仄平平$</p>
<p>$\underline{仄}仄平平仄，\underline{平}平仄仄平$</p>
<p>$\underline{平}平平仄仄，\underline{仄}仄仄平平$</p>
<p>$\underline{仄}仄平平仄，\underline{平}平仄仄平$</p>
<h4 id="（4）平起平收"><a href="#（4）平起平收" class="headerlink" title="（4）平起平收"></a>（4）平起平收</h4><p>$\underline{平}平仄仄平，仄仄仄平平$</p>
<p>$\underline{仄}仄平平仄，\underline{平}平仄仄平$</p>
<p>$\underline{平}平平仄仄，\underline{仄}仄仄平平$</p>
<p>$\underline{仄}仄平平仄，\underline{平}平仄仄平$</p>
<h2 id="2-3-相对律、相粘律"><a href="#2-3-相对律、相粘律" class="headerlink" title="2.3 相对律、相粘律"></a>2.3 相对律、相粘律</h2><h3 id="2-3-1-相对律"><a href="#2-3-1-相对律" class="headerlink" title="2.3.1 相对律"></a>2.3.1 相对律</h3><ul>
<li>一联中，出句和对句的平仄是相对的</li>
</ul>
<h3 id="2-3-2-相粘律"><a href="#2-3-2-相粘律" class="headerlink" title="2.3.2 相粘律"></a>2.3.2 相粘律</h3><ul>
<li>后一联出句第二字的平仄要跟前一联对句第二字的平仄一致</li>
<li>即：第三句第二字的平仄与第二句第二字的平仄相同，第五局第二字的平仄和第四句第二字的平仄相同，第七句第二字的平仄与第六句第二字的平仄相同</li>
</ul>
]]></content>
      <categories>
        <category>文化艺术</category>
        <category>中国诗词</category>
      </categories>
      <tags>
        <tag>中国传统</tag>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title>Java进阶大全一</title>
    <url>/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、容器"><a href="#一、容器" class="headerlink" title="一、容器"></a>一、容器</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><ul>
<li>数组本身是一种容器，劣势是不灵活，长度固定，方法有限，只能存储有序、可重复的数据</li>
<li>容器：在Java当中，如果有一个类专门用来存放其它类的对象，这个类就叫做容器，或者就叫做集合，集合就是将若干性质相同或相近的类对象组合在一起而形成的一个整体</li>
</ul>
<img src="/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8%E4%B8%80/Java%E5%AE%B9%E5%99%A8.png" class="" title="image">
<ul>
<li>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等</li>
</ul>
<h2 id="1-2-实现类方法"><a href="#1-2-实现类方法" class="headerlink" title="1.2 实现类方法"></a>1.2 实现类方法</h2><h3 id="1-2-1-Vector-ArrayList-LinkedList"><a href="#1-2-1-Vector-ArrayList-LinkedList" class="headerlink" title="1.2.1 Vector/ArrayList/LinkedList"></a>1.2.1 Vector/ArrayList/LinkedList</h3><h3 id="1-2-2-HashSet-TreeSet-LinkedHashSet"><a href="#1-2-2-HashSet-TreeSet-LinkedHashSet" class="headerlink" title="1.2.2 HashSet/TreeSet/LinkedHashSet"></a>1.2.2 HashSet/TreeSet/LinkedHashSet</h3><h3 id="1-2-3-TreeMap-HashMap-WeakHashMap-HashTable-IdentityHashMap"><a href="#1-2-3-TreeMap-HashMap-WeakHashMap-HashTable-IdentityHashMap" class="headerlink" title="1.2.3 TreeMap/HashMap/WeakHashMap/HashTable/IdentityHashMap"></a>1.2.3 TreeMap/HashMap/WeakHashMap/HashTable/IdentityHashMap</h3><h1 id="二、泛型"><a href="#二、泛型" class="headerlink" title="二、泛型"></a>二、泛型</h1><h2 id="2-1-基础"><a href="#2-1-基础" class="headerlink" title="2.1 基础"></a>2.1 基础</h2><ul>
<li>将数据类型作为参数，进行变量的声明<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;&gt;,可以用T,E,V表示，代表需要接受的数据类型的参数</span></span><br><span class="line"><span class="comment">// 可以通过MyCollect&lt;String&gt; mc=new MyCollection&lt;String&gt;();创建对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCollect</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    Object[] objs = <span class="keyword">new</span> Object[<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        objs[index] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E)objs[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-2-泛型方法"><a href="#2-2-泛型方法" class="headerlink" title="2.2 泛型方法"></a>2.2 泛型方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// 泛型方法 printArray                         </span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// 输出数组元素            </span></span><br><span class="line">         <span class="keyword">for</span> ( E element : inputArray )&#123;        </span><br><span class="line">            System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">        Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">        Double[] doubleArray = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span> &#125;;</span><br><span class="line">        Character[] charArray = &#123; <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;O&#x27;</span> &#125;;</span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">&quot;整型数组元素为:&quot;</span> );</span><br><span class="line">        printArray( intArray  ); <span class="comment">// 传递一个整型数组</span></span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">&quot;\n双精度型数组元素为:&quot;</span> );</span><br><span class="line">        printArray( doubleArray ); <span class="comment">// 传递一个双精度型数组</span></span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">&quot;\n字符型数组元素为:&quot;</span> );</span><br><span class="line">        printArray( charArray ); <span class="comment">// 传递一个字符型数组</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">整型数组元素为:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">双精度型数组元素为:</span></span><br><span class="line"><span class="comment">1.1 2.2 3.3 4.4 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符型数组元素为:</span></span><br><span class="line"><span class="comment">H E L L O </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-1-有界的类型参数"><a href="#2-2-1-有界的类型参数" class="headerlink" title="2.2.1 有界的类型参数"></a>2.2.1 有界的类型参数</h3><ul>
<li><p>可能有时候，你会想限制那些被允许传递到一个类型参数的类型种类范围。例如，一个操作数字的方法可能只希望接受Number或者Number子类的实例。这就是有界类型参数的目的。</p>
</li>
<li><p>要声明一个有界的类型参数，首先列出类型参数的名称，后跟extends关键字，最后紧跟它的上界。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// 比较三个值并返回最大值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">maximum</span><span class="params">(T x, T y, T z)</span></span></span><br><span class="line"><span class="function">   </span>&#123;                     </span><br><span class="line">      T max = x; <span class="comment">// 假设x是初始最大值</span></span><br><span class="line">      <span class="keyword">if</span> ( y.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">         max = y; <span class="comment">//y 更大</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( z.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">         max = z; <span class="comment">// 现在 z 更大           </span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max; <span class="comment">// 返回最大对象</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.printf( <span class="string">&quot;%d, %d 和 %d 中最大的数为 %d\n\n&quot;</span>,</span><br><span class="line">                   <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, maximum( <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ) );</span><br><span class="line"> </span><br><span class="line">      System.out.printf( <span class="string">&quot;%.1f, %.1f 和 %.1f 中最大的数为 %.1f\n\n&quot;</span>,</span><br><span class="line">                   <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span>, maximum( <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span> ) );</span><br><span class="line"> </span><br><span class="line">      System.out.printf( <span class="string">&quot;%s, %s 和 %s 中最大的数为 %s\n&quot;</span>,<span class="string">&quot;pear&quot;</span>,</span><br><span class="line">         <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, maximum( <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span> ) );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">3, 4 和 5 中最大的数为 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6.6, 8.8 和 7.7 中最大的数为 8.8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">pear, apple 和 orange 中最大的数为 pear</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-3-泛型类"><a href="#2-3-泛型类" class="headerlink" title="2.3 泛型类"></a>2.3 泛型类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> T t;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.t = t;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> Box&lt;Integer&gt;();</span><br><span class="line">    Box&lt;String&gt; stringBox = <span class="keyword">new</span> Box&lt;String&gt;();</span><br><span class="line"> </span><br><span class="line">    integerBox.add(<span class="keyword">new</span> Integer(<span class="number">10</span>));</span><br><span class="line">    stringBox.add(<span class="keyword">new</span> String(<span class="string">&quot;菜鸟教程&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    System.out.printf(<span class="string">&quot;整型值为 :%d\n\n&quot;</span>, integerBox.get());</span><br><span class="line">    System.out.printf(<span class="string">&quot;字符串为 :%s\n&quot;</span>, stringBox.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">整型值为 :10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符串为 :菜鸟教程</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="2-4-类通配符"><a href="#2-4-类通配符" class="headerlink" title="2.4 类通配符"></a>2.4 类通配符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;Number&gt; number = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        </span><br><span class="line">        name.add(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line">        age.add(<span class="number">18</span>);</span><br><span class="line">        number.add(<span class="number">314</span>);</span><br><span class="line"> </span><br><span class="line">        getData(name);</span><br><span class="line">        getData(age);</span><br><span class="line">        getData(number);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">data :icon</span></span><br><span class="line"><span class="comment">data :18</span></span><br><span class="line"><span class="comment">data :314</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>类型通配符上限通过形如List来定义，如此定义就是通配符泛型值接受Number及其下层子类类型。</li>
<li><p>在(//1)处会出现错误，因为getUperNumber()方法中的参数已经限定了参数泛型上限为Number，所以泛型为String是不在这个范围之内，所以会报错</p>
</li>
<li><p>类型通配符下限通过形如 List&lt;? super Number&gt;来定义，表示类型只能接受Number及其三层父类类型，如 Object 类型的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;Number&gt; number = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        </span><br><span class="line">        name.add(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line">        age.add(<span class="number">18</span>);</span><br><span class="line">        number.add(<span class="number">314</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//getUperNumber(name);//1</span></span><br><span class="line">        getUperNumber(age);<span class="comment">//2</span></span><br><span class="line">        getUperNumber(number);<span class="comment">//3</span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUperNumber</span><span class="params">(List&lt;? extends Number&gt; data)</span> </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output:</span></span><br><span class="line"><span class="comment">data :18</span></span><br><span class="line"><span class="comment">data :314</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h1><h2 id="3-1-注解的定义"><a href="#3-1-注解的定义" class="headerlink" title="3.1 注解的定义"></a>3.1 注解的定义</h2><ul>
<li>注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</li>
</ul>
<h2 id="3-2-注解的作用"><a href="#3-2-注解的作用" class="headerlink" title="3.2 注解的作用"></a>3.2 注解的作用</h2><ul>
<li>生成文档。这是最常见的，也是java 最早提供的注解。常用的有@see @param @return 等；</li>
<li>在编译时进行格式检查。如@Override放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出；</li>
<li>跟踪代码依赖性，实现替代配置文件功能。比较常见的是spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都使用了这种配置来减少配置文件的数量；</li>
<li>在反射的 Class, Method, Field 等函数中，有许多于 Annotation 相关的接口。可以在反射中解析并使用 Annotation。</li>
</ul>
<h2 id="3-3-注解类的写法"><a href="#3-3-注解类的写法" class="headerlink" title="3.3 注解类的写法"></a>3.3 注解类的写法</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="symbol">MyTestAnnotation</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>作用在类上<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyTestAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="meta">@MyTestAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-4-元注解"><a href="#3-4-元注解" class="headerlink" title="3.4 元注解"></a>3.4 元注解</h2><ul>
<li>元注解：作用在注解上的 注解，方便实现注解想要的功能</li>
<li>元注解有五种<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Retention</span></span><br><span class="line"><span class="variable">@Target</span></span><br><span class="line"><span class="variable">@Document</span></span><br><span class="line"><span class="variable">@Inherited</span></span><br><span class="line"><span class="variable">@Repeatable</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-1-Retention"><a href="#3-4-1-Retention" class="headerlink" title="3.4.1 @Retention"></a>3.4.1 @Retention</h3></li>
<li>Retention：有保留保持的意思，表示注解存在的阶段是保留在源码(编译期)，字节码(类加载)，或者运行期(jvm中运行)，使用RetentionPolicy来表示注解的保留时期</li>
<li>一般使用RetentionPolicy.RUNTIME<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE) <span class="comment">// 尽存在于源码中，class字节码中不存在</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.CLASS) <span class="comment">// class字节码文件中存在，运行时无法获得</span></span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 在class字节码文件中存在，运行时可通过反射获得</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-4-2-Target"><a href="#3-4-2-Target" class="headerlink" title="3.4.2 @Target"></a>3.4.2 @Target</h3><ul>
<li>Target：目标的意思，表示设置注解作用的目标范围；通过ElementType表达作用类型</li>
<li>一般使用ElementType.TYPE<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE) <span class="comment">// 作用于接口、枚举、注解</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.FIELD) <span class="comment">// 作用于属性字段、枚举的常量</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.METHOD) <span class="comment">// 作用于方法</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.PARAMETER) <span class="comment">// 作用于方法参数</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.CONSTRUCTOR) <span class="comment">// 作用于构造函数</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.LOCAL_VALUABLE) <span class="comment">// 作用于局部变量</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.ANNOTATION_TYPE) <span class="comment">// 作用于注解</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.PACKAGE) <span class="comment">// 作用于包</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.TYPE_PARAMETER) <span class="comment">// 作用于类型泛型，及泛型类、泛型方法、泛型接口</span></span><br><span class="line"><span class="variable">@Target</span>(ElementType.TYPE_USE) <span class="comment">// 可以标注任意类型，除了class</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-4-3-Documented"><a href="#3-4-3-Documented" class="headerlink" title="3.4.3 @Documented"></a>3.4.3 @Documented</h3><ul>
<li>Document是文档的意思，作用是将注解中的元素包含到Javadoc中去</li>
</ul>
<h3 id="3-4-4-Inherited"><a href="#3-4-4-Inherited" class="headerlink" title="3.4.4 @Inherited"></a>3.4.4 @Inherited</h3><ul>
<li>Inherited是继承的意思</li>
<li>一个被该注解 修饰的类，如果其子类没有被其他注释修饰，则它的子类也继承了父类的注解</li>
<li>示例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTestAnnotation&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTestAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取Son的class对象</span></span><br><span class="line">        Class sonClass = Son.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取Son类上的注解MyTestAnnotation</span></span><br><span class="line">        MyTestAnnotation annotation = sonClass.getAnnotation(MyTestAnnotation.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-4-5-Repeatable"><a href="#3-4-5-Repeatable" class="headerlink" title="3.4.5 @Repeatable"></a>3.4.5 @Repeatable</h3></li>
<li>Repeatable的英文意思是可重复的。顾名思义说明被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> People &#123;</span><br><span class="line">    Game[] value() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(People.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Game &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Game(value = &quot;LOL&quot;)</span></span><br><span class="line"><span class="meta">@Game(value = &quot;PUBG&quot;)</span></span><br><span class="line"><span class="meta">@Game(value = &quot;NFS&quot;)</span></span><br><span class="line"><span class="meta">@Game(value = &quot;Dirt4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGame</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>通过上面的例子，你可能会有一个疑问，游戏注解中括号的变量是啥，其实这和游戏注解中定义的属性对应。接下来我们继续学习注解的属性。</li>
</ul>
<h2 id="3-5-注解的属性"><a href="#3-5-注解的属性" class="headerlink" title="3.5 注解的属性"></a>3.5 注解的属性</h2><ul>
<li>通过上一小节@Repeatable注解的例子，我们说到注解的属性。注解的属性其实和类中定义的变量有异曲同工之处，只是注解中的变量都是成员变量（属性），并且注解中是没有方法的，只有成员变量，变量名就是使用注解括号中对应的参数名，变量返回值注解括号中对应参数类型。相信这会你应该会对上面的例子有一个更深的认识。而@Repeatable注解中的变量则类型则是对应Annotation（接口）的泛型Class</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repeatable &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates the containing annotation type for the</span></span><br><span class="line"><span class="comment">     * repeatable annotation type.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the containing annotation type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? extends Annotation&gt; value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-注解的本质"><a href="#3-6-注解的本质" class="headerlink" title="3.6 注解的本质"></a>3.6 注解的本质</h2><ul>
<li>注解的本质就是一个Annotation接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>通过以上源码，我们知道注解本身就是Annotation接口的子接口，也就是说注解中其实是可以有属性和方法，但是接口中的属性都是static final的，对于注解来说没什么意义，而我们定义接口的方法就相当于注解的属性，也就对应了前面说的为什么注解只有属性成员变量，其实他就是接口的方法，这就是为什么成员变量会有括号，不同于接口我们可以在注解的括号中给成员变量赋值。</li>
</ul>
<h2 id="3-7-注解属性类型"><a href="#3-7-注解属性类型" class="headerlink" title="3.7 注解属性类型"></a>3.7 注解属性类型</h2><h3 id="3-7-1-注解属性类型可以有以下列出的类型"><a href="#3-7-1-注解属性类型可以有以下列出的类型" class="headerlink" title="3.7.1 注解属性类型可以有以下列出的类型"></a>3.7.1 注解属性类型可以有以下列出的类型</h3><ol>
<li>基本数据类型</li>
<li>String</li>
<li>枚举类型</li>
<li>注解类型</li>
<li>Class类型</li>
<li>以上类型的一维数组类型</li>
</ol>
<h2 id="3-8-注解成员变量赋值"><a href="#3-8-注解成员变量赋值" class="headerlink" title="3.8 注解成员变量赋值"></a>3.8 注解成员变量赋值</h2><ul>
<li>如果注解又多个属性，则可以在注解括号中用“，”号隔开分别给对应的属性赋值，如下例子，注解在父类中赋值属性<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTestAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;mao&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTestAnnotation(name = &quot;father&quot;,age = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-9-获取注解属性"><a href="#3-9-获取注解属性" class="headerlink" title="3.9 获取注解属性"></a>3.9 获取注解属性</h2><ul>
<li>前面我们说了很多注解如何定义，放在哪，现在我们可以开始学习注解属性的提取了，这才是使用注解的关键，获取属性的值才是使用注解的目的。</li>
<li><p>如果获取注解属性，当然是反射啦，主要有三个基本的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> GenericDeclaration.<span class="keyword">super</span>.isAnnotationPresent(annotationClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  A <span class="title">getAnnotation</span><span class="params">(Class annotationClass)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(annotationClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (A) annotationData().annotations.get(annotationClass);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> Annotation[] getAnnotations() &#123;</span><br><span class="line">        <span class="keyword">return</span> AnnotationParser.toArray(annotationData().annotations);</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure>
</li>
<li><p>下面结合前面的例子，我们来获取一下注解属性，在获取之前我们自定义的注解必须使用元注解@Retention(RetentionPolicy.RUNTIME)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取类注解属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class fatherClass = Father.class;</span><br><span class="line">        <span class="keyword">boolean</span> annotationPresent = fatherClass.isAnnotationPresent(MyTestAnnotation.class);</span><br><span class="line">        <span class="keyword">if</span>(annotationPresent)&#123;</span><br><span class="line">            MyTestAnnotation annotation = fatherClass.getAnnotation(MyTestAnnotation.class);</span><br><span class="line">            System.out.println(annotation.name());</span><br><span class="line">            System.out.println(annotation.age());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取方法注解属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field age = fatherClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="keyword">boolean</span> annotationPresent1 = age.isAnnotationPresent(Age.class);</span><br><span class="line">            <span class="keyword">if</span>(annotationPresent1)&#123;</span><br><span class="line">                Age annotation = age.getAnnotation(Age.class);</span><br><span class="line">                System.out.println(annotation.value());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Method play = PlayGame.class.getDeclaredMethod(<span class="string">&quot;play&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (play!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                People annotation2 = play.getAnnotation(People.class);</span><br><span class="line">                Game[] value = annotation2.value();</span><br><span class="line">                <span class="keyword">for</span> (Game game : value) &#123;</span><br><span class="line">                    System.out.println(game.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-9-1-运行结果"><a href="#3-9-1-运行结果" class="headerlink" title="3.9.1 运行结果"></a>3.9.1 运行结果</h3><img src="/2022/03/02/Java%E8%BF%9B%E9%98%B6%E5%A4%A7%E5%85%A8%E4%B8%80/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="image">
</li>
</ul>
<h2 id="3-10-注解的作用"><a href="#3-10-注解的作用" class="headerlink" title="3.10 注解的作用"></a>3.10 注解的作用</h2><ul>
<li>提供信息给编译器： 编译器可以利用注解来检测出错误或者警告信息，打印出日志。</li>
<li>编译阶段时的处理：软件工具可以用来利用注解信息来自动生成代码、文档或者做其它相应的自动处理。</li>
<li>运行时处理： 某些注解可以在程序运行的时候接受代码的提取，自动做相应的操作。</li>
<li>正如官方文档的那句话所说，注解能够提供元数据，转账例子中处理获取注解值的过程是我们开发者直接写的注解提取逻辑，处理提取和处理 Annotation 的代码统称为 APT（Annotation Processing Tool)。上面转账例子中的processAnnotationMoney方法就可以理解为APT工具类</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java容器</tag>
        <tag>Java泛型</tag>
        <tag>Java注解</tag>
      </tags>
  </entry>
  <entry>
    <title>H5C3基础大全二（实战）</title>
    <url>/2022/03/07/H5C3%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8%E4%BA%8C%EF%BC%88%E5%AE%9E%E6%88%98%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、双栏信息"><a href="#一、双栏信息" class="headerlink" title="一、双栏信息"></a>一、双栏信息</h1><h1 id="二、元素阴影效果"><a href="#二、元素阴影效果" class="headerlink" title="二、元素阴影效果"></a>二、元素阴影效果</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: offset-x offset-y blur spread color inset;</span><br></pre></td></tr></table></figure>
<ul>
<li>offset-x：必需，取值正负都可。offset-x水平阴影的位置。</li>
<li>offset-y：必需，取值正负都可。offset-y垂直阴影的位置。</li>
<li>blur:可选，只能取正值。blur-radius阴影模糊半径，0即无模糊效果，值越大阴影边缘越模糊。</li>
<li>spread：可选，取值正负都可。spread代表阴影的周长向四周扩展的尺寸，正值，阴影扩大，负值阴影缩小。</li>
<li>color:可选。阴影的颜色。如果不设置，浏览器会取默认颜色，通常是黑色，但各浏览器默认颜色有差异，建议不要省略。可以是rgb(250,0,0)，也可以是有透明值的rgba(250,0,0,0.5)。</li>
<li>inset:可选。关键字，将外部投影(默认outset)改为内部投影。inset 阴影在背景之上，内容之下。</li>
</ul>
<h1 id="三、元素访问效果"><a href="#三、元素访问效果" class="headerlink" title="三、元素访问效果"></a>三、元素访问效果</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	ele.hover：鼠标在元素上方时，要显示的效果</span></span><br><span class="line"><span class="comment">	ele.link：未被访问的元素，要显示的效果</span></span><br><span class="line"><span class="comment">	ele.active：鼠标按住不动时，要显示的效果</span></span><br><span class="line"><span class="comment">	ele.visited：元素访问过后，要显示的效果</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>H5C3</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>网页效果</tag>
      </tags>
  </entry>
  <entry>
    <title>知识图谱-本体库</title>
    <url>/2022/03/03/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E6%9C%AC%E4%BD%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="一、Protege工具使用"><a href="#一、Protege工具使用" class="headerlink" title="一、Protege工具使用"></a>一、Protege工具使用</h1>]]></content>
      <categories>
        <category>知识图谱</category>
        <category>本体库</category>
      </categories>
      <tags>
        <tag>知识图谱</tag>
        <tag>知识图谱构建</tag>
      </tags>
  </entry>
  <entry>
    <title>Java算法大全一</title>
    <url>/2022/03/08/Java%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="一、两数之和"><a href="#一、两数之和" class="headerlink" title="一、两数之和"></a>一、两数之和</h1><h2 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h2><ul>
<li>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em>target</em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</li>
<li>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</li>
<li>你可以按任意顺序返回答案。</li>
</ul>
<h2 id="1-2-示例"><a href="#1-2-示例" class="headerlink" title="1.2 示例"></a>1.2 示例</h2><h3 id="1-2-1-示例1"><a href="#1-2-1-示例1" class="headerlink" title="1.2.1 示例1"></a>1.2.1 示例1</h3><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[2,7,11,15]</span>, target = 9</span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br><span class="line">解释：因为 nums<span class="comment">[0]</span> + nums<span class="comment">[1]</span> == 9 ，返回 <span class="comment">[0, 1]</span> 。</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-示例2"><a href="#1-2-2-示例2" class="headerlink" title="1.2.2 示例2"></a>1.2.2 示例2</h3><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,2,4]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[1,2]</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-3-示例3"><a href="#1-2-3-示例3" class="headerlink" title="1.2.3 示例3"></a>1.2.3 示例3</h3><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[3,3]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[0,1]</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-提示"><a href="#1-3-提示" class="headerlink" title="1.3 提示"></a>1.3 提示</h2><ul>
<li>$2&lt;=nums.length&lt;=10^4$</li>
<li>$-10^9&lt;=nums[i]&lt;=10^9$</li>
<li>$-10^9&lt;=target&lt;=10^9$</li>
<li><strong>只会存在一个有效答案</strong></li>
<li><strong>进阶</strong>：你可以想出一个时间复杂度小于 $O(n^2)$ 的算法吗？</li>
</ul>
<h2 id="1-4-解法"><a href="#1-4-解法" class="headerlink" title="1.4 解法"></a>1.4 解法</h2><h3 id="1-4-1-哈希表"><a href="#1-4-1-哈希表" class="headerlink" title="1.4.1 哈希表"></a>1.4.1 哈希表</h3><ul>
<li>设定从值到数组坐标的Map映射，根据键来查找坐标</li>
<li>顺序遍历数组，对于当前坐标i<ul>
<li>如果map中包含了键值：target - nums[i]对应的坐标，表明已经查找到了最终结果，将{target - nums[i], i}返回作为结果即可</li>
<li>如果map中没有包含键值：target - nums[i]对应的坐标，则将{num[i], i}添加到map中</li>
</ul>
</li>
</ul>
<h4 id="（1）关键步骤1"><a href="#（1）关键步骤1" class="headerlink" title="（1）关键步骤1"></a>（1）关键步骤1</h4><img src="/2022/03/08/Java%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8%E4%B8%80/5.png" class="" title="image5">
<h4 id="（2）关键步骤2"><a href="#（2）关键步骤2" class="headerlink" title="（2）关键步骤2"></a>（2）关键步骤2</h4><img src="/2022/03/08/Java%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8%E4%B8%80/6.png" class="" title="image6">
<h4 id="（3）实现"><a href="#（3）实现" class="headerlink" title="（3）实现"></a>（3）实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashtable.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;hashtable.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>时间复杂度$O(n)$</li>
<li>空间复杂度$O(n)$</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>乐理基础大全</title>
    <url>/2022/03/09/%E4%B9%90%E7%90%86%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、音的概念"><a href="#一、音的概念" class="headerlink" title="一、音的概念"></a>一、音的概念</h1><h2 id="1-1-音名-唱名"><a href="#1-1-音名-唱名" class="headerlink" title="1.1 音名/唱名"></a>1.1 音名/唱名</h2><ul>
<li>音名是对音的一种标记，而唱名则是我们平时哼出来的do/re/mi/fa/sol/la/ti</li>
<li>音名像是对音的一种抽象，而唱名则是具体的对音的表现，也就是说任何一个音名都可以表示为1，然后一次推导出其他音名，当然我这里说的是自然大调的情况，后面在做详细解释</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>音名</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody>
<tr>
<td>唱名</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
</tbody>
</table>
</div>
<h2 id="1-2-十二平均律"><a href="#1-2-十二平均律" class="headerlink" title="1.2 十二平均律"></a>1.2 十二平均律</h2><ul>
<li>按照乐理从古至今的发展，人们发现了<strong>十二平均律</strong>这样一套声音的规律</li>
<li>在物理学中，声音是由振动产生的，而物体不同震动的频率会给人不同的听觉效果，国际上规定440HZ作为<strong>标准音</strong>，即钢琴上的第49号键（A键）的震动频率</li>
<li>根据振动给人听感上的不同，人们以<strong>每隔半音</strong>（规定的频率大小）的形式来规定音与音的距离关系（音程），因此就有了十二平均律的概念</li>
<li>比如对于1、2、3、4、5、6、7、1来说，它们就满足<strong>“全全半全全全半”</strong>的音程关系</li>
</ul>
<h2 id="1-3-音程-音数"><a href="#1-3-音程-音数" class="headerlink" title="1.3 音程/音数"></a>1.3 音程/音数</h2><ul>
<li>音程：表示音与音之间的距离，主要说的还是<strong>振动频率</strong>的关系</li>
<li>音数：衡量音程的一种<strong>单位</strong>，记录音与音之间的半音数</li>
<li>具体的音程与音数关系有以下几种：</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">音程</th>
<th style="text-align:center">音数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">纯一度</td>
<td style="text-align:center">$0$</td>
</tr>
<tr>
<td style="text-align:center">小二度</td>
<td style="text-align:center">$\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">大二度</td>
<td style="text-align:center">$1$</td>
</tr>
<tr>
<td style="text-align:center">小三度</td>
<td style="text-align:center">$1\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">大三度</td>
<td style="text-align:center">$2$</td>
</tr>
<tr>
<td style="text-align:center">纯四度</td>
<td style="text-align:center">$2\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">增四度</td>
<td style="text-align:center">$3$</td>
</tr>
<tr>
<td style="text-align:center">纯五度</td>
<td style="text-align:center">$3\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">减五度</td>
<td style="text-align:center">$3$</td>
</tr>
<tr>
<td style="text-align:center">小六度</td>
<td style="text-align:center">$4$</td>
</tr>
<tr>
<td style="text-align:center">大六度</td>
<td style="text-align:center">$4 \tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">小七度</td>
<td style="text-align:center">$5$</td>
</tr>
<tr>
<td style="text-align:center">大七度</td>
<td style="text-align:center">$5\tfrac{1}{2}$</td>
</tr>
<tr>
<td style="text-align:center">纯八度</td>
<td style="text-align:center">$6$</td>
</tr>
</tbody>
</table>
</div>
<h1 id="二、调式"><a href="#二、调式" class="headerlink" title="二、调式"></a>二、调式</h1><h2 id="2-1-大调式"><a href="#2-1-大调式" class="headerlink" title="2.1 大调式"></a>2.1 大调式</h2><h3 id="2-1-1-自然大调"><a href="#2-1-1-自然大调" class="headerlink" title="2.1.1 自然大调"></a>2.1.1 自然大调</h3><ul>
<li>满足<strong>“全全半全全全半”</strong>的关系</li>
<li>$1、2、3、4、5、6、7、\overline{1}$</li>
</ul>
<h3 id="2-1-2-和声大调"><a href="#2-1-2-和声大调" class="headerlink" title="2.1.2 和声大调"></a>2.1.2 和声大调</h3><ul>
<li>$1、2、3、4、5、{}^b6、7、\overline{1}$</li>
</ul>
<h3 id="2-1-3-旋律大调"><a href="#2-1-3-旋律大调" class="headerlink" title="2.1.3 旋律大调"></a>2.1.3 旋律大调</h3><ul>
<li>$1、2、3、4、5、{}^b6、{}^b7、1$</li>
</ul>
<h2 id="2-2-小调式"><a href="#2-2-小调式" class="headerlink" title="2.2 小调式"></a>2.2 小调式</h2><h3 id="2-2-1-自然小调"><a href="#2-2-1-自然小调" class="headerlink" title="2.2.1 自然小调"></a>2.2.1 自然小调</h3><ul>
<li>$6、7、\overline{1}、\overline{2}、\overline{3}、\overline{4}、\overline{5}、\overline{6}$</li>
</ul>
<h3 id="2-2-2-和声小调"><a href="#2-2-2-和声小调" class="headerlink" title="2.2.2 和声小调"></a>2.2.2 和声小调</h3><ul>
<li>$6、7、\overline{1}、\overline{2}、\overline{3}、\overline{4}、{}^井\overline{5}、\overline{6}$</li>
</ul>
<h3 id="2-2-3-旋律小调"><a href="#2-2-3-旋律小调" class="headerlink" title="2.2.3 旋律小调"></a>2.2.3 旋律小调</h3><ul>
<li>$6、7、\overline{1}、\overline{2}、\overline{3}、{}^井\overline{4}、{}^井\overline{5}、\overline{6}$</li>
</ul>
<h2 id="2-3-自然大调"><a href="#2-3-自然大调" class="headerlink" title="2.3 自然大调"></a>2.3 自然大调</h2><ul>
<li>以下对自然大调进行着重讲解，因为自然大调在流行音乐中较为常见</li>
<li>在吉他谱中，会在琴谱左上角标注C=1，这就规定了这首歌的<strong>调式为C调</strong><ul>
<li>同理，如果标注G=1，则这首歌的<strong>调式为G调</strong></li>
<li>根据半音的规律，我们就可以在自然大调中推导出<strong>十二种调式</strong>（十二平均律）</li>
<li>不同调式的给人的感觉是不同的，音名的构成也是不同的，下表就列出了不同调式的音的构成</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">调</th>
<th style="text-align:center">音名</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">唱名</td>
<td style="text-align:center">1、2、3、4、5、6、7、1</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">C、D、E、F、G、A、B、C</td>
</tr>
<tr>
<td style="text-align:center">bD</td>
<td style="text-align:center">#C、#D、#E、#F、#G、#A、#B、#C</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">D、E、#F、G、A、B、#C、D</td>
</tr>
<tr>
<td style="text-align:center">bE</td>
<td style="text-align:center">bE、F、G、bA、bB、C、D、bE</td>
</tr>
<tr>
<td style="text-align:center">E</td>
<td style="text-align:center">E、#F、#G、A、B、#C、#D、E</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">F、G、A、bB、C、D、E、F</td>
</tr>
<tr>
<td style="text-align:center">bG</td>
<td style="text-align:center">bG、bA、bB、bC、bD、bE、F、bG</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">G、A、B、C、D、E、#F、G</td>
</tr>
<tr>
<td style="text-align:center">bA</td>
<td style="text-align:center">bA、bB、C、bD、bE、F、G、bA</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">A、B、#C、D、E、#F、#G、A</td>
</tr>
<tr>
<td style="text-align:center">bB</td>
<td style="text-align:center">bB、C、D、bE、F、G、A、bB</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">B、#C、#D、E、#F、#G、#A、B</td>
</tr>
</tbody>
</table>
</div>
<h1 id="三、和弦"><a href="#三、和弦" class="headerlink" title="三、和弦"></a>三、和弦</h1><h1 id="四、节奏"><a href="#四、节奏" class="headerlink" title="四、节奏"></a>四、节奏</h1><h2 id="4-1-音符"><a href="#4-1-音符" class="headerlink" title="4.1 音符"></a>4.1 音符</h2>]]></content>
      <categories>
        <category>文化艺术</category>
        <category>乐理</category>
      </categories>
      <tags>
        <tag>乐理</tag>
        <tag>调式</tag>
        <tag>和弦</tag>
        <tag>和弦进行</tag>
        <tag>吉他音阶分布</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql基础大全</title>
    <url>/2022/03/10/Mysql%E5%9F%BA%E7%A1%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="一、MySql的语法规范"><a href="#一、MySql的语法规范" class="headerlink" title="一、MySql的语法规范"></a>一、MySql的语法规范</h1><ul>
<li>不区分大小写，但建议关键字大写，表名、列名小写</li>
<li>每条命令最好用分号结尾</li>
</ul>
<h1 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a>二、注释</h1><ul>
<li><h1 id="注释文字（单行注释）"><a href="#注释文字（单行注释）" class="headerlink" title="注释文字（单行注释）"></a>注释文字（单行注释）</h1></li>
<li>— 注释文字（单行注释）</li>
<li>/<em> 注释文字 </em>/（多行注释）</li>
</ul>
<h1 id="三、查询"><a href="#三、查询" class="headerlink" title="三、查询"></a>三、查询</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 分组查询推荐尽可能使用分组前筛选，即在<span class="keyword">group</span> <span class="keyword">by</span>前使用<span class="keyword">where</span></span><br><span class="line"><span class="keyword">SELECT</span> [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> [表名,...]</span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">    <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h2 id="3-1-连接查询"><a href="#3-1-连接查询" class="headerlink" title="3.1 连接查询"></a>3.1 连接查询</h2><h3 id="3-1-1-内连接"><a href="#3-1-1-内连接" class="headerlink" title="3.1.1 内连接"></a>3.1.1 内连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    这属于sql99语法，作用等同于不加inner join时的查询</span></span><br><span class="line"><span class="comment">    不加inner join属于隐式连接，用inner join时，inner可以省略</span></span><br><span class="line"><span class="comment">    等值连接在WHERE子句中判断中写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span>  [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">     <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-2-外连接"><a href="#3-1-2-外连接" class="headerlink" title="3.1.2 外连接"></a>3.1.2 外连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span></span><br><span class="line"><span class="keyword">left</span><span class="operator">/</span><span class="keyword">right</span><span class="operator">/</span><span class="keyword">full</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">    <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-3-交叉连接（笛卡尔积）"><a href="#3-1-3-交叉连接（笛卡尔积）" class="headerlink" title="3.1.3 交叉连接（笛卡尔积）"></a>3.1.3 交叉连接（笛卡尔积）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span></span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">    <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-4-子查询"><a href="#3-1-4-子查询" class="headerlink" title="3.1.4 子查询"></a>3.1.4 子查询</h3><h3 id="3-1-5-分页查询"><a href="#3-1-5-分页查询" class="headerlink" title="3.1.5 分页查询"></a>3.1.5 分页查询</h3><ul>
<li>offset要显示条目的起始索引（起始索引从0开始）</li>
<li>size要显示的条目个数</li>
<li>网页的分页显示数据需要对数据库进行分页查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [字段名,...]</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名<span class="number">1</span></span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> [条件]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> [字段名]</span><br><span class="line">    <span class="keyword">HAVING</span> [条件]</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span><span class="operator">/</span><span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="keyword">offset</span>,size;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-6-联合查询"><a href="#3-1-6-联合查询" class="headerlink" title="3.1.6 联合查询"></a>3.1.6 联合查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    适用于要查询的结果来自多个表，且多个表没有直接的连接关系，但查询的信息一致时可以使用联合查询，类似于数学的并集</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">查询语句<span class="number">1</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">查询语句<span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line"><span class="keyword">SELECT</span> id,cname,csex <span class="keyword">FROM</span> t_ca</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> t_id,tName,tGender <span class="keyword">FROM</span> <span class="keyword">WHERE</span> tGender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 加<span class="keyword">ALL</span>表示会包含重复的内容</span><br><span class="line"><span class="keyword">SELECT</span> id,cname,csex <span class="keyword">FROM</span> t_ca</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> t_id,tName,tGender <span class="keyword">FROM</span> <span class="keyword">WHERE</span> tGender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h2><h3 id="3-2-1-查询前五条员工信息"><a href="#3-2-1-查询前五条员工信息" class="headerlink" title="3.2.1 查询前五条员工信息"></a>3.2.1 查询前五条员工信息</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">0</span>,<span class="number">5</span>;  </span><br><span class="line">#或者</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-分页查询规律"><a href="#3-2-2-分页查询规律" class="headerlink" title="3.2.2 分页查询规律"></a>3.2.2 分页查询规律</h3><ul>
<li>page表示第几页，(page-1)*size表示每一页的起始查询位置<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line">LIMIT (page<span class="number">-1</span>)<span class="operator">*</span>size,size;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="四、增删改"><a href="#四、增删改" class="headerlink" title="四、增删改"></a>四、增删改</h1><h2 id="4-1-插入数据"><a href="#4-1-插入数据" class="headerlink" title="4.1 插入数据"></a>4.1 插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(元组值);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名序列) <span class="keyword">VALUES</span>(元组值);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名序列) <span class="keyword">VALUES</span>(元组值),(元组值),...;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">SET</span> 列名<span class="operator">=</span>值,列名<span class="operator">=</span>值,...    #用的少</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名序列) <span class="keyword">SELECT</span> 查询语句;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名序列) <span class="keyword">TABLE</span> 表名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-删除数据"><a href="#4-2-删除数据" class="headerlink" title="4.2 删除数据"></a>4.2 删除数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件表达式</span><br></pre></td></tr></table></figure>
<h2 id="4-3-修改数据"><a href="#4-3-修改数据" class="headerlink" title="4.3 修改数据"></a>4.3 修改数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 <span class="keyword">SET</span> 列名<span class="operator">=</span>值表达式,列名<span class="operator">=</span>值表达式,... <span class="keyword">WHERE</span> 条件表达式</span><br><span class="line">UPDATE 表名 <span class="keyword">SET</span> <span class="type">ROW</span><span class="operator">=</span>元组 <span class="keyword">WHERE</span> 条件表达式</span><br></pre></td></tr></table></figure>
<h1 id="五、视图"><a href="#五、视图" class="headerlink" title="五、视图"></a>五、视图</h1><h2 id="5-1-视图的创建"><a href="#5-1-视图的创建" class="headerlink" title="5.1 视图的创建"></a>5.1 视图的创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名(列名序列) <span class="keyword">AS</span> <span class="keyword">SELECT</span>查询语句</span><br></pre></td></tr></table></figure>
<h2 id="5-2-视图的撤销"><a href="#5-2-视图的撤销" class="headerlink" title="5.2 视图的撤销"></a>5.2 视图的撤销</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名</span><br></pre></td></tr></table></figure>
<h1 id="六、Mysql数据类型"><a href="#六、Mysql数据类型" class="headerlink" title="六、Mysql数据类型"></a>六、Mysql数据类型</h1><h2 id="6-1-数值型"><a href="#6-1-数值型" class="headerlink" title="6.1 数值型"></a>6.1 数值型</h2><div class="table-container">
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围（有符号）</th>
<th>范围（无符号）</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1 byte</td>
<td>(-128，127)</td>
<td>(0，255)</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2 bytes</td>
<td>(-32 768，32 767)</td>
<td>(0，65 535)</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3 bytes</td>
<td>(-8 388 608，8 388 607)</td>
<td>(0，16 777 215)</td>
</tr>
<tr>
<td>INT或INTEGER</td>
<td>4 bytes</td>
<td>(-2 147 483 648，2 147 483 647)</td>
<td>(0，4 294 967 295)</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8 bytes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>FLOAT</td>
<td>4 bytes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8 bytes</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DECIMAL</td>
<td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<h2 id="6-2-日期型"><a href="#6-2-日期型" class="headerlink" title="6.2 日期型"></a>6.2 日期型</h2><h2 id="6-3-字符型"><a href="#6-3-字符型" class="headerlink" title="6.3 字符型"></a>6.3 字符型</h2>]]></content>
      <categories>
        <category>后端</category>
        <category>数据库</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
